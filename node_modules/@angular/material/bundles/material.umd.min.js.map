{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/toolbar/index.ts","../../src/lib/version.ts","../../src/lib/core/line/line.ts","../../src/lib/core/placeholder/placeholder-options.ts","../../src/lib/core/style/apply-transform.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/stepper/index.ts","../../src/lib/table/table.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/index.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/index.ts","../../src/lib/sort/sort.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/sort/index.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/sidenav/index.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/index.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/paginator/index.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-bar/index.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/radio/index.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select-errors.ts","../../src/lib/select/select.ts","../../src/lib/select/select-module.ts","../../src/lib/select/index.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/list/list.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/index.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/grid-list/index.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-errors.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/input/index.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/accordion-item.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/expansion/index.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/dialog/index.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/icon/index.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/checkbox/index.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button/index.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/button-toggle/index.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/core/option/option.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../src/lib/form-field/index.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/autocomplete/index.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/compatibility/compatibility.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/core/option/index.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/datepicker/coerce-date-property.ts","../../src/lib/grid-list/grid-list-measure.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/progress-spinner/index.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/coordination/unique-selection-dispatcher.ts","../../src/lib/core/util/object-extend.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {auditTime, takeUntil} from '@angular/cdk/rxjs';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleGlobalOptions,\n  ThemePalette,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subject} from 'rxjs/Subject';\nimport {MatInkBar} from '../ink-bar';\n/**\n * \\@docs-private\n */\nexport class MatTabNavBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatTabNavBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabNavBase.prototype._renderer;\n/** @type {?} */\nMatTabNavBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatTabNavMixinBase = mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\nexport class MatTabNav extends _MatTabNavMixinBase implements AfterContentInit, CanColor,\n    CanDisableRipple, OnDestroy {\n/**\n * Subject that emits when the component has been destroyed.\n */\nprivate _onDestroy = new Subject<void>();\n\n  _activeLinkChanged: boolean;\n  _activeLinkElement: ElementRef;\n\n   _inkBar: MatInkBar;\n/**\n * Query list of all tab links of the tab navigation.\n */\n_tabLinks: QueryList<MatTabLink>;\n/**\n * Background color of the tab nav.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Whether ripples should be disabled for all links or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setLinkDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(renderer, elementRef);\n  }\n/**\n * Notifies the component that the active link has been changed.\n * @param {?} element\n * @return {?}\n */\nupdateActiveLink(element: ElementRef) {\n    this._activeLinkChanged = this._activeLinkElement != element;\n    this._activeLinkElement = element;\n\n    if (this._activeLinkChanged) {\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      let /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n      let /** @type {?} */ resize = typeof window !== 'undefined' ?\n          auditTime.call(fromEvent(window, 'resize'), 10) :\n          observableOf(null);\n\n      return takeUntil.call(merge(dirChange, resize), this._onDestroy).subscribe(() => {\n        this._alignInkBar();\n      });\n    });\n\n    this._setLinkDisableRipple();\n  }\n/**\n * Checks if the active link has been changed and, if so, will update the ink bar.\n * @return {?}\n */\nngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n/**\n * Aligns the ink bar to the active link.\n * @return {?}\n */\n_alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    }\n  }\n/**\n * Sets the `disableRipple` property on each link of the navigation bar.\n * @return {?}\n */\nprivate _setLinkDisableRipple() {\n    if (this._tabLinks) {\n      this._tabLinks.forEach(link => link.disableRipple = this.disableRipple);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_inkBar': [{ type: ViewChild, args: [MatInkBar, ] },],\n'_tabLinks': [{ type: ContentChildren, args: [forwardRef(() => MatTabLink), {descendants: true}, ] },],\n'backgroundColor': [{ type: Input },],\n};\n}\n\nfunction MatTabNav_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabNav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabNav.ctorParameters;\n/** @type {?} */\nMatTabNav.propDecorators;\n/**\n * Subject that emits when the component has been destroyed.\n * @type {?}\n */\nMatTabNav.prototype._onDestroy;\n/** @type {?} */\nMatTabNav.prototype._activeLinkChanged;\n/** @type {?} */\nMatTabNav.prototype._activeLinkElement;\n/** @type {?} */\nMatTabNav.prototype._inkBar;\n/**\n * Query list of all tab links of the tab navigation.\n * @type {?}\n */\nMatTabNav.prototype._tabLinks;\n/** @type {?} */\nMatTabNav.prototype._backgroundColor;\n/** @type {?} */\nMatTabNav.prototype._disableRipple;\n/** @type {?} */\nMatTabNav.prototype._dir;\n/** @type {?} */\nMatTabNav.prototype._ngZone;\n/** @type {?} */\nMatTabNav.prototype._changeDetectorRef;\n}\n\nexport class MatTabLinkBase {}\nexport const /** @type {?} */ _MatTabLinkMixinBase = mixinDisabled(MatTabLinkBase);\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\nexport class MatTabLink extends _MatTabLinkMixinBase implements OnDestroy, CanDisable {\n/**\n * Whether the tab link is active or not.\n */\nprivate _isActive: boolean = false;\n/**\n * Whether the ripples for this tab should be disabled or not.\n */\nprivate _disableRipple: boolean = false;\n/**\n * Reference to the instance of the ripple for the tab link.\n */\nprivate _tabLinkRipple: MatRipple;\n/**\n * Whether the link is active.\n * @return {?}\n */\nget active(): boolean { return this._isActive; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: boolean) {\n    this._isActive = value;\n    if (value) {\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n/**\n * Whether ripples should be disabled or not.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._tabLinkRipple.disabled = this.disableRipple;\n    this._tabLinkRipple._updateRippleRenderer();\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget tabIndex(): number {\n    return this.disabled ? -1 : 0;\n  }\n/**\n * @param {?} _tabNavBar\n * @param {?} _elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(private _tabNavBar: MatTabNav,\nprivate _elementRef: ElementRef,\n              ngZone: NgZone,\n              ruler: ViewportRuler,\n              platform: Platform,\n                globalOptions: RippleGlobalOptions) {\n    super();\n\n    // Manually create a ripple instance that uses the tab link element as trigger element.\n    // Notice that the lifecycle hooks for the ripple config won't be called anymore.\n    this._tabLinkRipple = new MatRipple(_elementRef, ngZone, ruler, platform, globalOptions);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Manually call the ngOnDestroy lifecycle hook of the ripple instance because it won't be\n    // called automatically since its instance is not created by Angular.\n    this._tabLinkRipple.ngOnDestroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-tab-link], [matTabLink]',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatTabNav, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input },],\n};\n}\n\nfunction MatTabLink_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabLink.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabLink.ctorParameters;\n/** @type {?} */\nMatTabLink.propDecorators;\n/**\n * Whether the tab link is active or not.\n * @type {?}\n */\nMatTabLink.prototype._isActive;\n/**\n * Whether the ripples for this tab should be disabled or not.\n * @type {?}\n */\nMatTabLink.prototype._disableRipple;\n/**\n * Reference to the instance of the ripple for the tab link.\n * @type {?}\n */\nMatTabLink.prototype._tabLinkRipple;\n/** @type {?} */\nMatTabLink.prototype._tabNavBar;\n/** @type {?} */\nMatTabLink.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody} from './tab-body';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nexport class MatTabsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    ScrollDispatchModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabHeader\n  ],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatTabsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nexport class MatToolbarRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-toolbar-row',\n  host: {'class': 'mat-toolbar-row'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatToolbarRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMatToolbarRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatToolbarRow.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatToolbarBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatToolbarBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatToolbarBase.prototype._renderer;\n/** @type {?} */\nMatToolbarBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatToolbarMixinBase = mixinColor(MatToolbarBase);\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor {\n/**\n * @param {?} renderer\n * @param {?} elementRef\n */\nconstructor(renderer: Renderer2, elementRef: ElementRef) {\n    super(renderer, elementRef);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    'role': 'toolbar'\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\n}\n\nfunction MatToolbar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatToolbar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatToolbar.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\nexport class MatToolbarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatToolbarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatToolbarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatToolbarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatToolbarModule,MatToolbarRow,MatToolbarBase,_MatToolbarMixinBase,MatToolbar} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * Current version of Angular Material.\n */\nexport const VERSION = new Version('0.0.0-PLACEHOLDER');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  NgModule,\n  Directive,\n  Renderer2,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a \\@ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\nexport class MatLine {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatLine_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLine.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatLine.ctorParameters;\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * \\@docs-private\n */\nexport class MatLineSetter {\n/**\n * @param {?} _lines\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _lines: QueryList<MatLine>,\nprivate _renderer: Renderer2,\nprivate _element: ElementRef) {\n    this._setLineClass(this._lines.length);\n\n    this._lines.changes.subscribe(() => {\n      this._setLineClass(this._lines.length);\n    });\n  }\n/**\n * @param {?} count\n * @return {?}\n */\nprivate _setLineClass(count: number): void {\n    this._resetClasses();\n    if (count === 2 || count === 3) {\n      this._setClass(`mat-${count}-line`, true);\n    } else if (count > 3) {\n      this._setClass(`mat-multi-line`, true);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _resetClasses(): void {\n    this._setClass('mat-2-line', false);\n    this._setClass('mat-3-line', false);\n    this._setClass('mat-multi-line', false);\n  }\n/**\n * @param {?} className\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setClass(className: string, isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, className);\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, className);\n    }\n  }\n\n}\n\nfunction MatLineSetter_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLineSetter.prototype._lines;\n/** @type {?} */\nMatLineSetter.prototype._renderer;\n/** @type {?} */\nMatLineSetter.prototype._element;\n}\n\nexport class MatLineModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatLineModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatLineModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatLineModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport { InjectionToken } from '@angular/core';\n/**\n * InjectionToken that can be used to specify the global placeholder options.\n */\nexport const MAT_PLACEHOLDER_GLOBAL_OPTIONS =\n  new InjectionToken<PlaceholderOptions>('mat-placeholder-global-options');\n\n/** Type for the available floatPlaceholder values. */\nexport type FloatPlaceholderType = 'always' | 'never' | 'auto';\n\nexport interface PlaceholderOptions {\n  float?: FloatPlaceholderType;\n}\n","\n/**\n * Applies a CSS transform to an element, including browser-prefixed properties.\n * @param {?} element\n * @param {?} transformValue\n * @return {?}\n */\nexport function applyCssTransform(element: HTMLElement, transformValue: string) {\n  // It's important to trim the result, because the browser will ignore the set operation\n  // if the string contains only whitespace.\n  let /** @type {?} */ value = transformValue.trim();\n\n  element.style.transform = value;\n  element.style.webkitTransform = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatStepperNext = CdkStepperNext;\nexport const /** @type {?} */ _MatStepperPrevious = CdkStepperPrevious;\n/**\n * Button that moves to the next step in a stepper workflow.\n */\nexport class MatStepperNext extends _MatStepperNext { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[matStepperNext]',\n  host: {'(click)': '_stepper.next()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatStepperNext_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepperNext.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepperNext.ctorParameters;\n}\n\n/**\n * Button that moves to the previous step in a stepper workflow.\n */\nexport class MatStepperPrevious extends _MatStepperPrevious { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[matStepperPrevious]',\n  host: {'(click)': '_stepper.previous()'},\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatStepperPrevious_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepperPrevious.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepperPrevious.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nexport class MatStepperModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader\n  ],\n  declarations: [MatHorizontalStepper, MatVerticalStepper, MatStep, MatStepLabel, MatStepper,\n    MatStepperNext, MatStepperPrevious, MatStepHeader],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatStepperModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepperModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepperModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatStepperModule,_MatStepLabel,MatStepLabel,_MatStep,_MatStepper,MatStep,MatStepper,MatHorizontalStepper,MatVerticalStepper,_MatStepperNext,_MatStepperPrevious,MatStepperNext,MatStepperPrevious,MatStepHeader} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatTable = CdkTable;\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nexport class MatTable<T> extends _MatTable<T> { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-table',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatTable_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTable.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTable.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, Renderer2} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatCellDef = CdkCellDef;\nexport const /** @type {?} */ _MatHeaderCellDef = CdkHeaderCellDef;\nexport const /** @type {?} */ _MatColumnDef = CdkColumnDef;\nexport const /** @type {?} */ _MatHeaderCell = CdkHeaderCell;\nexport const /** @type {?} */ _MatCell = CdkCell;\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nexport class MatCellDef extends _MatCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCellDef.ctorParameters;\n}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nexport class MatHeaderCellDef extends _MatHeaderCellDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHeaderCellDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderCellDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderCellDef.ctorParameters;\n}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nexport class MatColumnDef extends _MatColumnDef {\n/**\n * Unique name for this column.\n */\nname: string;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matColumnDef]',\n  providers: [{provide: CdkColumnDef, useExisting: MatColumnDef}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input, args: ['matColumnDef', ] },],\n};\n}\n\nfunction MatColumnDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatColumnDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatColumnDef.ctorParameters;\n/** @type {?} */\nMatColumnDef.propDecorators;\n/**\n * Unique name for this column.\n * @type {?}\n */\nMatColumnDef.prototype.name;\n}\n\n/**\n * Header cell template container that adds the right classes and role.\n */\nexport class MatHeaderCell extends _MatHeaderCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-header-cell',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MatHeaderCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderCell.ctorParameters;\n}\n\n/**\n * Cell template container that adds the right classes and role.\n */\nexport class MatCell extends _MatCell {\n/**\n * @param {?} columnDef\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef,\n              renderer: Renderer2) {\n    super(columnDef, elementRef, renderer);\n    renderer.addClass(elementRef.nativeElement, `mat-column-${columnDef.cssClassFriendlyName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-cell',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkColumnDef, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MatCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCell.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCell.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectionStrategy, Component, Directive, ViewEncapsulation} from '@angular/core';\nimport {\n  CdkHeaderRow,\n  CdkRow,\n  CDK_ROW_TEMPLATE,\n  CdkRowDef,\n  CdkHeaderRowDef,\n} from '@angular/cdk/table';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatHeaderRowDef = CdkHeaderRowDef;\nexport const /** @type {?} */ _MatCdkRowDef = CdkRowDef;\nexport const /** @type {?} */ _MatHeaderRow = CdkHeaderRow;\nexport const /** @type {?} */ _MatRow = CdkRow;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nexport class MatHeaderRowDef extends _MatHeaderRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHeaderRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderRowDef.ctorParameters;\n}\n\n/**\n * Data row definition for the mat-table.\n * Captures the header row's template and other row properties such as the columns to display.\n */\nexport class MatRowDef extends _MatCdkRowDef { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRowDef_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRowDef.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRowDef.ctorParameters;\n}\n\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MatHeaderRow extends _MatHeaderRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-header-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHeaderRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHeaderRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHeaderRow.ctorParameters;\n}\n\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nexport class MatRow extends _MatRow { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-row',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {MatCell, MatHeaderCell, MatCellDef, MatHeaderCellDef, MatColumnDef} from './cell';\nimport {MatHeaderRow, MatRow, MatHeaderRowDef, MatRowDef} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nexport class MatTableModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n  declarations: [MatTable, MatCellDef, MatHeaderCellDef, MatColumnDef,\n    MatHeaderCell, MatCell, MatHeaderRow, MatRow,\n    MatHeaderRowDef, MatRowDef],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatTableModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTableModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTableModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatTableModule,_MatCellDef,_MatHeaderCellDef,_MatColumnDef,_MatHeaderCell,_MatCell,MatCellDef,MatHeaderCellDef,MatColumnDef,MatHeaderCell,MatCell,_MatTable,MatTable,_MatHeaderRowDef,_MatCdkRowDef,_MatHeaderRow,_MatRow,MatHeaderRowDef,MatRowDef,MatHeaderRow,MatRow} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Renderer2, ElementRef, NgZone} from '@angular/core';\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * \\@docs-private\n */\nexport class MatInkBar {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _ngZone\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _ngZone: NgZone) {}\n/**\n * Calculates the styles from the provided element in order to align the ink-bar to that element.\n * Shows the ink bar if previously set as hidden.\n * @param {?} element\n * @return {?}\n */\nalignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n/**\n * Shows the ink bar.\n * @return {?}\n */\nshow(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');\n  }\n/**\n * Hides the ink bar.\n * @return {?}\n */\nhide(): void {\n    this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');\n  }\n/**\n * Sets the proper styles to the ink bar element.\n * @param {?} element\n * @return {?}\n */\nprivate _setStyles(element: HTMLElement) {\n    const /** @type {?} */ left = element ? (element.offsetLeft || 0) + 'px' : '0';\n    const /** @type {?} */ width = element ? (element.offsetWidth || 0) + 'px' : '0';\n\n    this._renderer.setStyle(this._elementRef.nativeElement, 'left', left);\n    this._renderer.setStyle(this._elementRef.nativeElement, 'width', width);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\n}\n\nfunction MatInkBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatInkBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatInkBar.ctorParameters;\n/** @type {?} */\nMatInkBar.prototype._renderer;\n/** @type {?} */\nMatInkBar.prototype._elementRef;\n/** @type {?} */\nMatInkBar.prototype._ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef, ViewContainerRef} from '@angular/core';\nimport {TemplatePortalDirective} from '@angular/cdk/portal';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatTabLabelBaseClass = TemplatePortalDirective;\n/**\n * Used to flag tab labels for use with the portal directive\n */\nexport class MatTabLabel extends _MatTabLabelBaseClass {\n/**\n * @param {?} templateRef\n * @param {?} viewContainerRef\n */\nconstructor(templateRef: TemplateRef<any>, viewContainerRef: ViewContainerRef) {\n    super(templateRef, viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-tab-label], [matTabLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n];\n}\n\nfunction MatTabLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatTabLabel} from './tab-label';\n/**\n * \\@docs-private\n */\nexport class MatTabBase {}\nexport const /** @type {?} */ _MatTabMixinBase = mixinDisabled(MatTabBase);\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n/**\n * Content for the tab label given by <ng-template mat-tab-label>.\n */\ntemplateLabel: MatTabLabel;\n/**\n * Template inside the MatTab view that contains an <ng-content>.\n */\n_content: TemplateRef<any>;\n/**\n * The plain text label for the tab, used when there is no template label.\n */\ntextLabel: string = '';\n/**\n * The portal that will be the hosted content of the tab\n */\nprivate _contentPortal: TemplatePortal<any> | null = null;\n/**\n * @return {?}\n */\nget content(): TemplatePortal<any> | null { return this._contentPortal; }\n/**\n * Emits whenever the label changes.\n */\n_labelChange = new Subject<void>();\n/**\n * Emits whenevfer the disable changes\n */\n_disableChange = new Subject<void>();\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n */\nposition: number | null = null;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n */\norigin: number | null = null;\n/**\n * Whether the tab is currently active.\n */\nisActive = false;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel')) {\n      this._labelChange.next();\n    }\n\n    if (changes.hasOwnProperty('disabled')) {\n      this._disableChange.next();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._disableChange.complete();\n    this._labelChange.complete();\n  }\n/**\n * @return {?}\n */\nngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this._content, this._viewContainerRef);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  exportAs: 'matTab',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'templateLabel': [{ type: ContentChild, args: [MatTabLabel, ] },],\n'_content': [{ type: ViewChild, args: [TemplateRef, ] },],\n'textLabel': [{ type: Input, args: ['label', ] },],\n};\n}\n\nfunction MatTab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTab.ctorParameters;\n/** @type {?} */\nMatTab.propDecorators;\n/**\n * Content for the tab label given by <ng-template mat-tab-label>.\n * @type {?}\n */\nMatTab.prototype.templateLabel;\n/**\n * Template inside the MatTab view that contains an <ng-content>.\n * @type {?}\n */\nMatTab.prototype._content;\n/**\n * The plain text label for the tab, used when there is no template label.\n * @type {?}\n */\nMatTab.prototype.textLabel;\n/**\n * The portal that will be the hosted content of the tab\n * @type {?}\n */\nMatTab.prototype._contentPortal;\n/**\n * Emits whenever the label changes.\n * @type {?}\n */\nMatTab.prototype._labelChange;\n/**\n * Emits whenevfer the disable changes\n * @type {?}\n */\nMatTab.prototype._disableChange;\n/**\n * The relatively indexed position where 0 represents the center, negative is left, and positive\n * represents the right.\n * @type {?}\n */\nMatTab.prototype.position;\n/**\n * The initial relatively index origin of the tab if it was created and selected after there\n * was already a selected tab. Provides context of what position the tab should originate from.\n * @type {?}\n */\nMatTab.prototype.origin;\n/**\n * Whether the tab is currently active.\n * @type {?}\n */\nMatTab.prototype.isActive;\n/** @type {?} */\nMatTab.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ViewChild,\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  ElementRef,\n  Optional,\n  AfterViewChecked,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationEvent,\n} from '@angular/animations';\nimport {TemplatePortal, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n/**\n * Wrapper for the contents of a tab.\n * \\@docs-private\n */\nexport class MatTabBody implements OnInit, AfterViewChecked {\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n */\nonCentering: EventEmitter<number> = new EventEmitter<number>();\n/**\n * Event emitted when the tab completes its animation towards the center.\n */\nonCentered: EventEmitter<void> = new EventEmitter<void>(true);\n/**\n * The tab body content to display.\n */\n_content: TemplatePortal<any>;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n */\n_position: MatTabBodyPositionState;\n/**\n * @param {?} position\n * @return {?}\n */\nset position(position: number) {\n    if (position < 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'left' : 'right';\n    } else if (position > 0) {\n      this._position = this._getLayoutDirection() == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n/**\n * The origin position from which this tab should appear when it is centered into view.\n */\n_origin: MatTabBodyOriginState;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @param {?} origin\n * @return {?}\n */\nset origin(origin: number) {\n    if (origin == null) { return; }\n\n    const /** @type {?} */ dir = this._getLayoutDirection();\n    if ((dir == 'ltr' && origin <= 0) || (dir == 'rtl' && origin > 0)) {\n      this._origin = 'left';\n    } else {\n      this._origin = 'right';\n    }\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _dir: Directionality) { }\n/**\n * After initialized, check if the content is centered and has an origin. If so, set the\n * special position states that transition the tab from the left or right before centering.\n * @return {?}\n */\nngOnInit() {\n    if (this._position == 'center' && this._origin) {\n      this._position = this._origin == 'left' ? 'left-origin-center' : 'right-origin-center';\n    }\n  }\n/**\n * After the view has been set, check if the tab content is set to the center and attach the\n * content if it is not already attached.\n * @return {?}\n */\nngAfterViewChecked() {\n    if (this._isCenterPosition(this._position) && !this._portalHost.hasAttached()) {\n      this._portalHost.attach(this._content);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabStarted(e: AnimationEvent) {\n    if (this._isCenterPosition(e.toState)) {\n      this.onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n/**\n * @param {?} e\n * @return {?}\n */\n_onTranslateTabComplete(e: AnimationEvent) {\n    // If the end state is that the tab is not centered, then detach the content.\n    if (!this._isCenterPosition(e.toState) && !this._isCenterPosition(this._position)) {\n      this._portalHost.detach();\n    }\n\n    // If the transition to the center is complete, emit an event.\n    if (this._isCenterPosition(e.toState) && this._isCenterPosition(this._position)) {\n      this.onCentered.emit();\n    }\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the provided position state is considered center, regardless of origin.\n * @param {?} position\n * @return {?}\n */\nprivate _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-body',\n  },\n  animations: [\n    trigger('translateTab', [\n      state('void', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('left', style({transform: 'translate3d(-100%, 0, 0)'})),\n      state('left-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right-origin-center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('center', style({transform: 'translate3d(0%, 0, 0)'})),\n      state('right', style({transform: 'translate3d(100%, 0, 0)'})),\n      transition('* => left, * => right, left => center, right => center',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),\n      transition('void => left-origin-center', [\n        style({transform: 'translate3d(-100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ]),\n      transition('void => right-origin-center', [\n        style({transform: 'translate3d(100%, 0, 0)'}),\n        animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')\n      ])\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n'onCentering': [{ type: Output },],\n'onCentered': [{ type: Output },],\n'_content': [{ type: Input, args: ['content', ] },],\n'position': [{ type: Input, args: ['position', ] },],\n'origin': [{ type: Input, args: ['origin', ] },],\n};\n}\n\nfunction MatTabBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabBody.ctorParameters;\n/** @type {?} */\nMatTabBody.propDecorators;\n/**\n * The portal host inside of this container into which the tab body content will be loaded.\n * @type {?}\n */\nMatTabBody.prototype._portalHost;\n/**\n * Event emitted when the tab begins to animate towards the center as the active tab.\n * @type {?}\n */\nMatTabBody.prototype.onCentering;\n/**\n * Event emitted when the tab completes its animation towards the center.\n * @type {?}\n */\nMatTabBody.prototype.onCentered;\n/**\n * The tab body content to display.\n * @type {?}\n */\nMatTabBody.prototype._content;\n/**\n * The shifted index position of the tab body, where zero represents the active center tab.\n * @type {?}\n */\nMatTabBody.prototype._position;\n/**\n * The origin position from which this tab should appear when it is centered into view.\n * @type {?}\n */\nMatTabBody.prototype._origin;\n/** @type {?} */\nMatTabBody.prototype._elementRef;\n/** @type {?} */\nMatTabBody.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatTab} from './tab';\nimport {merge} from 'rxjs/observable/merge';\nimport {\n  CanColor,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette\n} from '@angular/material/core';\n/**\n * Used to generate unique ID's for each tab component\n */\nlet nextId = 0;\n/**\n * A simple change event emitted on focus or selection changes.\n */\nexport class MatTabChangeEvent {\n  index: number;\n  tab: MatTab;\n}\n\nfunction MatTabChangeEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabChangeEvent.prototype.index;\n/** @type {?} */\nMatTabChangeEvent.prototype.tab;\n}\n\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n/**\n * \\@docs-private\n */\nexport class MatTabGroupBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatTabGroupBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabGroupBase.prototype._renderer;\n/** @type {?} */\nMatTabGroupBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://www.google.com/design/spec/components/tabs.html\n */\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, AfterViewChecked, OnDestroy, CanColor, CanDisableRipple {\n\n   _tabs: QueryList<MatTab>;\n\n   _tabBodyWrapper: ElementRef;\n/**\n * Whether this component has been initialized.\n */\nprivate _isInitialized: boolean = false;\n/**\n * The tab index that should be selected after the content has been checked.\n */\nprivate _indexToSelect: number | null = 0;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n */\nprivate _tabBodyWrapperHeight: number = 0;\n/**\n * Subscription to tabs being added/removed.\n */\nprivate _tabsSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the tab labels.\n */\nprivate _tabLabelSubscription = Subscription.EMPTY;\n/**\n * Whether the tab group should grow to the size of the active tab.\n * @return {?}\n */\nget dynamicHeight(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\nprivate _dynamicHeight: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _dynamicHeightDeprecated(): boolean { return this._dynamicHeight; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _dynamicHeightDeprecated(value: boolean) { this._dynamicHeight = value; }\n/**\n * The index of the active tab.\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number | null) { this._indexToSelect = value; }\n/**\n * @return {?}\n */\nget selectedIndex(): number | null { return this._selectedIndex; }\nprivate _selectedIndex: number | null = null;\n/**\n * Position of the tab header.\n */\nheaderPosition: MatTabHeaderPosition = 'above';\n/**\n * Background color of the tab group.\n * @return {?}\n */\nget backgroundColor(): ThemePalette { return this._backgroundColor; }\n/**\n * @param {?} value\n * @return {?}\n */\nset backgroundColor(value: ThemePalette) {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    this._renderer.removeClass(nativeElement, `mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      this._renderer.addClass(nativeElement, `mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\nprivate _backgroundColor: ThemePalette;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n */\nselectedIndexChange: EventEmitter<number> = new EventEmitter();\n/**\n * Event emitted when focus has changed within a tab group.\n */\nfocusChange: EventEmitter<MatTabChangeEvent> = new EventEmitter<MatTabChangeEvent>();\n/**\n * Event emitted when the tab selection has changed.\n */\nselectChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\nprivate _groupId: number;\n/**\n * @param {?} _renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(_renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super(_renderer, elementRef);\n    this._groupId = nextId++;\n  }\n/**\n * After the content is checked, this component knows what tabs have been defined\n * and what the selected index should be. This is where we can know exactly what position\n * each tab should be in according to the new selected index, and additionally we know how\n * a new selected tab should transition in (from the left or right).\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // Clamp the next selected index to the boundsof 0 and the tabs length.\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    let /** @type {?} */ indexToSelect = this._indexToSelect =\n        Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect && this._selectedIndex != null) {\n      this.selectChange.emit(this._createChangeEvent(indexToSelect));\n      // Emitting this value after change detection has run\n      // since the checked content may contain this variable'\n      Promise.resolve().then(() => this.selectedIndexChange.emit(indexToSelect));\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n      tab.isActive = index === indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n/**\n * Waits one frame for the view to update, then updates the ink bar\n * Note: This must be run outside of the zone or it will create an infinite change detection loop.\n * @return {?}\n */\nngAfterViewChecked(): void {\n    this._isInitialized = true;\n  }\n/**\n * @param {?} index\n * @return {?}\n */\n_focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n/**\n * @param {?} index\n * @return {?}\n */\nprivate _createChangeEvent(index: number): MatTabChangeEvent {\n    const /** @type {?} */ event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n/**\n * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\n * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n * binding to be updated, we need to subscribe to changes in it and trigger change detection\n * manually.\n * @return {?}\n */\nprivate _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(\n        ...this._tabs.map(tab => tab._disableChange),\n        ...this._tabs.map(tab => tab._labelChange)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Returns a unique id for each tab label element\n * @param {?} i\n * @return {?}\n */\n_getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n/**\n * Returns a unique id for each tab content element\n * @param {?} i\n * @return {?}\n */\n_getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n/**\n * Sets the height of the body wrapper to the height of the activating tab if dynamic\n * height property is true.\n * @param {?} tabHeight\n * @return {?}\n */\n_setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n        this._tabBodyWrapperHeight + 'px');\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height',\n          tabHeight + 'px');\n    }\n  }\n/**\n * Removes the height of the tab body wrapper.\n * @return {?}\n */\n_removeTabBodyWrapperHeight(): void {\n    this._tabBodyWrapperHeight = this._tabBodyWrapper.nativeElement.clientHeight;\n    this._renderer.setStyle(this._tabBodyWrapper.nativeElement, 'height', '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tabs': [{ type: ContentChildren, args: [MatTab, ] },],\n'_tabBodyWrapper': [{ type: ViewChild, args: ['tabBodyWrapper', ] },],\n'dynamicHeight': [{ type: Input },],\n'_dynamicHeightDeprecated': [{ type: Input, args: ['mat-dynamic-height', ] },],\n'selectedIndex': [{ type: Input },],\n'headerPosition': [{ type: Input },],\n'backgroundColor': [{ type: Input },],\n'selectedIndexChange': [{ type: Output },],\n'focusChange': [{ type: Output },],\n'selectChange': [{ type: Output },],\n};\n}\n\nfunction MatTabGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabGroup.ctorParameters;\n/** @type {?} */\nMatTabGroup.propDecorators;\n/** @type {?} */\nMatTabGroup.prototype._tabs;\n/** @type {?} */\nMatTabGroup.prototype._tabBodyWrapper;\n/**\n * Whether this component has been initialized.\n * @type {?}\n */\nMatTabGroup.prototype._isInitialized;\n/**\n * The tab index that should be selected after the content has been checked.\n * @type {?}\n */\nMatTabGroup.prototype._indexToSelect;\n/**\n * Snapshot of the height of the tab body wrapper before another tab is activated.\n * @type {?}\n */\nMatTabGroup.prototype._tabBodyWrapperHeight;\n/**\n * Subscription to tabs being added/removed.\n * @type {?}\n */\nMatTabGroup.prototype._tabsSubscription;\n/**\n * Subscription to changes in the tab labels.\n * @type {?}\n */\nMatTabGroup.prototype._tabLabelSubscription;\n/** @type {?} */\nMatTabGroup.prototype._dynamicHeight;\n/** @type {?} */\nMatTabGroup.prototype._selectedIndex;\n/**\n * Position of the tab header.\n * @type {?}\n */\nMatTabGroup.prototype.headerPosition;\n/** @type {?} */\nMatTabGroup.prototype._backgroundColor;\n/**\n * Output to enable support for two-way binding on `[(selectedIndex)]`\n * @type {?}\n */\nMatTabGroup.prototype.selectedIndexChange;\n/**\n * Event emitted when focus has changed within a tab group.\n * @type {?}\n */\nMatTabGroup.prototype.focusChange;\n/**\n * Event emitted when the tab selection has changed.\n * @type {?}\n */\nMatTabGroup.prototype.selectChange;\n/** @type {?} */\nMatTabGroup.prototype._groupId;\n/** @type {?} */\nMatTabGroup.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MatTabLabelWrapperBase {}\nexport const /** @type {?} */ _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * \\@docs-private\n */\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n/**\n * @param {?} elementRef\n */\nconstructor(public elementRef: ElementRef) {\n    super();\n  }\n/**\n * Sets focus on the wrapper element\n * @return {?}\n */\nfocus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n/**\n * @return {?}\n */\ngetOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n/**\n * @return {?}\n */\ngetOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MatTabLabelWrapper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabLabelWrapper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabLabelWrapper.ctorParameters;\n/** @type {?} */\nMatTabLabelWrapper.prototype.elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE} from '@angular/cdk/keycodes';\nimport {auditTime, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, mixinDisableRipple} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n/**\n * \\@docs-private\n */\nexport class MatTabHeaderBase {}\nexport const /** @type {?} */ _MatTabHeaderMixinBase = mixinDisableRipple(MatTabHeaderBase);\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * \\@docs-private\n */\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n   _labelWrappers: QueryList<MatTabLabelWrapper>;\n   _inkBar: MatInkBar;\n   _tabListContainer: ElementRef;\n   _tabList: ElementRef;\n/**\n * The tab index that is focused.\n */\nprivate _focusIndex: number = 0;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n */\nprivate _scrollDistance = 0;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n */\nprivate _selectedIndexChanged = false;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n */\nprivate _realignInkBar = Subscription.EMPTY;\n/**\n * Whether the controls for pagination should be displayed\n */\n_showPaginationControls = false;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n */\n_disableScrollAfter = true;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n */\n_disableScrollBefore = true;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n */\nprivate _tabLabelCount: number;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n */\nprivate _scrollDistanceChanged: boolean;\nprivate _selectedIndex: number = 0;\n/**\n * The index of the active tab.\n * @return {?}\n */\nget selectedIndex(): number { return this._selectedIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectedIndex(value: number) {\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n    this._focusIndex = value;\n  }\n/**\n * Event emitted when the option is selected.\n */\nselectFocusedIndex = new EventEmitter();\n/**\n * Event emitted when a label is focused.\n */\nindexFocused = new EventEmitter();\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(private _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this._updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case RIGHT_ARROW:\n        this._focusNextTab();\n        break;\n      case LEFT_ARROW:\n        this._focusPreviousTab();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * Aligns the ink bar to the selected tab on load.\n * @return {?}\n */\nngAfterContentInit() {\n    const /** @type {?} */ dirChange = this._dir ? this._dir.change : observableOf(null);\n    const /** @type {?} */ resize = typeof window !== 'undefined' ?\n        auditTime.call(fromEvent(window, 'resize'), 150) :\n        observableOf(null);\n\n    this._realignInkBar = startWith.call(merge(dirChange, resize), null).subscribe(() => {\n      this._updatePagination();\n      this._alignInkBarToSelectedTab();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._realignInkBar.unsubscribe();\n  }\n/**\n * Callback for when the MutationObserver detects that the content has changed.\n * @return {?}\n */\n_onContentChanges() {\n    this._updatePagination();\n    this._alignInkBarToSelectedTab();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Updating the view whether pagination should be enabled or not\n * @return {?}\n */\n_updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n/**\n * When the focus index is set, we must manually send focus to the correct label\n * @param {?} value\n * @return {?}\n */\nset focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this._focusIndex == value) { return; }\n\n    this._focusIndex = value;\n    this.indexFocused.emit(value);\n    this._setTabFocus(value);\n  }\n/**\n * Tracks which element has focus; used for keyboard navigation\n * @return {?}\n */\nget focusIndex(): number { return this._focusIndex; }\n/**\n * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n * providing a valid index and return true.\n * @param {?} index\n * @return {?}\n */\n_isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const /** @type {?} */ tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n/**\n * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n * scrolling is enabled.\n * @param {?} tabIndex\n * @return {?}\n */\n_setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const /** @type {?} */ containerEl = this._tabListContainer.nativeElement;\n      const /** @type {?} */ dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n/**\n * Moves the focus towards the beginning or the end of the list depending on the offset provided.\n * Valid offsets are 1 and -1.\n * @param {?} offset\n * @return {?}\n */\n_moveFocus(offset: number) {\n    if (this._labelWrappers) {\n      const /** @type {?} */ tabs: MatTabLabelWrapper[] = this._labelWrappers.toArray();\n\n      for (let /** @type {?} */ i = this.focusIndex + offset; i < tabs.length && i >= 0; i += offset) {\n        if (this._isValidIndex(i)) {\n          this.focusIndex = i;\n          return;\n        }\n      }\n    }\n  }\n/**\n * Increment the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusNextTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? 1 : -1);\n  }\n/**\n * Decrement the focus index by 1 until a valid tab is found.\n * @return {?}\n */\n_focusPreviousTab(): void {\n    this._moveFocus(this._getLayoutDirection() == 'ltr' ? -1 : 1);\n  }\n/**\n * The layout direction of the containing app.\n * @return {?}\n */\n_getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Performs the CSS transformation on the tab list that will cause the list to scroll.\n * @return {?}\n */\n_updateTabScrollPosition() {\n    const /** @type {?} */ scrollDistance = this.scrollDistance;\n    const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    this._renderer.setStyle(this._tabList.nativeElement, 'transform',\n        `translate3d(${translateX}px, 0, 0)`);\n  }\n/**\n * Sets the distance in pixels that the tab header should be transformed in the X-axis.\n * @param {?} v\n * @return {?}\n */\nset scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n/**\n * @return {?}\n */\nget scrollDistance(): number { return this._scrollDistance; }\n/**\n * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n * the end of the list, respectively). The distance to scroll is computed to be a third of the\n * length of the tab list view window.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} scrollDir\n * @return {?}\n */\n_scrollHeader(scrollDir: ScrollDirection) {\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n/**\n * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @param {?} labelIndex\n * @return {?}\n */\n_scrollToLabel(labelIndex: number) {\n    const /** @type {?} */ selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let /** @type {?} */ labelBeforePos: number, /** @type {?} */ labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const /** @type {?} */ beforeVisiblePos = this.scrollDistance;\n    const /** @type {?} */ afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n/**\n * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n * tab list is wider than the size of the header container, then the pagination controls should\n * be shown.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkPaginationEnabled() {\n    const /** @type {?} */ isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n/**\n * Evaluate whether the before and after controls should be enabled or disabled.\n * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n * before button. If the header is at the end of the list (scroll distance is equal to the\n * maximum distance we can scroll), then disable the after button.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n * is equal to the difference in width between the tab list container and tab header container.\n * \n * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n * should be called sparingly.\n * @return {?}\n */\n_getMaxScrollDistance(): number {\n    const /** @type {?} */ lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const /** @type {?} */ viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n/**\n * Tells the ink-bar to align itself to the current label wrapper\n * @return {?}\n */\nprivate _alignInkBarToSelectedTab(): void {\n    const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_labelWrappers': [{ type: ContentChildren, args: [MatTabLabelWrapper, ] },],\n'_inkBar': [{ type: ViewChild, args: [MatInkBar, ] },],\n'_tabListContainer': [{ type: ViewChild, args: ['tabListContainer', ] },],\n'_tabList': [{ type: ViewChild, args: ['tabList', ] },],\n'selectedIndex': [{ type: Input },],\n'selectFocusedIndex': [{ type: Output },],\n'indexFocused': [{ type: Output },],\n};\n}\n\nfunction MatTabHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTabHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTabHeader.ctorParameters;\n/** @type {?} */\nMatTabHeader.propDecorators;\n/** @type {?} */\nMatTabHeader.prototype._labelWrappers;\n/** @type {?} */\nMatTabHeader.prototype._inkBar;\n/** @type {?} */\nMatTabHeader.prototype._tabListContainer;\n/** @type {?} */\nMatTabHeader.prototype._tabList;\n/**\n * The tab index that is focused.\n * @type {?}\n */\nMatTabHeader.prototype._focusIndex;\n/**\n * The distance in pixels that the tab labels should be translated to the left.\n * @type {?}\n */\nMatTabHeader.prototype._scrollDistance;\n/**\n * Whether the header should scroll to the selected index after the view has been checked.\n * @type {?}\n */\nMatTabHeader.prototype._selectedIndexChanged;\n/**\n * Combines listeners that will re-align the ink bar whenever they're invoked.\n * @type {?}\n */\nMatTabHeader.prototype._realignInkBar;\n/**\n * Whether the controls for pagination should be displayed\n * @type {?}\n */\nMatTabHeader.prototype._showPaginationControls;\n/**\n * Whether the tab list can be scrolled more towards the end of the tab label list.\n * @type {?}\n */\nMatTabHeader.prototype._disableScrollAfter;\n/**\n * Whether the tab list can be scrolled more towards the beginning of the tab label list.\n * @type {?}\n */\nMatTabHeader.prototype._disableScrollBefore;\n/**\n * The number of tab labels that are displayed on the header. When this changes, the header\n * should re-evaluate the scroll position.\n * @type {?}\n */\nMatTabHeader.prototype._tabLabelCount;\n/**\n * Whether the scroll distance has changed and should be applied after the view is checked.\n * @type {?}\n */\nMatTabHeader.prototype._scrollDistanceChanged;\n/** @type {?} */\nMatTabHeader.prototype._selectedIndex;\n/**\n * Event emitted when the option is selected.\n * @type {?}\n */\nMatTabHeader.prototype.selectFocusedIndex;\n/**\n * Event emitted when a label is focused.\n * @type {?}\n */\nMatTabHeader.prototype.indexFocused;\n/** @type {?} */\nMatTabHeader.prototype._elementRef;\n/** @type {?} */\nMatTabHeader.prototype._renderer;\n/** @type {?} */\nMatTabHeader.prototype._changeDetectorRef;\n/** @type {?} */\nMatTabHeader.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarContainer} from './snack-bar-container';\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n/**\n * The instance of the component making up the content of the snack bar.\n */\ninstance: T;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n */\ncontainerInstance: MatSnackBarContainer;\n/**\n * Subject for notifying the user that the snack bar has closed.\n */\nprivate _afterClosed = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n */\nprivate _afterOpened = new Subject<void>();\n/**\n * Subject for notifying the user that the snack bar action was called.\n */\nprivate _onAction = new Subject<void>();\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n */\nprivate _durationTimeoutId: number;\n/**\n * @param {?} containerInstance\n * @param {?} _overlayRef\n */\nconstructor(containerInstance: MatSnackBarContainer,\nprivate _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n/**\n * Dismisses the snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (!this._afterClosed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n/**\n * Marks the snackbar action clicked.\n * @return {?}\n */\ncloseWithAction(): void {\n    if (!this._onAction.closed) {\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n/**\n * Dismisses the snack bar after some duration\n * @param {?} duration\n * @return {?}\n */\n_dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n/**\n * Marks the snackbar as opened\n * @return {?}\n */\n_open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n/**\n * Cleans up the DOM after closing.\n * @return {?}\n */\nprivate _finishDismiss(): void {\n    this._overlayRef.dispose();\n    this._afterClosed.next();\n    this._afterClosed.complete();\n  }\n/**\n * Gets an observable that is notified when the snack bar is finished closing.\n * @return {?}\n */\nafterDismissed(): Observable<void> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the snack bar has opened and appeared.\n * @return {?}\n */\nafterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n/**\n * Gets an observable that is notified when the snack bar action is called.\n * @return {?}\n */\nonAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n\nfunction MatSnackBarRef_tsickle_Closure_declarations() {\n/**\n * The instance of the component making up the content of the snack bar.\n * @type {?}\n */\nMatSnackBarRef.prototype.instance;\n/**\n * The instance of the component making up the content of the snack bar.\n * \\@docs-private\n * @type {?}\n */\nMatSnackBarRef.prototype.containerInstance;\n/**\n * Subject for notifying the user that the snack bar has closed.\n * @type {?}\n */\nMatSnackBarRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the snack bar has opened and appeared.\n * @type {?}\n */\nMatSnackBarRef.prototype._afterOpened;\n/**\n * Subject for notifying the user that the snack bar action was called.\n * @type {?}\n */\nMatSnackBarRef.prototype._onAction;\n/**\n * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n * dismissed before the duration passes.\n * @type {?}\n */\nMatSnackBarRef.prototype._durationTimeoutId;\n/** @type {?} */\nMatSnackBarRef.prototype._overlayRef;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\nexport const /** @type {?} */ MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig {\n/**\n * The politeness level for the MatAriaLiveAnnouncer announcement.\n */\npoliteness?: AriaLivePoliteness = 'assertive';\n/**\n * Message to be announced by the MatAriaLiveAnnouncer\n */\nannouncementMessage?: string = '';\n/**\n * The view container to place the overlay for the snack bar into.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n */\nduration?: number = 0;\n/**\n * Extra CSS classes to be added to the snack bar container.\n */\nextraClasses?: string[];\n/**\n * Text layout direction for the snack bar.\n */\ndirection?: Direction = 'ltr';\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * The horizontal position to place the snack bar.\n */\nhorizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n/**\n * The vertical position to place the snack bar.\n */\nverticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n\nfunction MatSnackBarConfig_tsickle_Closure_declarations() {\n/**\n * The politeness level for the MatAriaLiveAnnouncer announcement.\n * @type {?}\n */\nMatSnackBarConfig.prototype.politeness;\n/**\n * Message to be announced by the MatAriaLiveAnnouncer\n * @type {?}\n */\nMatSnackBarConfig.prototype.announcementMessage;\n/**\n * The view container to place the overlay for the snack bar into.\n * @type {?}\n */\nMatSnackBarConfig.prototype.viewContainerRef;\n/**\n * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n * @type {?}\n */\nMatSnackBarConfig.prototype.duration;\n/**\n * Extra CSS classes to be added to the snack bar container.\n * @type {?}\n */\nMatSnackBarConfig.prototype.extraClasses;\n/**\n * Text layout direction for the snack bar.\n * @type {?}\n */\nMatSnackBarConfig.prototype.direction;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMatSnackBarConfig.prototype.data;\n/**\n * The horizontal position to place the snack bar.\n * @type {?}\n */\nMatSnackBarConfig.prototype.horizontalPosition;\n/**\n * The vertical position to place the snack bar.\n * @type {?}\n */\nMatSnackBarConfig.prototype.verticalPosition;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nexport class SimpleSnackBar {\n/**\n * Data that was injected into the snack bar.\n */\ndata: { message: string, action: string };\n/**\n * @param {?} snackBarRef\n * @param {?} data\n */\nconstructor(\npublic snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n     data: any) {\n    this.data = data;\n  }\n/**\n * Performs the action on the snack bar.\n * @return {?}\n */\naction(): void {\n    this.snackBarRef.closeWithAction();\n  }\n/**\n * If the action button should be shown.\n * @return {?}\n */\nget hasAction(): boolean {\n    return !!this.data.action;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatSnackBarRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA, ] }, ]},\n];\n}\n\nfunction SimpleSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nSimpleSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSimpleSnackBar.ctorParameters;\n/**\n * Data that was injected into the snack bar.\n * @type {?}\n */\nSimpleSnackBar.prototype.data;\n/** @type {?} */\nSimpleSnackBar.prototype.snackBarRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  NgZone,\n  OnDestroy,\n  Renderer2,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  transition,\n  animate,\n  AnimationEvent,\n} from '@angular/animations';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\nexport type SnackBarState = 'visible' | 'hidden' | 'void';\n\n// TODO(jelbourn): we can't use constants from animation.ts here because you can't use\n// a text interpolation in anything that is analyzed statically with ngc (for AoT compile).\nexport const /** @type {?} */ SHOW_ANIMATION = '225ms cubic-bezier(0.4,0.0,1,1)';\nexport const /** @type {?} */ HIDE_ANIMATION = '195ms cubic-bezier(0.0,0.0,0.2,1)';\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nexport class MatSnackBarContainer extends BasePortalHost implements OnDestroy {\n/**\n * Whether the component has been destroyed.\n */\nprivate _destroyed = false;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * Subject for notifying that the snack bar has exited from view.\n */\n_onExit: Subject<any> = new Subject();\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n */\n_onEnter: Subject<any> = new Subject();\n/**\n * The state of the snack bar animations.\n */\nprivate _animationState: SnackBarState;\n/**\n * The snack bar configuration.\n */\nsnackBarConfig: MatSnackBarConfig;\n/**\n * @param {?} _ngZone\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _ngZone: NgZone,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Gets the current animation state both combining one of the possibilities from\n * SnackBarState and the vertical location.\n * @return {?}\n */\ngetAnimationState(): string {\n    return `${this._animationState}-${this.snackBarConfig.verticalPosition}`;\n  }\n/**\n * Attach a component portal as content to this snack bar container.\n * @template T\n * @param {?} portal\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n\n    if (this.snackBarConfig.extraClasses) {\n      // Not the most efficient way of adding classes, but the renderer doesn't allow us\n      // to pass in an array or a space-separated list.\n      for (let /** @type {?} */ cssClass of this.snackBarConfig.extraClasses) {\n        this._renderer.addClass(this._elementRef.nativeElement, cssClass);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      this._renderer.addClass(this._elementRef.nativeElement, 'mat-snack-bar-top');\n    }\n\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a template portal as content to this snack bar container.\n * @return {?}\n */\nattachTemplatePortal(): EmbeddedViewRef<any> {\n    throw Error('Not yet implemented');\n  }\n/**\n * Handle end of animations, updating the state of the snackbar.\n * @param {?} event\n * @return {?}\n */\nonAnimationEnd(event: AnimationEvent) {\n    if (event.toState === 'void' || event.toState.startsWith('hidden')) {\n      this._completeExit();\n    }\n\n    if (event.toState.startsWith('visible')) {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const /** @type {?} */ onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n/**\n * Begin animation of snack bar entrance into view.\n * @return {?}\n */\nenter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * Begin animation of the snack bar exiting from view.\n * @return {?}\n */\nexit(): Observable<void> {\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n/**\n * Makes sure the exit callbacks have been invoked when the element is destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n/**\n * Waits for the zone to settle before removing the element. Helps prevent\n * errors where we end up removing an element which is in the middle of an animation.\n * @return {?}\n */\nprivate _completeExit() {\n    first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'role': 'alert',\n    'class': 'mat-snack-bar-container',\n    '[@state]': 'getAnimationState()',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n  animations: [\n    trigger('state', [\n      // Animation from top.\n      state('visible-top', style({transform: 'translateY(0%)'})),\n      state('hidden-top', style({transform: 'translateY(-100%)'})),\n      transition('visible-top => hidden-top', animate(HIDE_ANIMATION)),\n      transition('void => visible-top', animate(SHOW_ANIMATION)),\n      // Animation from bottom.\n      state('visible-bottom', style({transform: 'translateY(0%)'})),\n      state('hidden-bottom', style({transform: 'translateY(100%)'})),\n      transition('visible-bottom => hidden-bottom', animate(HIDE_ANIMATION)),\n      transition('void => visible-bottom',\n        animate(SHOW_ANIMATION)),\n    ])\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MatSnackBarContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSnackBarContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSnackBarContainer.ctorParameters;\n/** @type {?} */\nMatSnackBarContainer.propDecorators;\n/**\n * Whether the component has been destroyed.\n * @type {?}\n */\nMatSnackBarContainer.prototype._destroyed;\n/**\n * The portal host inside of this container into which the snack bar content will be loaded.\n * @type {?}\n */\nMatSnackBarContainer.prototype._portalHost;\n/**\n * Subject for notifying that the snack bar has exited from view.\n * @type {?}\n */\nMatSnackBarContainer.prototype._onExit;\n/**\n * Subject for notifying that the snack bar has finished entering the view.\n * @type {?}\n */\nMatSnackBarContainer.prototype._onEnter;\n/**\n * The state of the snack bar animations.\n * @type {?}\n */\nMatSnackBarContainer.prototype._animationState;\n/**\n * The snack bar configuration.\n * @type {?}\n */\nMatSnackBarContainer.prototype.snackBarConfig;\n/** @type {?} */\nMatSnackBarContainer.prototype._ngZone;\n/** @type {?} */\nMatSnackBarContainer.prototype._renderer;\n/** @type {?} */\nMatSnackBarContainer.prototype._elementRef;\n/** @type {?} */\nMatSnackBarContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector} from '@angular/cdk/portal';\nimport {ComponentRef, Injectable, Injector, Optional, SkipSelf} from '@angular/core';\nimport {extendObject} from '@angular/material/core';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarRef} from './snack-bar-ref';\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nexport class MatSnackBar {\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n */\nprivate _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n/**\n * Reference to the currently opened snackbar at *any* level.\n * @return {?}\n */\nget _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const /** @type {?} */ parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n/**\n * @param {?} _overlay\n * @param {?} _live\n * @param {?} _injector\n * @param {?} _parentSnackBar\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _live: LiveAnnouncer,\nprivate _injector: Injector,\nprivate _parentSnackBar: MatSnackBar) {}\n/**\n * Creates and dispatches a snack bar with a custom component for the content, removing any\n * currently opened snack bars.\n * \n * @template T\n * @param {?} component Component to be instantiated.\n * @param {?=} config Extra configuration for the snack bar.\n * @return {?}\n */\nopenFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig): MatSnackBarRef<T> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n    const /** @type {?} */ snackBarRef = this._attach(component, _config);\n\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (_config.duration && _config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter( /** @type {?} */(( /** @type {?} */((_config)).duration))));\n    }\n\n    if (_config.announcementMessage) {\n      this._live.announce(_config.announcementMessage, _config.politeness);\n    }\n\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n/**\n * Opens a snackbar with a message and an optional action.\n * @param {?} message The message to show in the snackbar.\n * @param {?=} action The label for the snackbar action.\n * @param {?=} config Additional configuration options for the snackbar.\n * @return {?}\n */\nopen(message: string, action = '', config?: MatSnackBarConfig): MatSnackBarRef<SimpleSnackBar> {\n    const /** @type {?} */ _config = _applyConfigDefaults(config);\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n    _config.announcementMessage = message;\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n/**\n * Dismisses the currently-visible snack bar.\n * @return {?}\n */\ndismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n/**\n * Attaches the snack bar container component to the overlay.\n * @param {?} overlayRef\n * @param {?} config\n * @return {?}\n */\nprivate _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n    const /** @type {?} */ containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef);\n    const /** @type {?} */ containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n/**\n * Places a new component as the content of the snack bar container.\n * @template T\n * @param {?} component\n * @param {?} config\n * @return {?}\n */\nprivate _attach<T>(component: ComponentType<T>, config: MatSnackBarConfig): MatSnackBarRef<T> {\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ container = this._attachSnackBarContainer(overlayRef, config);\n    const /** @type {?} */ snackBarRef = new MatSnackBarRef<T>(container, overlayRef);\n    const /** @type {?} */ injector = this._createInjector(config, snackBarRef);\n    const /** @type {?} */ portal = new ComponentPortal(component, undefined, injector);\n    const /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n\n    // We can't pass this via the injector, because the injector is created earlier.\n    snackBarRef.instance = contentRef.instance;\n\n    return snackBarRef;\n  }\n/**\n * Creates a new overlay and places it in the correct location.\n * @param {?} config The user-specified snack bar config.\n * @return {?}\n */\nprivate _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const /** @type {?} */ state = new OverlayConfig();\n    state.direction = config.direction;\n\n    let /** @type {?} */ positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const /** @type {?} */ isRtl = config.direction === 'rtl';\n    const /** @type {?} */ isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const /** @type {?} */ isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    state.positionStrategy = positionStrategy;\n    return this._overlay.create(state);\n  }\n/**\n * Creates an injector to be used inside of a snack bar component.\n * @template T\n * @param {?} config Config that was used to create the snack bar.\n * @param {?} snackBarRef Reference to the snack bar.\n * @return {?}\n */\nprivate _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatSnackBarRef, snackBarRef);\n    injectionTokens.set(MAT_SNACK_BAR_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: LiveAnnouncer, },\n{type: Injector, },\n{type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MatSnackBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSnackBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSnackBar.ctorParameters;\n/**\n * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n * If there is a parent snack-bar service, all operations should delegate to that parent\n * via `_openedSnackBarRef`.\n * @type {?}\n */\nMatSnackBar.prototype._snackBarRefAtThisLevel;\n/** @type {?} */\nMatSnackBar.prototype._overlay;\n/** @type {?} */\nMatSnackBar.prototype._live;\n/** @type {?} */\nMatSnackBar.prototype._injector;\n/** @type {?} */\nMatSnackBar.prototype._parentSnackBar;\n}\n\n/**\n * Applies default options to the snackbar config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config?: MatSnackBarConfig): MatSnackBarConfig {\n  return extendObject(new MatSnackBarConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {LIVE_ANNOUNCER_PROVIDER} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatSnackBar} from './snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {SimpleSnackBar} from './simple-snack-bar';\nexport class MatSnackBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n  providers: [MatSnackBar, LIVE_ANNOUNCER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSnackBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSnackBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSnackBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSnackBarModule,MatSnackBar,SnackBarState,SHOW_ANIMATION,HIDE_ANIMATION,MatSnackBarContainer,MAT_SNACK_BAR_DATA,MatSnackBarHorizontalPosition,MatSnackBarVerticalPosition,MatSnackBarConfig,MatSnackBarRef,SimpleSnackBar} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SortDirection} from './sort-direction';\nimport {getSortDuplicateSortableIdError, getSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MatSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nexport class MatSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MatSortable>();\n/**\n * The id of the most recently sorted MatSortable.\n */\nactive: string;\n/**\n * The direction to set when an MatSortable is initially sorted.\n * May be overriden by the MatSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MatSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MatSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nreadonly sortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n * collection of MatSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n * collection of contained MatSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['matSortActive', ] },],\n'start': [{ type: Input, args: ['matSortStart', ] },],\n'direction': [{ type: Input, args: ['matSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'sortChange': [{ type: Output, args: ['matSortChange', ] },],\n};\n}\n\nfunction MatSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSort.ctorParameters;\n/** @type {?} */\nMatSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMatSort.prototype.sortables;\n/**\n * The id of the most recently sorted MatSortable.\n * @type {?}\n */\nMatSort.prototype.active;\n/**\n * The direction to set when an MatSortable is initially sorted.\n * May be overriden by the MatSortable's sort start.\n * @type {?}\n */\nMatSort.prototype.start;\n/**\n * The sort direction of the currently active MatSortable.\n * @type {?}\n */\nMatSort.prototype.direction;\n/** @type {?} */\nMatSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMatSort.prototype.sortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MatSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMatSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMatSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMatSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION =\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MatSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MatSortHeader implements MatSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MatSort for this MatSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MatSort for this MatSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MatSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _intl.changes).subscribe(() => {\n      changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n/**\n * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('indicator', [\n      state('asc', style({transform: 'translateY(0px)'})),\n      // 10px is the height of the sort indicator, minus the width of the pointers\n      state('desc', style({transform: 'translateY(10px)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('leftPointer', [\n      state('asc', style({transform: 'rotate(-45deg)'})),\n      state('desc', style({transform: 'rotate(45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('rightPointer', [\n      state('asc', style({transform: 'rotate(45deg)'})),\n      state('desc', style({transform: 'rotate(-45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MatSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['mat-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MatSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSortHeader.ctorParameters;\n/** @type {?} */\nMatSortHeader.propDecorators;\n/** @type {?} */\nMatSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMatSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMatSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MatSort for this MatSortable.\n * @type {?}\n */\nMatSortHeader.prototype.start;\n/** @type {?} */\nMatSortHeader.prototype._disableClear;\n/** @type {?} */\nMatSortHeader.prototype._intl;\n/** @type {?} */\nMatSortHeader.prototype._sort;\n/** @type {?} */\nMatSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\nexport class MatSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MatSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSortModule,SortDirection,MatSortHeader,MatSortHeaderIntl,MatSortable,Sort,MatSort} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, TemplateRef} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatStepLabel = CdkStepLabel;\nexport class MatStepLabel extends _MatStepLabel {\n/**\n * @param {?} template\n */\nconstructor(template: TemplateRef<any>) {\n    super(template);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matStepLabel]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TemplateRef, },\n];\n}\n\nfunction MatStepLabel_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepLabel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepLabel.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {MatStepLabel} from './step-label';\nexport class MatStepHeader {\n/**\n * Icon for the given step.\n */\nicon: string;\n/**\n * Label of the given step.\n */\nlabel: MatStepLabel | string;\n/**\n * Index of the given step.\n * @return {?}\n */\nget index() { return this._index; }\n/**\n * @param {?} value\n * @return {?}\n */\nset index(value: any) {\n    this._index = coerceNumberProperty(value);\n  }\nprivate _index: number;\n/**\n * Whether the given step is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: any) {\n    this._selected = coerceBooleanProperty(value);\n  }\nprivate _selected: boolean;\n/**\n * Whether the given step label is active.\n * @return {?}\n */\nget active() { return this._active; }\n/**\n * @param {?} value\n * @return {?}\n */\nset active(value: any) {\n    this._active = coerceBooleanProperty(value);\n  }\nprivate _active: boolean;\n/**\n * Whether the given step is optional.\n * @return {?}\n */\nget optional() { return this._optional; }\n/**\n * @param {?} value\n * @return {?}\n */\nset optional(value: any) {\n    this._optional = coerceBooleanProperty(value);\n  }\nprivate _optional: boolean;\n/**\n * Returns string label of given step if it is a text label.\n * @return {?}\n */\n_stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n/**\n * Returns MatStepLabel if the label of given step is a template label.\n * @return {?}\n */\n_templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'icon': [{ type: Input },],\n'label': [{ type: Input },],\n'index': [{ type: Input },],\n'selected': [{ type: Input },],\n'active': [{ type: Input },],\n'optional': [{ type: Input },],\n};\n}\n\nfunction MatStepHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepHeader.ctorParameters;\n/** @type {?} */\nMatStepHeader.propDecorators;\n/**\n * Icon for the given step.\n * @type {?}\n */\nMatStepHeader.prototype.icon;\n/**\n * Label of the given step.\n * @type {?}\n */\nMatStepHeader.prototype.label;\n/** @type {?} */\nMatStepHeader.prototype._index;\n/** @type {?} */\nMatStepHeader.prototype._selected;\n/** @type {?} */\nMatStepHeader.prototype._active;\n/** @type {?} */\nMatStepHeader.prototype._optional;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {CdkStep, CdkStepper} from '@angular/cdk/stepper';\nimport {\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Optional,\n  QueryList,\n  SkipSelf,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MAT_ERROR_GLOBAL_OPTIONS,\n} from '@angular/material/core';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\n/**\n * Workaround for https://github.com/angular/angular/issues/17849\n */\nexport const _MatStep = CdkStep;\nexport const /** @type {?} */ _MatStepper = CdkStepper;\nexport class MatStep extends _MatStep implements ErrorOptions {\n/**\n * Content for step label given by <ng-template matStepLabel>.\n */\nstepLabel: MatStepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n */\nprivate _originalErrorStateMatcher: ErrorStateMatcher;\n/**\n * @param {?} stepper\n * @param {?} errorOptions\n */\nconstructor( stepper: MatStepper,\n                \n                  errorOptions: ErrorOptions) {\n    super(stepper);\n    if (errorOptions && errorOptions.errorStateMatcher) {\n      this._originalErrorStateMatcher = errorOptions.errorStateMatcher;\n    } else {\n      this._originalErrorStateMatcher = defaultErrorStateMatcher;\n    }\n  }\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n */\nerrorStateMatcher = (control: FormControl, form: FormGroupDirective | NgForm) => {\n    let originalErrorState = this._originalErrorStateMatcher(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    let customErrorState =  control.invalid && this.interacted;\n\n    return originalErrorState || customErrorState;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: MAT_ERROR_GLOBAL_OPTIONS, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatStepper, decorators: [{ type: Inject, args: [forwardRef(() => MatStepper), ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'stepLabel': [{ type: ContentChild, args: [MatStepLabel, ] },],\n};\n}\n\nfunction MatStep_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStep.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStep.ctorParameters;\n/** @type {?} */\nMatStep.propDecorators;\n/**\n * Content for step label given by <ng-template matStepLabel>.\n * @type {?}\n */\nMatStep.prototype.stepLabel;\n/**\n * Original ErrorStateMatcher that checks the validity of form control.\n * @type {?}\n */\nMatStep.prototype._originalErrorStateMatcher;\n/**\n * Custom error state matcher that additionally checks for validity of interacted form.\n * @type {?}\n */\nMatStep.prototype.errorStateMatcher;\n}\n\nexport class MatStepper extends _MatStepper {\n/**\n * The list of step headers of the steps in the stepper.\n */\n_stepHeader: QueryList<ElementRef>;\n/**\n * Steps that the stepper holds.\n */\n_steps: QueryList<MatStep>;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matStepper]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_stepHeader': [{ type: ViewChildren, args: [MatStepHeader, {read: ElementRef}, ] },],\n'_steps': [{ type: ContentChildren, args: [MatStep, ] },],\n};\n}\n\nfunction MatStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatStepper.ctorParameters;\n/** @type {?} */\nMatStepper.propDecorators;\n/**\n * The list of step headers of the steps in the stepper.\n * @type {?}\n */\nMatStepper.prototype._stepHeader;\n/**\n * Steps that the stepper holds.\n * @type {?}\n */\nMatStepper.prototype._steps;\n}\n\nexport class MatHorizontalStepper extends MatStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n      state('current', style({transform: 'translate3d(0%, 0, 0)', visibility: 'visible'})),\n      state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n      transition('* => *',\n          animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatHorizontalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHorizontalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHorizontalStepper.ctorParameters;\n}\n\nexport class MatVerticalStepper extends MatStepper { static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'role': 'tablist',\n  },\n  animations: [\n    trigger('stepTransition', [\n      state('previous', style({height: '0px', visibility: 'hidden'})),\n      state('next', style({height: '0px', visibility: 'hidden'})),\n      state('current', style({height: '*', visibility: 'visible'})),\n      transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n    ])\n  ],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatVerticalStepper_tsickle_Closure_declarations() {\n/** @type {?} */\nMatVerticalStepper.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatVerticalStepper.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {merge} from 'rxjs/observable/merge';\nimport {first} from 'rxjs/operator/first';\nimport {startWith} from 'rxjs/operator/startWith';\nimport {takeUntil} from 'rxjs/operator/takeUntil';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @param {?} position\n * @return {?}\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n/**\n * Drawer toggle promise result.\n * @deprecated\n */\nexport class MatDrawerToggleResult {\n/**\n * @param {?} type\n * @param {?} animationFinished\n */\nconstructor(public type: 'open' | 'close',\npublic animationFinished: boolean) {}\n}\n\nfunction MatDrawerToggleResult_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDrawerToggleResult.prototype.type;\n/** @type {?} */\nMatDrawerToggleResult.prototype.animationFinished;\n}\n\nexport class MatDrawerContent implements AfterContentInit {\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n * drawer is open. We use margin rather than transform even for push mode because transform breaks\n * fixed position elements inside of the transformed element.\n */\n_margins: {left: number, right: number} = {left: 0, right: 0};\n/**\n * @param {?} _changeDetectorRef\n * @param {?} _container\n */\nconstructor(\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _container: MatDrawerContainer) {\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._container._contentMargins.subscribe(margins => {\n      this._margins = margins;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.marginLeft.px]': '_margins.left',\n    '[style.marginRight.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MatDrawerContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatDrawerContainer), ] }, ]},\n];\n}\n\nfunction MatDrawerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDrawerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDrawerContent.ctorParameters;\n/**\n * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n * drawer is open. We use margin rather than transform even for push mode because transform breaks\n * fixed position elements inside of the transformed element.\n * @type {?}\n */\nMatDrawerContent.prototype._margins;\n/** @type {?} */\nMatDrawerContent.prototype._changeDetectorRef;\n/** @type {?} */\nMatDrawerContent.prototype._container;\n}\n\n/**\n * <mat-drawer> component.\n * \n * This component corresponds to a drawer that can be opened on the drawer container.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MatDrawer implements AfterContentInit, OnDestroy {\nprivate _focusTrap: FocusTrap;\nprivate _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n */\nprivate _enableAnimations = false;\n/**\n * The side that the drawer is attached to.\n * @return {?}\n */\nget position() { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value) {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onAlignChanged.emit();\n      this.onPositionChanged.emit();\n    }\n  }\nprivate _position: 'start' | 'end' = 'start';\n/**\n * @deprecated\n * @return {?}\n */\nget align() { return this.position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset align(value) { this.position = value; }\n/**\n * Mode of the drawer; one of 'over', 'push' or 'side'.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} value\n * @return {?}\n */\nset mode(value) {\n    this._mode = value;\n    this._modeChanged.next();\n  }\nprivate _mode: 'over' | 'push' | 'side' = 'over';\n/**\n * Whether the drawer can be closed with the escape key or by clicking on the backdrop.\n * @return {?}\n */\nget disableClose(): boolean { return this._disableClose; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\nprivate _disableClose: boolean = false;\n/**\n * Whether the drawer is opened.\n */\nprivate _opened: boolean = false;\n/**\n * Emits whenever the drawer has started animating.\n */\n_animationStarted = new EventEmitter<void>();\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n */\n_isAnimating = false;\n/**\n * Current state of the sidenav animation.\n */\n_animationState: 'open-instant' | 'open' | 'void' = 'void';\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n */\nprivate _currentTogglePromise: Promise<MatDrawerToggleResult> | null;\n/**\n * Event emitted when the drawer is fully opened.\n */\nonOpen = new EventEmitter<MatDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer is fully closed.\n */\nonClose = new EventEmitter<MatDrawerToggleResult | void>();\n/**\n * Event emitted when the drawer's position changes.\n */\nonPositionChanged = new EventEmitter<void>();\n/**\n * @deprecated\n */\nonAlignChanged = new EventEmitter<void>();\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\n * to know when to when the mode changes so it can adapt the margins on the content.\n */\n_modeChanged = new Subject();\n/**\n * @return {?}\n */\nget isFocusTrapEnabled() {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _doc\n */\nconstructor(private _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _doc: any) {\n    this.onOpen.subscribe(() => {\n      if (this._doc) {\n        this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n      }\n\n      if (this.isFocusTrapEnabled && this._focusTrap) {\n        this._focusTrap.focusInitialElementWhenReady();\n      }\n    });\n\n    this.onClose.subscribe(() => this._restoreFocus());\n  }\n/**\n * If focus is currently inside the drawer, restores it to where it was before the drawer\n * opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    let /** @type {?} */ activeEl = this._doc && this._doc.activeElement;\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._elementFocusedBeforeDrawerWasOpened.focus();\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this.isFocusTrapEnabled;\n    this._enableAnimations = true;\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Whether the drawer is opened. We overload this because we trigger an event when it\n * starts or end.\n * @return {?}\n */\nget opened(): boolean { return this._opened; }\n/**\n * @param {?} v\n * @return {?}\n */\nset opened(v: boolean) {\n    this.toggle(coerceBooleanProperty(v));\n  }\n/**\n * Open the drawer.\n * @return {?}\n */\nopen(): Promise<MatDrawerToggleResult> {\n    return this.toggle(true);\n  }\n/**\n * Close the drawer.\n * @return {?}\n */\nclose(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n/**\n * Toggle this drawer.\n * @param {?=} isOpen Whether the drawer should be open.\n * @return {?}\n */\ntoggle(isOpen: boolean = !this.opened): Promise<MatDrawerToggleResult> {\n    if (!this._isAnimating) {\n      this._opened = isOpen;\n\n      if (isOpen) {\n        this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      } else {\n        this._animationState = 'void';\n      }\n\n      this._currentTogglePromise = new Promise(resolve => {\n        first.call(isOpen ? this.onOpen : this.onClose).subscribe(resolve);\n      });\n\n      if (this._focusTrap) {\n        this._focusTrap.enabled = this.isFocusTrapEnabled;\n      }\n    }\n\n    // TODO(crisbeto): This promise is here for backwards-compatibility.\n    // It should be removed next time we do breaking changes in the drawer.\n    return /** @type {?} */(( this._currentTogglePromise));\n  }\n/**\n * Handles the keyboard events.\n * \\@docs-private\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === ESCAPE && !this.disableClose) {\n      this.close();\n      event.stopPropagation();\n    }\n  }\n/**\n * @return {?}\n */\n_onAnimationStart() {\n    this._isAnimating = true;\n    this._animationStarted.emit();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if (toState === 'open' && fromState === 'void') {\n      this.onOpen.emit(new MatDrawerToggleResult('open', true));\n    } else if (toState === 'void' && fromState === 'open') {\n      this.onClose.emit(new MatDrawerToggleResult('close', true));\n    }\n\n    // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n    // the end if animations are disabled. Make this call async to ensure that it still fires\n    // at the appropriate time.\n    Promise.resolve().then(() => {\n      this._isAnimating = false;\n      this._currentTogglePromise = null;\n    });\n  }\n/**\n * @return {?}\n */\nget _width() {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n          animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input },],\n'align': [{ type: Input },],\n'mode': [{ type: Input },],\n'disableClose': [{ type: Input },],\n'onOpen': [{ type: Output, args: ['open', ] },],\n'onClose': [{ type: Output, args: ['close', ] },],\n'onPositionChanged': [{ type: Output, args: ['positionChanged', ] },],\n'onAlignChanged': [{ type: Output, args: ['align-changed', ] },],\n'opened': [{ type: Input },],\n};\n}\n\nfunction MatDrawer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDrawer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDrawer.ctorParameters;\n/** @type {?} */\nMatDrawer.propDecorators;\n/** @type {?} */\nMatDrawer.prototype._focusTrap;\n/** @type {?} */\nMatDrawer.prototype._elementFocusedBeforeDrawerWasOpened;\n/**\n * Whether the drawer is initialized. Used for disabling the initial animation.\n * @type {?}\n */\nMatDrawer.prototype._enableAnimations;\n/** @type {?} */\nMatDrawer.prototype._position;\n/** @type {?} */\nMatDrawer.prototype._mode;\n/** @type {?} */\nMatDrawer.prototype._disableClose;\n/**\n * Whether the drawer is opened.\n * @type {?}\n */\nMatDrawer.prototype._opened;\n/**\n * Emits whenever the drawer has started animating.\n * @type {?}\n */\nMatDrawer.prototype._animationStarted;\n/**\n * Whether the drawer is animating. Used to prevent overlapping animations.\n * @type {?}\n */\nMatDrawer.prototype._isAnimating;\n/**\n * Current state of the sidenav animation.\n * @type {?}\n */\nMatDrawer.prototype._animationState;\n/**\n * Promise that resolves when the open/close animation completes. It is here for backwards\n * compatibility and should be removed next time we do drawer breaking changes.\n * @deprecated\n * @type {?}\n */\nMatDrawer.prototype._currentTogglePromise;\n/**\n * Event emitted when the drawer is fully opened.\n * @type {?}\n */\nMatDrawer.prototype.onOpen;\n/**\n * Event emitted when the drawer is fully closed.\n * @type {?}\n */\nMatDrawer.prototype.onClose;\n/**\n * Event emitted when the drawer's position changes.\n * @type {?}\n */\nMatDrawer.prototype.onPositionChanged;\n/**\n * @deprecated\n * @type {?}\n */\nMatDrawer.prototype.onAlignChanged;\n/**\n * An observable that emits when the drawer mode changes. This is used by the drawer container to\n * to know when to when the mode changes so it can adapt the margins on the content.\n * @type {?}\n */\nMatDrawer.prototype._modeChanged;\n/** @type {?} */\nMatDrawer.prototype._elementRef;\n/** @type {?} */\nMatDrawer.prototype._focusTrapFactory;\n/** @type {?} */\nMatDrawer.prototype._doc;\n}\n\n/**\n * <mat-drawer-container> component.\n * \n * This is the parent component to one or two <mat-drawer>s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\nexport class MatDrawerContainer implements AfterContentInit, OnDestroy {\n   _drawers: QueryList<MatDrawer>;\n\n   _content: MatDrawerContent;\n/**\n * The drawer child with the `start` position.\n * @return {?}\n */\nget start() { return this._start; }\n/**\n * The drawer child with the `end` position.\n * @return {?}\n */\nget end() { return this._end; }\n/**\n * Event emitted when the drawer backdrop is clicked.\n */\nbackdropClick = new EventEmitter<void>();\n/**\n * The drawer at the start/end position, independent of direction.\n */\nprivate _start: MatDrawer | null;\nprivate _end: MatDrawer | null;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n */\nprivate _left: MatDrawer | null;\nprivate _right: MatDrawer | null;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n\n  _contentMargins = new Subject<{left: number, right: number}>();\n/**\n * @param {?} _dir\n * @param {?} _element\n * @param {?} _renderer\n * @param {?} _ngZone\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _element: ElementRef,\nprivate _renderer: Renderer2,\nprivate _ngZone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    // If a `Dir` directive exists up the tree, listen direction changes and update the left/right\n    // properties to point to the proper start/end.\n    if (_dir != null) {\n      this._dirChangeSubscription = _dir.change.subscribe(() => this._validateDrawers());\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    startWith.call(this._drawers.changes, null).subscribe(() => {\n      this._validateDrawers();\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * Calls `open` of both start and end drawers\n * @return {?}\n */\nopen(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n/**\n * Calls `close` of both start and end drawers\n * @return {?}\n */\nclose(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n/**\n * Subscribes to drawer events in order to set a class on the main container element when the\n * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n * is properly hidden.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerToggle(drawer: MatDrawer): void {\n    takeUntil.call(drawer._animationStarted, this._drawers.changes).subscribe(() => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-transition');\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      takeUntil.call(merge(drawer.onOpen, drawer.onClose), this._drawers.changes).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n/**\n * Subscribes to drawer onPositionChanged event in order to re-validate drawers when the position\n * changes.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    takeUntil.call(drawer.onPositionChanged, this._drawers.changes).subscribe(() => {\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n/**\n * Subscribes to changes in drawer mode so we can run change detection.\n * @param {?} drawer\n * @return {?}\n */\nprivate _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      takeUntil.call(drawer._modeChanged, this._drawers.changes).subscribe(() => {\n        this._updateContentMargins();\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n/**\n * Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element.\n * @param {?} isAdd\n * @return {?}\n */\nprivate _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-drawer-opened');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-drawer-opened');\n    }\n  }\n/**\n * Validate the state of the drawer children components.\n * @return {?}\n */\nprivate _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir == null || this._dir.value == 'ltr') {\n      this._left = this._start;\n      this._right = this._end;\n    } else {\n      this._left = this._end;\n      this._right = this._start;\n    }\n  }\n/**\n * @return {?}\n */\n_onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n/**\n * @return {?}\n */\n_closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && drawer.mode !== 'side')\n      .forEach(drawer => /** @type {?} */(( drawer)).close());\n  }\n/**\n * @return {?}\n */\n_isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && /** @type {?} */(( this._start)).mode != 'side')\n        || (this._isDrawerOpen(this._end) && /** @type {?} */(( this._end)).mode != 'side');\n  }\n/**\n * @param {?} drawer\n * @return {?}\n */\nprivate _isDrawerOpen(drawer: MatDrawer | null): boolean {\n    return drawer != null && drawer.opened;\n  }\n/**\n * Recalculates and updates the inline styles for the content. Note that this should be used\n * sparingly, because it causes a reflow.\n * @return {?}\n */\nprivate _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let /** @type {?} */ left = 0;\n    let /** @type {?} */ right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let /** @type {?} */ width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let /** @type {?} */ width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    this._contentMargins.next({left, right});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  templateUrl: 'drawer-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MatDrawer, ] },],\n'_content': [{ type: ContentChild, args: [MatDrawerContent, ] },],\n'backdropClick': [{ type: Output },],\n};\n}\n\nfunction MatDrawerContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDrawerContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDrawerContainer.ctorParameters;\n/** @type {?} */\nMatDrawerContainer.propDecorators;\n/** @type {?} */\nMatDrawerContainer.prototype._drawers;\n/** @type {?} */\nMatDrawerContainer.prototype._content;\n/**\n * Event emitted when the drawer backdrop is clicked.\n * @type {?}\n */\nMatDrawerContainer.prototype.backdropClick;\n/**\n * The drawer at the start/end position, independent of direction.\n * @type {?}\n */\nMatDrawerContainer.prototype._start;\n/** @type {?} */\nMatDrawerContainer.prototype._end;\n/**\n * The drawer at the left/right. When direction changes, these will change as well.\n * They're used as aliases for the above to set the left/right style properly.\n * In LTR, _left == _start and _right == _end.\n * In RTL, _left == _end and _right == _start.\n * @type {?}\n */\nMatDrawerContainer.prototype._left;\n/** @type {?} */\nMatDrawerContainer.prototype._right;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMatDrawerContainer.prototype._dirChangeSubscription;\n/** @type {?} */\nMatDrawerContainer.prototype._contentMargins;\n/** @type {?} */\nMatDrawerContainer.prototype._dir;\n/** @type {?} */\nMatDrawerContainer.prototype._element;\n/** @type {?} */\nMatDrawerContainer.prototype._renderer;\n/** @type {?} */\nMatDrawerContainer.prototype._ngZone;\n/** @type {?} */\nMatDrawerContainer.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ContentChild,\n  ContentChildren, forwardRef, Inject, Input,\n  ViewEncapsulation\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nexport class MatSidenavContent extends MatDrawerContent {\n/**\n * @param {?} changeDetectorRef\n * @param {?} container\n */\nconstructor(\n      changeDetectorRef: ChangeDetectorRef,\n       container: MatSidenavContainer) {\n    super(changeDetectorRef, container);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.marginLeft.px]': '_margins.left',\n    '[style.marginRight.px]': '_margins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: MatSidenavContainer, decorators: [{ type: Inject, args: [forwardRef(() => MatSidenavContainer), ] }, ]},\n];\n}\n\nfunction MatSidenavContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSidenavContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSidenavContent.ctorParameters;\n}\n\nexport class MatSidenav extends MatDrawer {\n/**\n * Whether the sidenav is fixed in the viewport.\n * @return {?}\n */\nget fixedInViewport() { return this._fixedInViewport; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\nprivate _fixedInViewport = false;\n/**\n * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n * mode.\n * @return {?}\n */\nget fixedTopGap() { return this._fixedTopGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\nprivate _fixedTopGap = 0;\n/**\n * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n * fixed mode.\n * @return {?}\n */\nget fixedBottomGap() { return this._fixedBottomGap; }\n/**\n * @param {?} value\n * @return {?}\n */\nset fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\nprivate _fixedBottomGap = 0;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  template: '<ng-content></ng-content>',\n  animations: [\n    trigger('transform', [\n      state('open, open-instant', style({\n        transform: 'translate3d(0, 0, 0)',\n        visibility: 'visible',\n      })),\n      state('void', style({\n        visibility: 'hidden',\n      })),\n      transition('void => open-instant', animate('0ms')),\n      transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n    ])\n  ],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_onAnimationStart()',\n    '(@transform.done)': '_onAnimationEnd($event)',\n    '(keydown)': 'handleKeydown($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'fixedInViewport': [{ type: Input },],\n'fixedTopGap': [{ type: Input },],\n'fixedBottomGap': [{ type: Input },],\n};\n}\n\nfunction MatSidenav_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSidenav.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSidenav.ctorParameters;\n/** @type {?} */\nMatSidenav.propDecorators;\n/** @type {?} */\nMatSidenav.prototype._fixedInViewport;\n/** @type {?} */\nMatSidenav.prototype._fixedTopGap;\n/** @type {?} */\nMatSidenav.prototype._fixedBottomGap;\n}\n\nexport class MatSidenavContainer extends MatDrawerContainer {\n   _drawers;\n\n   _content;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: [\n    'drawer.css',\n    'drawer-transitions.css',\n  ],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_drawers': [{ type: ContentChildren, args: [MatSidenav, ] },],\n'_content': [{ type: ContentChild, args: [MatSidenavContent, ] },],\n};\n}\n\nfunction MatSidenavContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSidenavContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSidenavContainer.ctorParameters;\n/** @type {?} */\nMatSidenavContainer.propDecorators;\n/** @type {?} */\nMatSidenavContainer.prototype._drawers;\n/** @type {?} */\nMatSidenavContainer.prototype._content;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\nexport class MatSidenavModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MatCommonModule, A11yModule, OverlayModule],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSidenavModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSidenavModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSidenavModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSidenavModule,throwMatDuplicatedDrawerError,MatDrawerToggleResult,MatDrawerContent,MatDrawer,MatDrawerContainer,MatSidenavContent,MatSidenav,MatSidenavContainer} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  applyCssTransform,\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  HammerInput,\n  HasTabIndex,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n  RippleRef,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet /** @type {?} */ nextUniqueId = 0;\n\nexport const /** @type {?} */ MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n/**\n * Change event object emitted by a MatSlideToggle.\n */\nexport class MatSlideToggleChange {\n  source: MatSlideToggle;\n  checked: boolean;\n}\n\nfunction MatSlideToggleChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSlideToggleChange.prototype.source;\n/** @type {?} */\nMatSlideToggleChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatSlideToggleBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatSlideToggleBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSlideToggleBase.prototype._renderer;\n/** @type {?} */\nMatSlideToggleBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatSlideToggleMixinBase =\n  mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/**\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\n */\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\nprivate onChange = (_: any) => {};\nprivate onTouched = () => {};\nprivate _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\nprivate _slideRenderer: SlideToggleRenderer;\nprivate _required: boolean = false;\nprivate _checked: boolean = false;\n/**\n * Reference to the focus state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Used to set the aria-label attribute on the underlying input element.\n */\nariaLabel: string | null = null;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n */\nariaLabelledby: string | null = null;\n/**\n * Whether the slide-toggle is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether the slide-toggle element is checked or not\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} value\n * @return {?}\n */\nset checked(value) {\n    this._checked = !!value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n */\nchange: EventEmitter<MatSlideToggleChange> = new EventEmitter<MatSlideToggleChange>();\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Reference to the underlying input element.\n */\n_inputElement: ElementRef;\n/**\n * Reference to the ripple directive on the thumb container.\n */\n_ripple: MatRipple;\n/**\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _platform\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} tabIndex\n */\nconstructor(elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\n               tabIndex: string) {\n    super(renderer, elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._slideRenderer = new SlideToggleRenderer(this._elementRef, this._platform);\n\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * This function will called if the underlying input changed its value through user interaction.\n * @param {?} event\n * @return {?}\n */\n_onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    // Sync the value from the underlying input element with the slide-toggle component.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event if the native input emitted one.\n    // It is important to only emit it, if the native input triggered one, because we don't want\n    // to trigger a change event, when the `checked` variable changes programmatically.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // In some situations the user will release the mouse on the label element. The label element\n    // redirects the click to the underlying input element and will result in a value change.\n    // Prevent the default behavior if dragging, because the value will be set after drag.\n    if (this._slideRenderer.dragging) {\n      event.preventDefault();\n    }\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    this.checked = !!value;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n/**\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n/**\n * Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Focuses the slide-toggle.\n * @return {?}\n */\nfocus() {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Toggles the checked state of the slide-toggle.\n * @return {?}\n */\ntoggle() {\n    this.checked = !this.checked;\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      // For keyboard focus show a persistent ripple as focus indicator.\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this.onTouched();\n\n      // Fade out and clear the focus ripple if one is currently present.\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n/**\n * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MatSlideToggleChange();\n    event.source = this;\n    event.checked = this.checked;\n    this.change.emit(event);\n    this.onChange(this.checked);\n  }\n/**\n * @return {?}\n */\n_onDragStart() {\n    if (!this.disabled) {\n      this._slideRenderer.startThumbDrag(this.checked);\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onDrag(event: HammerInput) {\n    if (this._slideRenderer.dragging) {\n      this._slideRenderer.updateThumbPosition(event.deltaX);\n    }\n  }\n/**\n * @return {?}\n */\n_onDragEnd() {\n    if (this._slideRenderer.dragging) {\n      let /** @type {?} */ _previousChecked = this.checked;\n      this.checked = this._slideRenderer.dragPercentage > 50;\n\n      if (_previousChecked !== this.checked) {\n        this._emitChangeEvent();\n      }\n\n      // The drag should be stopped outside of the current event handler, because otherwise the\n      // click event will be fired before and will revert the drag change.\n      setTimeout(() => this._slideRenderer.stopThumbDrag());\n    }\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the slide-toggle changes.\n    // Since the slide-toggle uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'name': [{ type: Input },],\n'id': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'required': [{ type: Input },],\n'checked': [{ type: Input },],\n'change': [{ type: Output },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MatRipple, ] },],\n};\n}\n\nfunction MatSlideToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSlideToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSlideToggle.ctorParameters;\n/** @type {?} */\nMatSlideToggle.propDecorators;\n/** @type {?} */\nMatSlideToggle.prototype.onChange;\n/** @type {?} */\nMatSlideToggle.prototype.onTouched;\n/** @type {?} */\nMatSlideToggle.prototype._uniqueId;\n/** @type {?} */\nMatSlideToggle.prototype._slideRenderer;\n/** @type {?} */\nMatSlideToggle.prototype._required;\n/** @type {?} */\nMatSlideToggle.prototype._checked;\n/**\n * Reference to the focus state ripple.\n * @type {?}\n */\nMatSlideToggle.prototype._focusRipple;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMatSlideToggle.prototype.name;\n/**\n * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMatSlideToggle.prototype.id;\n/**\n * Whether the label should appear after or before the slide-toggle. Defaults to 'after'\n * @type {?}\n */\nMatSlideToggle.prototype.labelPosition;\n/**\n * Used to set the aria-label attribute on the underlying input element.\n * @type {?}\n */\nMatSlideToggle.prototype.ariaLabel;\n/**\n * Used to set the aria-labelledby attribute on the underlying input element.\n * @type {?}\n */\nMatSlideToggle.prototype.ariaLabelledby;\n/**\n * An event will be dispatched each time the slide-toggle changes its value.\n * @type {?}\n */\nMatSlideToggle.prototype.change;\n/**\n * Reference to the underlying input element.\n * @type {?}\n */\nMatSlideToggle.prototype._inputElement;\n/**\n * Reference to the ripple directive on the thumb container.\n * @type {?}\n */\nMatSlideToggle.prototype._ripple;\n/** @type {?} */\nMatSlideToggle.prototype._platform;\n/** @type {?} */\nMatSlideToggle.prototype._focusMonitor;\n/** @type {?} */\nMatSlideToggle.prototype._changeDetectorRef;\n}\n\n/**\n * Renderer for the Slide Toggle component, which separates DOM modification in its own class\n */\nclass SlideToggleRenderer {\n/**\n * Reference to the thumb HTMLElement.\n */\nprivate _thumbEl: HTMLElement;\n/**\n * Reference to the thumb bar HTMLElement.\n */\nprivate _thumbBarEl: HTMLElement;\n/**\n * Width of the thumb bar of the slide-toggle.\n */\nprivate _thumbBarWidth: number;\n/**\n * Previous checked state before drag started.\n */\nprivate _previousChecked: boolean;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n */\ndragPercentage: number;\n/**\n * Whether the thumb is currently being dragged.\n */\ndragging: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} platform\n */\nconstructor(elementRef: ElementRef, platform: Platform) {\n    // We only need to interact with these elements when we're on the browser, so only grab\n    // the reference in that case.\n    if (platform.isBrowser) {\n      this._thumbEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-thumb-container');\n      this._thumbBarEl = elementRef.nativeElement.querySelector('.mat-slide-toggle-bar');\n    }\n  }\n/**\n * Initializes the drag of the slide-toggle.\n * @param {?} checked\n * @return {?}\n */\nstartThumbDrag(checked: boolean) {\n    if (this.dragging) { return; }\n\n    this._thumbBarWidth = this._thumbBarEl.clientWidth - this._thumbEl.clientWidth;\n    this._thumbEl.classList.add('mat-dragging');\n\n    this._previousChecked = checked;\n    this.dragging = true;\n  }\n/**\n * Resets the current drag and returns the new checked value.\n * @return {?}\n */\nstopThumbDrag(): boolean {\n    if (!this.dragging) { return false; }\n\n    this.dragging = false;\n    this._thumbEl.classList.remove('mat-dragging');\n\n    // Reset the transform because the component will take care of the thumb position after drag.\n    applyCssTransform(this._thumbEl, '');\n\n    return this.dragPercentage > 50;\n  }\n/**\n * Updates the thumb containers position from the specified distance.\n * @param {?} distance\n * @return {?}\n */\nupdateThumbPosition(distance: number) {\n    this.dragPercentage = this._getDragPercentage(distance);\n    // Calculate the moved distance based on the thumb bar width.\n    let /** @type {?} */ dragX = (this.dragPercentage / 100) * this._thumbBarWidth;\n    applyCssTransform(this._thumbEl, `translate3d(${dragX}px, 0, 0)`);\n  }\n/**\n * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\n * @param {?} distance\n * @return {?}\n */\nprivate _getDragPercentage(distance: number) {\n    let /** @type {?} */ percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n}\n\nfunction SlideToggleRenderer_tsickle_Closure_declarations() {\n/**\n * Reference to the thumb HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbEl;\n/**\n * Reference to the thumb bar HTMLElement.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarEl;\n/**\n * Width of the thumb bar of the slide-toggle.\n * @type {?}\n */\nSlideToggleRenderer.prototype._thumbBarWidth;\n/**\n * Previous checked state before drag started.\n * @type {?}\n */\nSlideToggleRenderer.prototype._previousChecked;\n/**\n * Percentage of the thumb while dragging. Percentage as fraction of 100.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragPercentage;\n/**\n * Whether the thumb is currently being dragged.\n * @type {?}\n */\nSlideToggleRenderer.prototype.dragging;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSlideToggleModule,MAT_SLIDE_TOGGLE_VALUE_ACCESSOR,MatSlideToggleChange,MatSlideToggleBase,_MatSlideToggleMixinBase,MatSlideToggle} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {\n  GestureConfig,\n  MatCommonModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatSlideToggle} from './slide-toggle';\nexport class MatSlideToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatRippleModule, MatCommonModule, PlatformModule, ObserversModule, A11yModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSlideToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSlideToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSlideToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  HammerInput,\n  mixinColor,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {FocusOrigin, FocusMonitor} from '@angular/cdk/a11y';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/**\n * The thumb gap size for a disabled slider.\n */\nconst DISABLED_THUMB_GAP = 7;\n/**\n * The thumb gap size for a non-active slider at its minimum value.\n */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/**\n * The thumb gap size for an active slider at its minimum value.\n */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n/**\n * A simple change event emitted by the MatSlider component.\n */\nexport class MatSliderChange {\n/**\n * The MatSlider that changed.\n */\nsource: MatSlider;\n/**\n * The new value of the source slider.\n */\nvalue: number | null;\n}\n\nfunction MatSliderChange_tsickle_Closure_declarations() {\n/**\n * The MatSlider that changed.\n * @type {?}\n */\nMatSliderChange.prototype.source;\n/**\n * The new value of the source slider.\n * @type {?}\n */\nMatSliderChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatSliderBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatSliderBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSliderBase.prototype._renderer;\n/** @type {?} */\nMatSliderBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatSliderMixinBase = mixinColor(mixinDisabled(MatSliderBase), 'accent');\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit {\n/**\n * Whether the slider is inverted.\n * @return {?}\n */\nget invert() { return this._invert; }\n/**\n * @param {?} value\n * @return {?}\n */\nset invert(value: any) {\n    this._invert = coerceBooleanProperty(value);\n  }\nprivate _invert = false;\n/**\n * The maximum value that the slider can have.\n * @return {?}\n */\nget max() { return this._max; }\n/**\n * @param {?} v\n * @return {?}\n */\nset max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _max: number = 100;\n/**\n * The minimum value that the slider can have.\n * @return {?}\n */\nget min() { return this._min; }\n/**\n * @param {?} v\n * @return {?}\n */\nset min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _min: number = 0;\n/**\n * The values at which the thumb will snap.\n * @return {?}\n */\nget step() { return this._step; }\n/**\n * @param {?} v\n * @return {?}\n */\nset step(v) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundLabelTo = /** @type {?} */(( this._step.toString().split('.').pop())).length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nprivate _step: number = 1;\n/**\n * Whether or not to show the thumb label.\n * @return {?}\n */\nget thumbLabel(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\nprivate _thumbLabel: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _thumbLabelDeprecated(): boolean { return this._thumbLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _thumbLabelDeprecated(value) { this._thumbLabel = value; }\n/**\n * How often to show ticks. Relative to the step so that a tick always appears on a step.\n * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n * @return {?}\n */\nget tickInterval() { return this._tickInterval; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tickInterval(value) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, /** @type {?} */(( this._tickInterval as number)));\n    } else {\n      this._tickInterval = 0;\n    }\n  }\nprivate _tickInterval: 'auto' | number = 0;\n/**\n * @deprecated\n * @return {?}\n */\nget _tickIntervalDeprecated() { return this.tickInterval; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _tickIntervalDeprecated(v) { this.tickInterval = v; }\n/**\n * Value of the slider.\n * @return {?}\n */\nget value() {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number | null) {\n    if (v !== this._value) {\n      this._value = coerceNumberProperty(v, this._value || 0);\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _value: number | null = null;\n/**\n * Whether the slider is vertical.\n * @return {?}\n */\nget vertical() { return this._vertical; }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value: any) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nprivate _vertical = false;\n/**\n * Event emitted when the slider value has changed.\n */\nchange = new EventEmitter<MatSliderChange>();\n/**\n * Event emitted when the slider thumb moves.\n */\ninput = new EventEmitter<MatSliderChange>();\n/**\n * The value to be used for display purposes.\n * @return {?}\n */\nget displayValue(): string | number {\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundLabelTo && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundLabelTo);\n    }\n\n    return this.value || 0;\n  }\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * The percentage of the slider that coincides with the value.\n * @return {?}\n */\nget percent() { return this._clamp(this._percent); }\nprivate _percent: number = 0;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n */\n_isSliding: boolean = false;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n */\n_isActive: boolean = false;\n/**\n * Whether the axis of the slider is inverted.\n * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n * @return {?}\n */\nget _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n/**\n * Whether the slider is at its minimum value.\n * @return {?}\n */\nget _isMinValue() {\n    return this.percent === 0;\n  }\n/**\n * The amount of space to leave between the slider thumb and the track fill & track background\n * elements.\n * @return {?}\n */\nget _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n/**\n * CSS styles for the track background element.\n * @return {?}\n */\nget _trackBackgroundStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '-' : '';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${1 - this.percent})`\n    };\n  }\n/**\n * CSS styles for the track fill element.\n * @return {?}\n */\nget _trackFillStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    let /** @type {?} */ sign = this._invertMouseCoords ? '' : '-';\n    return {\n      'transform': `translate${axis}(${sign}${this._thumbGap}px) scale${axis}(${this.percent})`\n    };\n  }\n/**\n * CSS styles for the ticks container element.\n * @return {?}\n */\nget _ticksContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '' : '-';\n    let /** @type {?} */ offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n/**\n * CSS styles for the ticks element.\n * @return {?}\n */\nget _ticksStyles(): { [key: string]: string } {\n    let /** @type {?} */ tickSize = this._tickIntervalPercent * 100;\n    let /** @type {?} */ backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let /** @type {?} */ sign = !this.vertical && this._direction == 'rtl' ? '-' : '';\n    let /** @type {?} */ rotate = !this.vertical && this._direction == 'rtl' ? ' rotate(180deg)' : '';\n    let /** @type {?} */ styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let /** @type {?} */ side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n/**\n * @return {?}\n */\nget _thumbContainerStyles(): { [key: string]: string } {\n    let /** @type {?} */ axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let /** @type {?} */ invertOffset =\n        (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let /** @type {?} */ offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n/**\n * The size of a tick interval as a percentage of the size of the track.\n */\nprivate _tickIntervalPercent: number = 0;\n/**\n * The dimensions of the slider.\n */\nprivate _sliderDimensions: ClientRect | null = null;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Decimal places to round to, based on the step amount.\n */\nprivate _roundLabelTo: number;\n/**\n * Subscription to the Directionality change EventEmitter.\n */\nprivate _dirChangeSubscription = Subscription.EMPTY;\n/**\n * The value of the slider when the slide start event fires.\n */\nprivate _valueOnSlideStart: number | null;\n/**\n * Reference to the inner slider wrapper element.\n */\nprivate _sliderWrapper: ElementRef;\n/**\n * Whether mouse events should be converted to a slider position by calculating their distance\n * from the right or bottom edge of the slider as opposed to the top or left.\n * @return {?}\n */\nprivate get _invertMouseCoords() {\n    return (this._direction == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n/**\n * The language direction for this slider element.\n * @return {?}\n */\nprivate get _direction() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef.nativeElement, this._renderer, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    this._dirChangeSubscription.unsubscribe();\n  }\n/**\n * @return {?}\n */\n_onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    let /** @type {?} */ oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    /* Emit a change and input event if the value changed. */\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let /** @type {?} */ oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onSlideStart(event: HammerInput | null) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n/**\n * @return {?}\n */\n_onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n/**\n * @return {?}\n */\n_onBlur() {\n    this.onTouched();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let /** @type {?} */ oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._direction == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._direction == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n/**\n * @return {?}\n */\n_onKeyup() {\n    this._isSliding = false;\n  }\n/**\n * Increments the slider by the given number of steps (negative number decrements).\n * @param {?} numSteps\n * @return {?}\n */\nprivate _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n/**\n * Calculate the new value from the new physical location. The value will always be snapped.\n * @param {?} pos\n * @return {?}\n */\nprivate _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let /** @type {?} */ offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let /** @type {?} */ size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let /** @type {?} */ posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let /** @type {?} */ percent = this._clamp((posComponent - offset) / size);\n    if (this._invertMouseCoords) {\n      percent = 1 - percent;\n    }\n    let /** @type {?} */ exactValue = this._calculateValue(percent);\n\n    // This calculation finds the closest step by finding the closest whole number divisible by the\n    // step relative to the min.\n    let /** @type {?} */ closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n    // The value needs to snap to the min and max.\n    this.value = this._clamp(closestValue, this.min, this.max);\n  }\n/**\n * Emits a change event if the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n/**\n * Emits an input event when the current value is different from the last emitted value.\n * @return {?}\n */\nprivate _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n/**\n * Updates the amount of space between ticks as a percentage of the width of the slider.\n * @return {?}\n */\nprivate _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let /** @type {?} */ trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let /** @type {?} */ pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let /** @type {?} */ stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let /** @type {?} */ pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n/**\n * Creates a slider change object from the specified value.\n * @param {?=} value\n * @return {?}\n */\nprivate _createChangeEvent(value = this.value): MatSliderChange {\n    let /** @type {?} */ event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n/**\n * Calculates the percentage of the slider that a value is.\n * @param {?} value\n * @return {?}\n */\nprivate _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n/**\n * Calculates the value a percentage of the slider corresponds to.\n * @param {?} percentage\n * @return {?}\n */\nprivate _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n/**\n * Return a number between two numbers.\n * @param {?} value\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nprivate _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n/**\n * Get the bounding client rect of the slider track element.\n * The track is used rather than the native element to ignore the extra space that the thumb can\n * take up.\n * @return {?}\n */\nprivate _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n/**\n * Focuses the native element.\n * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n * @return {?}\n */\nprivate _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n  }\n/**\n * Registers a callback to eb triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the component is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets whether the component should be disabled.\n * Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-slider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(click)': '_onClick($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    'tabindex': '0',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'invert': [{ type: Input },],\n'max': [{ type: Input },],\n'min': [{ type: Input },],\n'step': [{ type: Input },],\n'thumbLabel': [{ type: Input },],\n'_thumbLabelDeprecated': [{ type: Input, args: ['thumb-label', ] },],\n'tickInterval': [{ type: Input },],\n'_tickIntervalDeprecated': [{ type: Input, args: ['tick-interval', ] },],\n'value': [{ type: Input },],\n'vertical': [{ type: Input },],\n'change': [{ type: Output },],\n'input': [{ type: Output },],\n'_sliderWrapper': [{ type: ViewChild, args: ['sliderWrapper', ] },],\n};\n}\n\nfunction MatSlider_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSlider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSlider.ctorParameters;\n/** @type {?} */\nMatSlider.propDecorators;\n/** @type {?} */\nMatSlider.prototype._invert;\n/** @type {?} */\nMatSlider.prototype._max;\n/** @type {?} */\nMatSlider.prototype._min;\n/** @type {?} */\nMatSlider.prototype._step;\n/** @type {?} */\nMatSlider.prototype._thumbLabel;\n/** @type {?} */\nMatSlider.prototype._tickInterval;\n/** @type {?} */\nMatSlider.prototype._value;\n/** @type {?} */\nMatSlider.prototype._vertical;\n/**\n * Event emitted when the slider value has changed.\n * @type {?}\n */\nMatSlider.prototype.change;\n/**\n * Event emitted when the slider thumb moves.\n * @type {?}\n */\nMatSlider.prototype.input;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMatSlider.prototype.onTouched;\n/** @type {?} */\nMatSlider.prototype._percent;\n/**\n * Whether or not the thumb is sliding.\n * Used to determine if there should be a transition for the thumb and fill track.\n * @type {?}\n */\nMatSlider.prototype._isSliding;\n/**\n * Whether or not the slider is active (clicked or sliding).\n * Used to shrink and grow the thumb as according to the Material Design spec.\n * @type {?}\n */\nMatSlider.prototype._isActive;\n/**\n * The size of a tick interval as a percentage of the size of the track.\n * @type {?}\n */\nMatSlider.prototype._tickIntervalPercent;\n/**\n * The dimensions of the slider.\n * @type {?}\n */\nMatSlider.prototype._sliderDimensions;\n/** @type {?} */\nMatSlider.prototype._controlValueAccessorChangeFn;\n/**\n * Decimal places to round to, based on the step amount.\n * @type {?}\n */\nMatSlider.prototype._roundLabelTo;\n/**\n * Subscription to the Directionality change EventEmitter.\n * @type {?}\n */\nMatSlider.prototype._dirChangeSubscription;\n/**\n * The value of the slider when the slide start event fires.\n * @type {?}\n */\nMatSlider.prototype._valueOnSlideStart;\n/**\n * Reference to the inner slider wrapper element.\n * @type {?}\n */\nMatSlider.prototype._sliderWrapper;\n/** @type {?} */\nMatSlider.prototype._focusMonitor;\n/** @type {?} */\nMatSlider.prototype._changeDetectorRef;\n/** @type {?} */\nMatSlider.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\nexport class MatSliderModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MatCommonModule, BidiModule, A11yModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSliderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule, ARIA_DESCRIBER_PROVIDER} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER, MatTooltip, TooltipComponent} from './tooltip';\nexport class MatTooltipModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PlatformModule,\n    A11yModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER, ARIA_DESCRIBER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatTooltipModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTooltipModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTooltipModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\nexport class MatPaginatorIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the page size selector.\n */\nitemsPerPageLabel = 'Items per page:';\n/**\n * A label for the button that increments the current page.\n */\nnextPageLabel = 'Next page';\n/**\n * A label for the button that decrements the current page.\n */\npreviousPageLabel = 'Previous page';\n/**\n * A label for the range of items within the current page and the length of the whole list.\n */\ngetRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPaginatorIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPaginatorIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPaginatorIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMatPaginatorIntl.prototype.changes;\n/**\n * A label for the page size selector.\n * @type {?}\n */\nMatPaginatorIntl.prototype.itemsPerPageLabel;\n/**\n * A label for the button that increments the current page.\n * @type {?}\n */\nMatPaginatorIntl.prototype.nextPageLabel;\n/**\n * A label for the button that decrements the current page.\n * @type {?}\n */\nMatPaginatorIntl.prototype.previousPageLabel;\n/**\n * A label for the range of items within the current page and the length of the whole list.\n * @type {?}\n */\nMatPaginatorIntl.prototype.getRangeLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatPaginatorIntl} from './paginator-intl';\n/**\n * The default page size if there is no page size and there are no provided page size options.\n */\nconst DEFAULT_PAGE_SIZE = 50;\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n/**\n * The current page index.\n */\npageIndex: number;\n/**\n * The current page size\n */\npageSize: number;\n/**\n * The current total number of items being paged\n */\nlength: number;\n}\n\nfunction PageEvent_tsickle_Closure_declarations() {\n/**\n * The current page index.\n * @type {?}\n */\nPageEvent.prototype.pageIndex;\n/**\n * The current page size\n * @type {?}\n */\nPageEvent.prototype.pageSize;\n/**\n * The current total number of items being paged\n * @type {?}\n */\nPageEvent.prototype.length;\n}\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\nexport class MatPaginator implements OnInit, OnDestroy {\nprivate _initialized: boolean;\nprivate _intlChanges: Subscription;\n/**\n * The zero-based page index of the displayed list of items. Defaulted to 0.\n * @return {?}\n */\nget pageIndex(): number { return this._pageIndex; }\n/**\n * @param {?} pageIndex\n * @return {?}\n */\nset pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n/**\n * The length of the total number of items that are being paginated. Defaulted to 0.\n * @return {?}\n */\nget length(): number { return this._length; }\n/**\n * @param {?} length\n * @return {?}\n */\nset length(length: number) {\n    this._length = length;\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n/**\n * Number of items to display on a page. By default set to 50.\n * @return {?}\n */\nget pageSize(): number { return this._pageSize; }\n/**\n * @param {?} pageSize\n * @return {?}\n */\nset pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSize: number;\n/**\n * The set of provided page size options to display to the user.\n * @return {?}\n */\nget pageSizeOptions(): number[] { return this._pageSizeOptions; }\n/**\n * @param {?} pageSizeOptions\n * @return {?}\n */\nset pageSizeOptions(pageSizeOptions: number[]) {\n    this._pageSizeOptions = pageSizeOptions;\n    this._updateDisplayedPageSizeOptions();\n  }\nprivate _pageSizeOptions: number[] = [];\n/**\n * Event emitted when the paginator changes the page size or page index.\n */\npage = new EventEmitter<PageEvent>();\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n */\n_displayedPageSizeOptions: number[];\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(public _intl: MatPaginatorIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Advances to the next page if it exists.\n * @return {?}\n */\nnextPage() {\n    if (!this.hasNextPage()) { return; }\n    this.pageIndex++;\n    this._emitPageEvent();\n  }\n/**\n * Move back to the previous page if it exists.\n * @return {?}\n */\npreviousPage() {\n    if (!this.hasPreviousPage()) { return; }\n    this.pageIndex--;\n    this._emitPageEvent();\n  }\n/**\n * Whether there is a previous page.\n * @return {?}\n */\nhasPreviousPage() {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n/**\n * Whether there is a next page.\n * @return {?}\n */\nhasNextPage() {\n    const /** @type {?} */ numberOfPages = Math.ceil(this.length / this.pageSize) - 1;\n    return this.pageIndex < numberOfPages && this.pageSize != 0;\n  }\n/**\n * Changes the page size so that the first item displayed on the page will still be\n * displayed using the new page size.\n * \n * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n * switching so that the page size is 5 will set the third page as the current page so\n * that the 10th item will still be displayed.\n * @param {?} pageSize\n * @return {?}\n */\n_changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const /** @type {?} */ startIndex = this.pageIndex * this.pageSize;\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n\n    this.pageSize = pageSize;\n    this._emitPageEvent();\n  }\n/**\n * Updates the list of page size options to display to the user. Includes making sure that\n * the page size is an option and that the list is sorted.\n * @return {?}\n */\nprivate _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) == -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Emits an event notifying that a change of the paginator's properties has been triggered.\n * @return {?}\n */\nprivate _emitPageEvent() {\n    this.page.next({\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatPaginatorIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'pageIndex': [{ type: Input },],\n'length': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageSizeOptions': [{ type: Input },],\n'page': [{ type: Output },],\n};\n}\n\nfunction MatPaginator_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPaginator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPaginator.ctorParameters;\n/** @type {?} */\nMatPaginator.propDecorators;\n/** @type {?} */\nMatPaginator.prototype._initialized;\n/** @type {?} */\nMatPaginator.prototype._intlChanges;\n/** @type {?} */\nMatPaginator.prototype._pageIndex;\n/** @type {?} */\nMatPaginator.prototype._length;\n/** @type {?} */\nMatPaginator.prototype._pageSize;\n/** @type {?} */\nMatPaginator.prototype._pageSizeOptions;\n/**\n * Event emitted when the paginator changes the page size or page index.\n * @type {?}\n */\nMatPaginator.prototype.page;\n/**\n * Displayed set of page size options. Will be sorted and include current page size.\n * @type {?}\n */\nMatPaginator.prototype._displayedPageSizeOptions;\n/** @type {?} */\nMatPaginator.prototype._intl;\n/** @type {?} */\nMatPaginator.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MatPaginatorIntl} from './paginator-intl';\nexport class MatPaginatorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MatPaginatorIntl],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPaginatorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPaginatorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPaginatorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatPaginatorModule,PageEvent,MatPaginator,MatPaginatorIntl} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ChangeDetectionStrategy, Input, ViewEncapsulation} from '@angular/core';\n/**\n * <mat-progress-bar> component.\n */\nexport class MatProgressBar {\n/**\n * Color of the progress bar.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\nprivate _value: number = 0;\n/**\n * Value of the progressbar. Defaults to zero. Mirrored to aria-valuenow.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) { this._value = clamp(v || 0); }\nprivate _bufferValue: number = 0;\n/**\n * Buffer value of the progress bar. Defaults to zero.\n * @return {?}\n */\nget bufferValue() { return this._bufferValue; }\n/**\n * @param {?} v\n * @return {?}\n */\nset bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n */\nmode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n/**\n * Gets the current transform value for the progress bar's primary indicator.\n * @return {?}\n */\n_primaryTransform() {\n    let /** @type {?} */ scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n/**\n * Gets the current transform value for the progress bar's buffer indicator.  Only used if the\n * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n * @return {?}\n */\n_bufferTransform() {\n    if (this.mode == 'buffer') {\n      let /** @type {?} */ scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    'class': 'mat-progress-bar',\n  },\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'value': [{ type: Input },],\n'bufferValue': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MatProgressBar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatProgressBar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatProgressBar.ctorParameters;\n/** @type {?} */\nMatProgressBar.propDecorators;\n/**\n * Color of the progress bar.\n * @type {?}\n */\nMatProgressBar.prototype.color;\n/** @type {?} */\nMatProgressBar.prototype._value;\n/** @type {?} */\nMatProgressBar.prototype._bufferValue;\n/**\n * Mode of the progress bar.\n * \n * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n * 'determinate'.\n * Mirrored to mode attribute.\n * @type {?}\n */\nMatProgressBar.prototype.mode;\n}\n\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\nexport class MatProgressBarModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatProgressBarModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatProgressBarModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatProgressBarModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatProgressBarModule,MatProgressBar} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  OnDestroy,\n  Input,\n  ElementRef,\n  NgZone,\n  Renderer2,\n  Directive,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\n/**\n * A single degree in radians.\n */\nconst DEGREE_IN_RADIANS = Math.PI / 180;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_INDETERMINATE = 667;\n/**\n * Duration of the indeterminate animation.\n */\nconst DURATION_DETERMINATE = 225;\n/**\n * Start animation value of the indeterminate animation\n */\nconst startIndeterminate = 3;\n/**\n * End animation value of the indeterminate animation\n */\nconst endIndeterminate = 80;\n/**\n * Maximum angle for the arc. The angle can't be exactly 360, because the arc becomes hidden.\n */\nconst MAX_ANGLE = 359.99 / 100;\n/**\n * Whether the user's browser supports requestAnimationFrame.\n */\nconst HAS_RAF = typeof requestAnimationFrame !== 'undefined';\n/**\n * Default stroke width as a percentage of the viewBox.\n */\nexport const PROGRESS_SPINNER_STROKE_WIDTH = 10;\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\ntype EasingFn = (currentTime: number, startValue: number,\n                 changeInValue: number, duration: number) => number;\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatProgressSpinnerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-progress-spinner',\n  host: {'class': 'mat-progress-spinner'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatProgressSpinnerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatProgressSpinnerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatProgressSpinnerCssMatStyler.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatProgressSpinnerBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatProgressSpinnerBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatProgressSpinnerBase.prototype._renderer;\n/** @type {?} */\nMatProgressSpinnerBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\n/**\n * <mat-progress-spinner> component.\n */\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase\n    implements OnDestroy, CanColor {\n/**\n * The id of the last requested animation.\n */\nprivate _lastAnimationId: number = 0;\n/**\n * The id of the indeterminate interval.\n */\nprivate _interdeterminateInterval: number | null;\n/**\n * The SVG <path> node that is used to draw the circle.\n */\nprivate _path: ElementRef;\nprivate _mode: ProgressSpinnerMode = 'determinate';\nprivate _value: number;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n */\nstrokeWidth: number = PROGRESS_SPINNER_STROKE_WIDTH;\n/**\n * Values for aria max and min are only defined as numbers when in a determinate mode.  We do this\n * because voiceover does not report the progress indicator as indeterminate if the aria min\n * and/or max value are number values.\n * @return {?}\n */\nget _ariaValueMin() {\n    return this.mode == 'determinate' ? 0 : null;\n  }\n/**\n * @return {?}\n */\nget _ariaValueMax() {\n    return this.mode == 'determinate' ? 100 : null;\n  }\n/**\n * \\@docs-private\n * @return {?}\n */\nget interdeterminateInterval() {\n    return this._interdeterminateInterval;\n  }\n/**\n * \\@docs-private\n * @param {?} interval\n * @return {?}\n */\nset interdeterminateInterval(interval: number | null) {\n    if (this._interdeterminateInterval) {\n      clearInterval(this._interdeterminateInterval);\n    }\n\n    this._interdeterminateInterval = interval;\n  }\n/**\n * Clean up any animations that were running.\n * @return {?}\n */\nngOnDestroy() {\n    this._cleanupIndeterminateAnimation();\n  }\n/**\n * Value of the progress circle. It is bound to the host as the attribute aria-valuenow.\n * @return {?}\n */\nget value() {\n    if (this.mode == 'determinate') {\n      return this._value;\n    }\n\n    return 0;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset value(v: number) {\n    if (v != null && this.mode == 'determinate') {\n      let /** @type {?} */ newValue = clamp(v);\n      this._animateCircle(this.value || 0, newValue);\n      this._value = newValue;\n    }\n  }\n/**\n * Mode of the progress circle\n * \n * Input must be one of the values from ProgressMode, defaults to 'determinate'.\n * mode is bound to the host as the attribute host.\n * @return {?}\n */\nget mode() { return this._mode; }\n/**\n * @param {?} mode\n * @return {?}\n */\nset mode(mode: ProgressSpinnerMode) {\n    if (mode !== this._mode) {\n      if (mode === 'indeterminate') {\n        this._startIndeterminateAnimation();\n      } else {\n        this._cleanupIndeterminateAnimation();\n        this._animateCircle(0, this._value);\n      }\n      this._mode = mode;\n    }\n  }\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _ngZone\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _ngZone: NgZone) {\n    super(renderer, elementRef);\n  }\n/**\n * Animates the circle from one percentage value to another.\n * \n * @param {?} animateFrom The percentage of the circle filled starting the animation.\n * @param {?} animateTo The percentage of the circle filled ending the animation.\n * @param {?=} ease The easing function to manage the pace of change in the animation.\n * @param {?=} duration The length of time to show the animation, in milliseconds.\n * @param {?=} rotation The starting angle of the circle fill, with 0° represented at the top center\n *    of the circle.\n * @return {?}\n */\nprivate _animateCircle(animateFrom: number, animateTo: number, ease: EasingFn = linearEase,\n                        duration = DURATION_DETERMINATE, rotation = 0) {\n\n    let /** @type {?} */ id = ++this._lastAnimationId;\n    let /** @type {?} */ startTime = Date.now();\n    let /** @type {?} */ changeInValue = animateTo - animateFrom;\n\n    // No need to animate it if the values are the same\n    if (animateTo === animateFrom) {\n      this._renderArc(animateTo, rotation);\n    } else {\n      let /** @type {?} */ animation = () => {\n        // If there is no requestAnimationFrame, skip ahead to the end of the animation.\n        let /** @type {?} */ elapsedTime = HAS_RAF ?\n            Math.max(0, Math.min(Date.now() - startTime, duration)) :\n            duration;\n\n        this._renderArc(\n          ease(elapsedTime, animateFrom, changeInValue, duration),\n          rotation\n        );\n\n        // Prevent overlapping animations by checking if a new animation has been called for and\n        // if the animation has lasted longer than the animation duration.\n        if (id === this._lastAnimationId && elapsedTime < duration) {\n          requestAnimationFrame(animation);\n        }\n      };\n\n      // Run the animation outside of Angular's zone, in order to avoid\n      // hitting ZoneJS and change detection on each frame.\n      this._ngZone.runOutsideAngular(animation);\n    }\n  }\n/**\n * Starts the indeterminate animation interval, if it is not already running.\n * @return {?}\n */\nprivate _startIndeterminateAnimation() {\n    let /** @type {?} */ rotationStartPoint = 0;\n    let /** @type {?} */ start = startIndeterminate;\n    let /** @type {?} */ end = endIndeterminate;\n    let /** @type {?} */ duration = DURATION_INDETERMINATE;\n    let /** @type {?} */ animate = () => {\n      this._animateCircle(start, end, materialEase, duration, rotationStartPoint);\n      // Prevent rotation from reaching Number.MAX_SAFE_INTEGER.\n      rotationStartPoint = (rotationStartPoint + end) % 100;\n      let /** @type {?} */ temp = start;\n      start = -end;\n      end = -temp;\n    };\n\n    if (!this.interdeterminateInterval) {\n      this._ngZone.runOutsideAngular(() => {\n        this.interdeterminateInterval = setInterval(animate, duration + 50, 0, false);\n        animate();\n      });\n    }\n  }\n/**\n * Removes interval, ending the animation.\n * @return {?}\n */\nprivate _cleanupIndeterminateAnimation() {\n    this.interdeterminateInterval = null;\n  }\n/**\n * Renders the arc onto the SVG element. Proxies `getArc` while setting the proper\n * DOM attribute on the `<path>`.\n * @param {?} currentValue\n * @param {?=} rotation\n * @return {?}\n */\nprivate _renderArc(currentValue: number, rotation = 0) {\n    if (this._path) {\n      const /** @type {?} */ svgArc = getSvgArc(currentValue, rotation, this.strokeWidth);\n      this._renderer.setAttribute(this._path.nativeElement, 'd', svgArc);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[attr.aria-valuemin]': '_ariaValueMin',\n    '[attr.aria-valuemax]': '_ariaValueMax',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_path': [{ type: ViewChild, args: ['path', ] },],\n'strokeWidth': [{ type: Input },],\n'value': [{ type: Input },],\n'mode': [{ type: Input },],\n};\n}\n\nfunction MatProgressSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMatProgressSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatProgressSpinner.ctorParameters;\n/** @type {?} */\nMatProgressSpinner.propDecorators;\n/**\n * The id of the last requested animation.\n * @type {?}\n */\nMatProgressSpinner.prototype._lastAnimationId;\n/**\n * The id of the indeterminate interval.\n * @type {?}\n */\nMatProgressSpinner.prototype._interdeterminateInterval;\n/**\n * The SVG <path> node that is used to draw the circle.\n * @type {?}\n */\nMatProgressSpinner.prototype._path;\n/** @type {?} */\nMatProgressSpinner.prototype._mode;\n/** @type {?} */\nMatProgressSpinner.prototype._value;\n/**\n * Stroke width of the progress spinner. By default uses 10px as stroke width.\n * @type {?}\n */\nMatProgressSpinner.prototype.strokeWidth;\n/** @type {?} */\nMatProgressSpinner.prototype._ngZone;\n}\n\n/**\n * <mat-spinner> component.\n * \n * This is a component definition to be used as a convenience reference to create an\n * indeterminate <mat-progress-spinner> instance.\n */\nexport class MatSpinner extends MatProgressSpinner {\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} renderer\n */\nconstructor(elementRef: ElementRef, ngZone: NgZone, renderer: Renderer2) {\n    super(renderer, elementRef, ngZone);\n    this.mode = 'indeterminate';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: Renderer2, },\n];\n}\n\nfunction MatSpinner_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSpinner.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSpinner.ctorParameters;\n}\n\n/**\n * Clamps a value to be between 0 and 100.\n * @param {?} v\n * @return {?}\n */\nfunction clamp(v: number) {\n  return Math.max(0, Math.min(100, v));\n}\n/**\n * Converts Polar coordinates to Cartesian.\n * @param {?} radius\n * @param {?} pathRadius\n * @param {?} angleInDegrees\n * @return {?}\n */\nfunction polarToCartesian(radius: number, pathRadius: number, angleInDegrees: number) {\n  let /** @type {?} */ angleInRadians = (angleInDegrees - 90) * DEGREE_IN_RADIANS;\n\n  return (radius + (pathRadius * Math.cos(angleInRadians))) +\n    ',' + (radius + (pathRadius * Math.sin(angleInRadians)));\n}\n/**\n * Easing function for linear animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction linearEase(currentTime: number, startValue: number,\n                    changeInValue: number, duration: number) {\n  return changeInValue * currentTime / duration + startValue;\n}\n/**\n * Easing function to match material design indeterminate animation.\n * @param {?} currentTime\n * @param {?} startValue\n * @param {?} changeInValue\n * @param {?} duration\n * @return {?}\n */\nfunction materialEase(currentTime: number, startValue: number,\n                      changeInValue: number, duration: number) {\n  let /** @type {?} */ time = currentTime / duration;\n  let /** @type {?} */ timeCubed = Math.pow(time, 3);\n  let /** @type {?} */ timeQuad = Math.pow(time, 4);\n  let /** @type {?} */ timeQuint = Math.pow(time, 5);\n  return startValue + changeInValue * ((6 * timeQuint) + (-15 * timeQuad) + (10 * timeCubed));\n}\n/**\n * Determines the path value to define the arc.  Converting percentage values to to polar\n * coordinates on the circle, and then to cartesian coordinates in the viewport.\n * \n * @param {?} currentValue The current percentage value of the progress circle, the percentage of the\n *    circle to fill.\n * @param {?} rotation The starting point of the circle with 0 being the 0 degree point.\n * @param {?} strokeWidth Stroke width of the progress spinner arc.\n * @return {?} A string for an SVG path representing a circle filled from the starting point to the\n *    percentage value provided.\n */\nfunction getSvgArc(currentValue: number, rotation: number, strokeWidth: number): string {\n  let /** @type {?} */ startPoint = rotation || 0;\n  let /** @type {?} */ radius = 50;\n  let /** @type {?} */ pathRadius = radius - strokeWidth;\n\n  let /** @type {?} */ startAngle = startPoint * MAX_ANGLE;\n  let /** @type {?} */ endAngle = currentValue * MAX_ANGLE;\n  let /** @type {?} */ start = polarToCartesian(radius, pathRadius, startAngle);\n  let /** @type {?} */ end = polarToCartesian(radius, pathRadius, endAngle + startAngle);\n  let /** @type {?} */ arcSweep = endAngle < 0 ? 0 : 1;\n  let /** @type {?} */ largeArcFlag: number;\n\n  if (endAngle < 0) {\n    largeArcFlag = endAngle >= -180 ? 0 : 1;\n  } else {\n    largeArcFlag = endAngle <= 180 ? 0 : 1;\n  }\n\n  return `M${start}A${pathRadius},${pathRadius} 0 ${largeArcFlag},${arcSweep} ${end}`;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleRef,\n  UniqueSelectionDispatcher,\n} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n// Increasing integer for generating unique ids for radio components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * \\@docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n/**\n * Change event object emitted by MatRadio and MatRadioGroup.\n */\nexport class MatRadioChange {\n/**\n * The MatRadioButton that emits the change event.\n */\nsource: MatRadioButton | null;\n/**\n * The value of the MatRadioButton.\n */\nvalue: any;\n}\n\nfunction MatRadioChange_tsickle_Closure_declarations() {\n/**\n * The MatRadioButton that emits the change event.\n * @type {?}\n */\nMatRadioChange.prototype.source;\n/**\n * The value of the MatRadioButton.\n * @type {?}\n */\nMatRadioChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatRadioGroupBase { }\nexport const /** @type {?} */ _MatRadioGroupMixinBase = mixinDisabled(MatRadioGroupBase);\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n */\nprivate _name: string = `mat-radio-group-${nextUniqueId++}`;\n/**\n * The currently selected radio button. Should match value.\n */\nprivate _selected: MatRadioButton | null = null;\n/**\n * Whether the `value` has been set to its initial value.\n */\nprivate _isInitialized: boolean = false;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n */\nprivate _labelPosition: 'before' | 'after' = 'after';\n/**\n * Whether the radio group is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Whether the radio group is required.\n */\nprivate _required: boolean = false;\n/**\n * The method to be called in order to update ngModel\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n */\nonTouched: () => any = () => {};\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n/**\n * Child radio buttons.\n */\n_radios: QueryList<MatRadioButton>;\n/**\n * Name of the radio button group. All radio buttons inside this group will use this name.\n * @return {?}\n */\nget name(): string { return this._name; }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n/**\n * Alignment of the radio-buttons relative to their labels. Can be 'before' or 'after'.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @return {?}\n */\nget labelPosition() {\n    return this._labelPosition;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset labelPosition(v) {\n    this._labelPosition = (v == 'before') ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n/**\n * Value of the radio button.\n * @return {?}\n */\nget value(): any { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n/**\n * @return {?}\n */\n_checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n/**\n * Whether the radio button is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n/**\n * Whether the radio group is disabled\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * Whether the radio group is required\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * Initialize properties once content children are available.\n * This allows us to propagate relevant attributes to associated buttons.\n * @return {?}\n */\nngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n/**\n * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n * radio buttons upon their blur.\n * @return {?}\n */\n_touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n/**\n * Updates the `selected` radio button from the internal _value state.\n * @return {?}\n */\nprivate _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._radios != null && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value == radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    if (this._isInitialized) {\n      const /** @type {?} */ event = new MatRadioChange();\n      event.source = this._selected;\n      event.value = this._value;\n      this.change.emit(event);\n    }\n  }\n/**\n * @return {?}\n */\n_markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback to be triggered when the model value changes.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control is touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be registered.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the control should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-radio-group',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'change': [{ type: Output },],\n'_radios': [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), ] },],\n'name': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n};\n}\n\nfunction MatRadioGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRadioGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRadioGroup.ctorParameters;\n/** @type {?} */\nMatRadioGroup.propDecorators;\n/**\n * Selected value for group. Should equal the value of the selected radio button if there *is*\n * a corresponding radio button with a matching value. If there is *not* such a corresponding\n * radio button, this value persists to be applied in case a new radio button is added with a\n * matching value.\n * @type {?}\n */\nMatRadioGroup.prototype._value;\n/**\n * The HTML name attribute applied to radio buttons in this group.\n * @type {?}\n */\nMatRadioGroup.prototype._name;\n/**\n * The currently selected radio button. Should match value.\n * @type {?}\n */\nMatRadioGroup.prototype._selected;\n/**\n * Whether the `value` has been set to its initial value.\n * @type {?}\n */\nMatRadioGroup.prototype._isInitialized;\n/**\n * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\n * @type {?}\n */\nMatRadioGroup.prototype._labelPosition;\n/**\n * Whether the radio group is disabled.\n * @type {?}\n */\nMatRadioGroup.prototype._disabled;\n/**\n * Whether the radio group is required.\n * @type {?}\n */\nMatRadioGroup.prototype._required;\n/**\n * The method to be called in order to update ngModel\n * @type {?}\n */\nMatRadioGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * \\@docs-private\n * @type {?}\n */\nMatRadioGroup.prototype.onTouched;\n/**\n * Event emitted when the group value changes.\n * Change events are only emitted when the value changes due to user interaction with\n * a radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMatRadioGroup.prototype.change;\n/**\n * Child radio buttons.\n * @type {?}\n */\nMatRadioGroup.prototype._radios;\n/** @type {?} */\nMatRadioGroup.prototype._changeDetector;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatRadioButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatRadioButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRadioButtonBase.prototype._renderer;\n/** @type {?} */\nMatRadioButtonBase.prototype._elementRef;\n}\n\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const /** @type {?} */ _MatRadioButtonMixinBase =\n    mixinColor(mixinDisableRipple(MatRadioButtonBase), 'accent');\n/**\n * A radio-button. May be inside of\n */\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple {\nprivate _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n/**\n * The unique ID for the radio button.\n */\nid: string = this._uniqueId;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n */\nariaLabel: string;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n */\nariaLabelledby: string;\n/**\n * Whether this radio button is checked.\n * @return {?}\n */\nget checked(): boolean {\n    return this._checked;\n  }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._checked != newCheckedState) {\n      this._checked = newCheckedState;\n\n      if (newCheckedState && this.radioGroup && this.radioGroup.value != this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value == this.value) {\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n/**\n * The value of this radio button.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      this._value = value;\n      if (this.radioGroup != null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value == value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n/**\n * Whether or not the radio-button should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\nprivate _labelPosition: 'before' | 'after';\n/**\n * Whether the label should appear after or before the radio button. Defaults to 'after'\n * @return {?}\n */\nget labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset labelPosition(value) {\n    this._labelPosition = value;\n  }\n/**\n * Whether the radio button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Whether the radio button is required.\n * @return {?}\n */\nget required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n */\nchange: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n/**\n * The parent radio group. May or may not be present.\n */\nradioGroup: MatRadioGroup;\n/**\n * ID of the native input element inside `<mat-radio-button>`\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\n/**\n * Whether this radio is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Whether this radio is disabled.\n */\nprivate _disabled: boolean;\n/**\n * Whether this radio is required.\n */\nprivate _required: boolean;\n/**\n * Value assigned to this radio.\n */\nprivate _value: any = null;\n/**\n * The child ripple instance.\n */\n_ripple: MatRipple;\n/**\n * Reference to the current focus ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * Unregister function for _radioDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * The native `<input type=radio>` element\n */\n_inputElement: ElementRef;\n/**\n * @param {?} radioGroup\n * @param {?} elementRef\n * @param {?} renderer\n * @param {?} _changeDetector\n * @param {?} _focusMonitor\n * @param {?} _radioDispatcher\n */\nconstructor( radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              renderer: Renderer2,\nprivate _changeDetector: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _radioDispatcher: UniqueSelectionDispatcher) {\n    super(renderer, elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id != this.id && name == this.name) {\n          this.checked = false;\n        }\n      });\n  }\n/**\n * Focuses the radio button.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * Marks the radio button as needing checking for change detection.\n * This method is exposed because the parent radio group will directly\n * update bound properties of the radio button.\n * @return {?}\n */\n_markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    const /** @type {?} */ event = new MatRadioChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Triggered when the radio button received a click or the input recognized any change.\n * Clicking on a label element, will trigger a change event on the associated input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const /** @type {?} */ groupValueChanged = this.radioGroup && this.value != this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      if (this.radioGroup) {\n        this.radioGroup._touch();\n      }\n\n      if (this._focusRipple) {\n        this._focusRipple.fadeOut();\n        this._focusRipple = null;\n      }\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatRadioGroup, decorators: [{ type: Optional }, ]},\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'disabled': [{ type: Input },],\n'required': [{ type: Input },],\n'change': [{ type: Output },],\n'_ripple': [{ type: ViewChild, args: [MatRipple, ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\nfunction MatRadioButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRadioButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRadioButton.ctorParameters;\n/** @type {?} */\nMatRadioButton.propDecorators;\n/** @type {?} */\nMatRadioButton.prototype._uniqueId;\n/**\n * The unique ID for the radio button.\n * @type {?}\n */\nMatRadioButton.prototype.id;\n/**\n * Analog to HTML 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMatRadioButton.prototype.name;\n/**\n * Used to set the 'aria-label' attribute on the underlying input element.\n * @type {?}\n */\nMatRadioButton.prototype.ariaLabel;\n/**\n * The 'aria-labelledby' attribute takes precedence as the element's text alternative.\n * @type {?}\n */\nMatRadioButton.prototype.ariaLabelledby;\n/** @type {?} */\nMatRadioButton.prototype._labelPosition;\n/**\n * Event emitted when the checked state of this radio button changes.\n * Change events are only emitted when the value changes due to user interaction with\n * the radio button (the same behavior as `<input type-\"radio\">`).\n * @type {?}\n */\nMatRadioButton.prototype.change;\n/**\n * The parent radio group. May or may not be present.\n * @type {?}\n */\nMatRadioButton.prototype.radioGroup;\n/**\n * Whether this radio is checked.\n * @type {?}\n */\nMatRadioButton.prototype._checked;\n/**\n * Whether this radio is disabled.\n * @type {?}\n */\nMatRadioButton.prototype._disabled;\n/**\n * Whether this radio is required.\n * @type {?}\n */\nMatRadioButton.prototype._required;\n/**\n * Value assigned to this radio.\n * @type {?}\n */\nMatRadioButton.prototype._value;\n/**\n * The child ripple instance.\n * @type {?}\n */\nMatRadioButton.prototype._ripple;\n/**\n * Reference to the current focus ripple.\n * @type {?}\n */\nMatRadioButton.prototype._focusRipple;\n/**\n * Unregister function for _radioDispatcher *\n * @type {?}\n */\nMatRadioButton.prototype._removeUniqueSelectionListener;\n/**\n * The native `<input type=radio>` element\n * @type {?}\n */\nMatRadioButton.prototype._inputElement;\n/** @type {?} */\nMatRadioButton.prototype._changeDetector;\n/** @type {?} */\nMatRadioButton.prototype._focusMonitor;\n/** @type {?} */\nMatRadioButton.prototype._radioDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {VIEWPORT_RULER_PROVIDER} from '@angular/cdk/overlay';\nimport {\n  MatRippleModule,\n  MatCommonModule,\n  UNIQUE_SELECTION_DISPATCHER_PROVIDER,\n} from '@angular/material/core';\nimport {MatRadioGroup, MatRadioButton} from './radio';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MatRadioModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MatRippleModule, MatCommonModule, A11yModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER, VIEWPORT_RULER_PROVIDER],\n  declarations: [MatRadioGroup, MatRadioButton],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRadioModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRadioModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRadioModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatRadioModule,MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,MatRadioChange,MatRadioGroupBase,_MatRadioGroupMixinBase,MatRadioGroup,MatRadioButtonBase,_MatRadioButtonMixinBase,MatRadioButton} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  VerticalConnectionPos,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, RxChain} from '@angular/cdk/rxjs';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n/**\n * Injection token that determines the scroll handling while the menu is open.\n */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_MENU_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n */\nexport const MENU_PANEL_TOP_PADDING = 8;\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nexport class MatMenuTrigger implements AfterViewInit, OnDestroy {\nprivate _portal: TemplatePortal<any>;\nprivate _overlayRef: OverlayRef | null = null;\nprivate _menuOpen: boolean = false;\nprivate _closeSubscription = Subscription.EMPTY;\nprivate _positionSubscription = Subscription.EMPTY;\nprivate _hoverSubscription = Subscription.EMPTY;\nprivate _openedByMouse: boolean = false;\n/**\n * @deprecated\n * @return {?}\n */\nget _deprecatedMatMenuTriggerFor(): MatMenuPanel {\n    return this.menu;\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n/**\n * References the menu instance that the trigger is associated with.\n */\nmenu: MatMenuPanel;\n/**\n * Event emitted when the associated menu is opened.\n */\nonMenuOpen = new EventEmitter<void>();\n/**\n * Event emitted when the associated menu is closed.\n */\nonMenuClose = new EventEmitter<void>();\n/**\n * @param {?} _overlay\n * @param {?} _element\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _parentMenu\n * @param {?} _menuItemInstance\n * @param {?} _dir\n */\nconstructor(private _overlay: Overlay,\nprivate _element: ElementRef,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _parentMenu: MatMenu,\nprivate _menuItemInstance: MatMenuItem,\nprivate _dir: Directionality) {\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._checkMenu();\n\n    this.menu.close.subscribe(reason => {\n      this.closeMenu();\n\n      // If a click closed the menu, we should close the entire chain of nested menus.\n      if (reason === 'click' && this._parentMenu) {\n        this._parentMenu.close.emit(reason);\n      }\n    });\n\n    if (this.triggersSubmenu()) {\n      // Subscribe to changes in the hovered item in order to toggle the panel.\n      this._hoverSubscription = filter\n          .call(this._parentMenu.hover(), active => active === this._menuItemInstance)\n          .subscribe(() => {\n            this._openedByMouse = true;\n            this.openMenu();\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._cleanUpSubscriptions();\n  }\n/**\n * Whether the menu is open.\n * @return {?}\n */\nget menuOpen(): boolean {\n    return this._menuOpen;\n  }\n/**\n * The text direction of the containing app.\n * @return {?}\n */\nget dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n/**\n * Whether the menu triggers a sub-menu or a top-level one.\n * @return {?}\n */\ntriggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n/**\n * Toggles the menu between the open and closed states.\n * @return {?}\n */\ntoggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n/**\n * Opens the menu.\n * @return {?}\n */\nopenMenu(): void {\n    if (!this._menuOpen) {\n      this._createOverlay().attach(this._portal);\n      this._closeSubscription = this._menuClosingActions().subscribe(() => this.menu.close.emit());\n      this._initMenu();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._startAnimation();\n      }\n    }\n  }\n/**\n * Closes the menu.\n * @return {?}\n */\ncloseMenu(): void {\n    if (this._overlayRef && this.menuOpen) {\n      this._resetMenu();\n      this._overlayRef.detach();\n      this._closeSubscription.unsubscribe();\n      this.menu.close.emit();\n\n      if (this.menu instanceof MatMenu) {\n        this.menu._resetAnimation();\n      }\n    }\n  }\n/**\n * Focuses the menu trigger.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * This method sets the menu state to open and focuses the first item if\n * the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n\n    // Should only set focus if opened via the keyboard, so keyboard users can\n    // can easily navigate menu items. According to spec, mouse users should not\n    // see the focus style.\n    if (!this._openedByMouse) {\n      this.menu.focusFirstItem();\n    }\n  }\n/**\n * Updates the menu elevation based on the amount of parent menus that it has.\n * @return {?}\n */\nprivate _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let /** @type {?} */ depth = 0;\n      let /** @type {?} */ parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n/**\n * This method resets the menu when it's closed, most importantly restoring\n * focus to the menu trigger if the menu was opened via the keyboard.\n * @return {?}\n */\nprivate _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // Focus only needs to be reset to the host element if the menu was opened\n    // by the keyboard and manually shifted to the first menu item.\n    if (!this._openedByMouse) {\n      this.focus();\n    }\n\n    this._openedByMouse = false;\n  }\n/**\n * @param {?} isOpen\n * @return {?}\n */\nprivate _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.onMenuOpen.emit() : this.onMenuClose.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n/**\n * This method checks that a valid instance of MatMenu has been passed into\n * matMenuTriggerFor. If not, an exception is thrown.\n * @return {?}\n */\nprivate _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n/**\n * This method creates the overlay from the provided menu's template and saves its\n * OverlayRef so that it can be attached to the DOM when openMenu is called.\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n      const /** @type {?} */ config = this._getOverlayConfig();\n      this._subscribeToPositions( /** @type {?} */((config.positionStrategy as ConnectedPositionStrategy)));\n      this._overlayRef = this._overlay.create(config);\n    }\n\n    return this._overlayRef;\n  }\n/**\n * This method builds the configuration object needed to create the overlay, the OverlayState.\n * @return {?} OverlayConfig\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getPosition(),\n      hasBackdrop: !this.triggersSubmenu(),\n      backdropClass: 'cdk-overlay-transparent-backdrop',\n      direction: this.dir,\n      scrollStrategy: this._scrollStrategy()\n    });\n  }\n/**\n * Listens to changes in the position of the overlay and sets the correct classes\n * on the menu based on the new position. This ensures the animation origin is always\n * correct, even if a fallback position is used for the overlay.\n * @param {?} position\n * @return {?}\n */\nprivate _subscribeToPositions(position: ConnectedPositionStrategy): void {\n    this._positionSubscription = position.onPositionChange.subscribe(change => {\n      const /** @type {?} */ posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n      const /** @type {?} */ posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n      this.menu.setPositionClasses(posX, posY);\n    });\n  }\n/**\n * This method builds the position strategy for the overlay, so the menu is properly connected\n * to the trigger.\n * @return {?} ConnectedPositionStrategy\n */\nprivate _getPosition(): ConnectedPositionStrategy {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let /** @type {?} */ offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n\n      // TODO(crisbeto): this should be a function, once the overlay supports it.\n      // Right now it will be wrong for the fallback positions.\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    return this._overlay.position()\n        .connectedTo(this._element, {originX, originY}, {overlayX, overlayY})\n        .withDirection(this.dir)\n        .withOffsetY(offsetY)\n        .withFallbackPosition(\n            {originX: originFallbackX, originY},\n            {overlayX: overlayFallbackX, overlayY})\n        .withFallbackPosition(\n            {originX, originY: originFallbackY},\n            {overlayX, overlayY: overlayFallbackY})\n        .withFallbackPosition(\n            {originX: originFallbackX, originY: originFallbackY},\n            {overlayX: overlayFallbackX, overlayY: overlayFallbackY});\n  }\n/**\n * Cleans up the active subscriptions.\n * @return {?}\n */\nprivate _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._positionSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n/**\n * Returns a stream that emits whenever an action that should close the menu occurs.\n * @return {?}\n */\nprivate _menuClosingActions() {\n    const /** @type {?} */ backdrop = /** @type {?} */(( this._overlayRef)).backdropClick();\n    const /** @type {?} */ parentClose = this._parentMenu ? this._parentMenu.close : observableOf(null);\n    const /** @type {?} */ hover = this._parentMenu ? RxChain.from(this._parentMenu.hover())\n        .call(filter, active => active !== this._menuItemInstance)\n        .call(filter, () => this._menuOpen)\n        .result() : observableOf(null);\n\n    return merge(backdrop, parentClose, hover);\n  }\n/**\n * Handles mouse presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      this._openedByMouse = true;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * Handles key presses on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n/**\n * Handles click events on the trigger.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: ElementRef, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY, ] }, ]},\n{type: MatMenu, decorators: [{ type: Optional }, ]},\n{type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_deprecatedMatMenuTriggerFor': [{ type: Input, args: ['mat-menu-trigger-for', ] },],\n'menu': [{ type: Input, args: ['matMenuTriggerFor', ] },],\n'onMenuOpen': [{ type: Output },],\n'onMenuClose': [{ type: Output },],\n};\n}\n\nfunction MatMenuTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMenuTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMenuTrigger.ctorParameters;\n/** @type {?} */\nMatMenuTrigger.propDecorators;\n/** @type {?} */\nMatMenuTrigger.prototype._portal;\n/** @type {?} */\nMatMenuTrigger.prototype._overlayRef;\n/** @type {?} */\nMatMenuTrigger.prototype._menuOpen;\n/** @type {?} */\nMatMenuTrigger.prototype._closeSubscription;\n/** @type {?} */\nMatMenuTrigger.prototype._positionSubscription;\n/** @type {?} */\nMatMenuTrigger.prototype._hoverSubscription;\n/** @type {?} */\nMatMenuTrigger.prototype._openedByMouse;\n/**\n * References the menu instance that the trigger is associated with.\n * @type {?}\n */\nMatMenuTrigger.prototype.menu;\n/**\n * Event emitted when the associated menu is opened.\n * @type {?}\n */\nMatMenuTrigger.prototype.onMenuOpen;\n/**\n * Event emitted when the associated menu is closed.\n * @type {?}\n */\nMatMenuTrigger.prototype.onMenuClose;\n/** @type {?} */\nMatMenuTrigger.prototype._overlay;\n/** @type {?} */\nMatMenuTrigger.prototype._element;\n/** @type {?} */\nMatMenuTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMatMenuTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMatMenuTrigger.prototype._parentMenu;\n/** @type {?} */\nMatMenuTrigger.prototype._menuItemInstance;\n/** @type {?} */\nMatMenuTrigger.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatMenu, MAT_MENU_DEFAULT_OPTIONS} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY_PROVIDER} from './menu-trigger';\nimport {MatRippleModule} from '@angular/material/core';\nexport class MatMenuModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    OverlayModule,\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger],\n  providers: [\n    MAT_MENU_SCROLL_STRATEGY_PROVIDER,\n    {\n      provide: MAT_MENU_DEFAULT_OPTIONS,\n      useValue: {\n        overlapTrigger: true,\n        xPosition: 'after',\n        yPosition: 'below',\n      },\n    }\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatMenuModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMenuModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMenuModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n/**\n * This animation transforms the select's overlay panel on and off the page.\n * \n * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n * side to ensure the option text correctly overlaps the trigger text.\n * \n * When the panel is removed from the DOM, it simply fades out linearly.\n */\nexport const transformPanel: AnimationTriggerMetadata = trigger('transformPanel', [\n  state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })),\n  state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })),\n  transition('void => *', [\n    style({\n      opacity: 0,\n      minWidth: '100%',\n      transform: 'scaleY(0)'\n    }),\n    animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n  ]),\n  transition('* => void', [\n    animate('250ms 100ms linear', style({opacity: 0}))\n  ])\n]);\n/**\n * This animation fades in the background color and text content of the\n * select's options. It is time delayed to occur 100ms after the overlay\n * panel has transformed in.\n */\nexport const fadeInContent: AnimationTriggerMetadata = trigger('fadeInContent', [\n  state('showing', style({opacity: 1})),\n  transition('void => showing', [\n    style({opacity: 0}),\n    animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Cannot assign truthy non-array value to select in `multiple` mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('Cannot assign a non-function value to `compareWith`.');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {DOWN_ARROW, END, ENTER, HOME, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedOverlayDirective,\n  Overlay,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n  ViewportRuler,\n} from '@angular/cdk/overlay';\nimport {filter, first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanDisable,\n  HasTabIndex,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInContent, transformPanel} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n */\nexport const SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n * \n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 20px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 20;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nexport class MatSelectChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MatSelect,\npublic value: any) { }\n}\n\nfunction MatSelectChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectChange.prototype.source;\n/** @type {?} */\nMatSelectChange.prototype.value;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatSelectBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatSelectBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectBase.prototype._renderer;\n/** @type {?} */\nMatSelectBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatSelectMixinBase = mixinTabIndex(mixinDisabled(MatSelectBase));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nexport class MatSelectTrigger {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-select-trigger'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSelectTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelectTrigger.ctorParameters;\n}\n\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnDestroy, OnInit,\n    ControlValueAccessor, CanDisable, HasTabIndex, MatFormFieldControl<any> {\n/**\n * Whether or not the overlay panel is open.\n */\nprivate _panelOpen = false;\n/**\n * Subscriptions to option events.\n */\nprivate _optionSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the option list.\n */\nprivate _changeSubscription = Subscription.EMPTY;\n/**\n * Subscription to tab events while overlay is focused.\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Whether filling out the select is required in the form.\n */\nprivate _required: boolean = false;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n */\nprivate _scrollTop = 0;\n/**\n * The placeholder displayed in the trigger of the select.\n */\nprivate _placeholder: string;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * Unique id for this input.\n */\nprivate _uid = `mat-select-${nextUniqueId++}`;\n/**\n * The last measured value for the trigger's client bounding rect.\n */\n_triggerRect: ClientRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * The cached font-size of the trigger element.\n */\n_triggerFontSize = 0;\n/**\n * Deals with the selection logic.\n */\n_selectionModel: SelectionModel<MatOption>;\n/**\n * Manages keyboard events for options in the panel.\n */\n_keyManager: FocusKeyManager<MatOption>;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when select has been touched\n */\n_onTouched = () => {};\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n */\n_optionIds: string = '';\n/**\n * The value of the select panel's transform-origin property.\n */\n_transformOrigin: string = 'top';\n/**\n * Whether the panel's animation is done.\n */\n_panelDoneAnimating: boolean = false;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n */\n_scrollStrategy = this._scrollStrategyFactory();\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n */\n_offsetY = 0;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n */\n_positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping\n * `MatFormField` needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * Whether the select is focused.\n */\nfocused = false;\n/**\n * A name for this control that can be used by `mat-form-field`.\n */\ncontrolType = 'mat-select';\n/**\n * Trigger that opens the select.\n */\ntrigger: ElementRef;\n/**\n * Overlay pane containing the options.\n */\noverlayDir: ConnectedOverlayDirective;\n/**\n * All of the defined select options.\n */\noptions: QueryList<MatOption>;\n/**\n * All of the defined groups of options.\n */\noptionGroups: QueryList<MatOptgroup>;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n */\npanelClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * User-supplied override of the trigger element.\n */\ncustomTrigger: MatSelectTrigger;\n/**\n * Placeholder to be shown if no value has been selected.\n * @return {?}\n */\nget placeholder() { return this._placeholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n/**\n * Whether the component is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n/**\n * Whether the user should be allowed to select multiple options.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Value of the select control.\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\nprivate _value: any;\n/**\n * Whether ripples for all options in the select are disabled.\n * @return {?}\n */\nget disableRipple(): boolean { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = coerceBooleanProperty(value);\n    this._setOptionDisableRipple();\n  }\nprivate _disableRipple: boolean = false;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n */\nariaLabel: string = '';\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n */\nariaLabelledby: string = '';\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\nprivate _id: string;\n/**\n * Combined stream of all of the child options' change events.\n * @return {?}\n */\nget optionSelectionChanges(): Observable<MatOptionSelectionChange> {\n    return merge(...this.options.map(option => option.onSelectionChange));\n  }\n/**\n * Event emitted when the select has been opened.\n */\nonOpen: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the select has been closed.\n */\nonClose: EventEmitter<void> = new EventEmitter<void>();\n/**\n * Event emitted when the selected value has been changed by the user.\n */\nchange: EventEmitter<MatSelectChange> = new EventEmitter<MatSelectChange>();\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * @param {?} _viewportRuler\n * @param {?} _changeDetectorRef\n * @param {?} _ngZone\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n * @param {?} tabIndex\n * @param {?} _scrollStrategyFactory\n */\nconstructor(\nprivate _viewportRuler: ViewportRuler,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _ngZone: NgZone,\n    renderer: Renderer2,\n    elementRef: ElementRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl,\n     tabIndex: string,\nprivate _scrollStrategyFactory) {\n\n    super(renderer, elementRef);\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._initKeyManager();\n\n    this._changeSubscription = startWith.call(this.options.changes, null).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._dropSubscriptions();\n    this._changeSubscription.unsubscribe();\n    this._tabSubscription.unsubscribe();\n  }\n/**\n * Toggles the overlay panel open or closed.\n * @return {?}\n */\ntoggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n/**\n * Opens the overlay panel.\n * @return {?}\n */\nopen(): void {\n    if (this.disabled || !this.options.length) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n    this._calculateOverlayPosition();\n    this._panelOpen = true;\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    first.call(this._ngZone.onStable).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n/**\n * Closes the overlay panel and focuses the host element.\n * @return {?}\n */\nclose(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._changeDetectorRef.markForCheck();\n      this.focus();\n    }\n  }\n/**\n * Sets the select's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n/**\n * Saves a callback function to be invoked when the select's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the select is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n/**\n * Disables the select. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} isDisabled Sets whether the component is disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n/**\n * Whether or not the overlay panel is open.\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen;\n  }\n/**\n * The currently selected option.\n * @return {?}\n */\nget selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * The value displayed in the trigger.\n * @return {?}\n */\nget triggerValue(): string {\n    if (!this._selectionModel || this._selectionModel.isEmpty()) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const /** @type {?} */ selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n/**\n * Whether the element is in RTL mode.\n * @return {?}\n */\n_isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n/**\n * Handles the keyboard interactions of a closed select.\n * @param {?} event\n * @return {?}\n */\n_handleClosedKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      if (event.keyCode === ENTER || event.keyCode === SPACE) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n        this._handleArrowKey(event);\n      }\n    }\n  }\n/**\n * Handles keypresses inside the panel.\n * @param {?} event\n * @return {?}\n */\n_handlePanelKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === HOME || event.keyCode === END) {\n      event.preventDefault();\n      event.keyCode === HOME ? this._keyManager.setFirstItemActive() :\n                               this._keyManager.setLastItemActive();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * When the panel element is finished transforming in (though not fading in), it\n * emits an event and focuses an option if the panel is open.\n * @return {?}\n */\n_onPanelDone(): void {\n    if (this.panelOpen) {\n      this._focusCorrectOption();\n      this.onOpen.emit();\n    } else {\n      this.onClose.emit();\n      this._panelDoneAnimating = false;\n      this.overlayDir.offsetX = 0;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * When the panel content is done fading in, the _panelDoneAnimating property is\n * set so the proper class can be added to the panel.\n * @return {?}\n */\n_onFadeInDone(): void {\n    this._panelDoneAnimating = this.panelOpen;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @return {?}\n */\n_onFocus() {\n    if (!this.disabled) {\n      this.focused = true;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n * \"blur\" to the panel when it opens, causing a false positive.\n * @return {?}\n */\n_onBlur() {\n    if (!this.disabled && !this.panelOpen) {\n      this.focused = false;\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n/**\n * Callback that is invoked when the overlay panel has been attached.\n * @return {?}\n */\n_onAttached(): void {\n    this._calculateOverlayOffsetX();\n    this._setScrollTop();\n  }\n/**\n * Whether the select has a value.\n * @return {?}\n */\nget empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n/**\n * Whether the select is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n        (this._parentForm && this._parentForm.submitted);\n\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Sets the scroll position of the scroll container. This must be called after\n * the overlay pane is attached or the scroll container element will not yet be\n * present in the DOM.\n * @return {?}\n */\nprivate _setScrollTop(): void {\n    const /** @type {?} */ scrollContainer =\n        this.overlayDir.overlayRef.overlayElement.querySelector('.mat-select-panel'); /** @type {?} */((\n    scrollContainer)).scrollTop = this._scrollTop;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n/**\n * Sets the selected option based on a value. If no option can be\n * found with the designated value, the select trigger is cleared.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _setSelectionByValue(value: any | any[], isUserInput = false): void {\n    const /** @type {?} */ isArray = Array.isArray(value);\n\n    if (this.multiple && value && !isArray) {\n      throw getMatSelectNonArrayValueError();\n    }\n\n    this._clearSelection();\n\n    if (isArray) {\n      value.forEach((currentValue: any) => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingOption = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(this.options.toArray().indexOf(correspondingOption));\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Finds and selects and option based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Option that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput = false): MatOption | undefined {\n    const /** @type {?} */ correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch ( /** @type {?} */error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      isUserInput ? correspondingOption._selectViaInteraction() : correspondingOption.select();\n      this._selectionModel.select(correspondingOption);\n      this.stateChanges.next();\n    }\n\n    return correspondingOption;\n  }\n/**\n * Clears the select trigger and deselects every option in the list.\n * @param {?=} skip Option that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MatOption): void {\n    this._selectionModel.clear();\n    this.options.forEach(option => {\n      if (option !== skip) {\n        option.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n/**\n * Sets up a key manager to listen to keyboard events on the overlay panel.\n * @return {?}\n */\nprivate _initKeyManager() {\n    this._keyManager = new FocusKeyManager<MatOption>(this.options).withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close());\n  }\n/**\n * Drops current option subscriptions and IDs and resets from scratch.\n * @return {?}\n */\nprivate _resetOptions(): void {\n    this._dropSubscriptions();\n    this._listenToOptions();\n    this._setOptionIds();\n    this._setOptionMultiple();\n    this._setOptionDisableRipple();\n  }\n/**\n * Listens to user-generated selection events on each option.\n * @return {?}\n */\nprivate _listenToOptions(): void {\n    this._optionSubscription = filter.call(this.optionSelectionChanges,\n      event => event.isUserInput).subscribe(event => {\n        this._onSelect(event.source);\n\n        if (!this.multiple) {\n          this.close();\n        }\n      });\n  }\n/**\n * Invoked when an option is clicked.\n * @param {?} option\n * @return {?}\n */\nprivate _onSelect(option: MatOption): void {\n    const /** @type {?} */ wasSelected = this._selectionModel.isSelected(option);\n\n    // TODO(crisbeto): handle blank/null options inside multi-select.\n    if (this.multiple) {\n      this._selectionModel.toggle(option);\n      this.stateChanges.next();\n      wasSelected ? option.deselect() : option.select();\n      this._sortValues();\n    } else {\n      this._clearSelection(option.value == null ? undefined : option);\n\n      if (option.value == null) {\n        this._propagateChanges(option.value);\n      } else {\n        this._selectionModel.select(option);\n        this.stateChanges.next();\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.options.forEach(option => {\n        if (option.selected) {\n          this._selectionModel.select(option);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n/**\n * Unsubscribes from all option subscriptions.\n * @return {?}\n */\nprivate _dropSubscriptions(): void {\n    this._optionSubscription.unsubscribe();\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this._onChange(valueToEmit);\n    this.change.emit(new MatSelectChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Records option IDs to pass to the aria-owns property.\n * @return {?}\n */\nprivate _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n/**\n * Sets the `multiple` property on each option. The promise is necessary\n * in order to avoid Angular errors when modifying the property after init.\n * @return {?}\n */\nprivate _setOptionMultiple() {\n    if (this.multiple) {\n      Promise.resolve(null).then(() => {\n        this.options.forEach(option => option.multiple = this.multiple);\n      });\n    }\n  }\n/**\n * Sets the `disableRipple` property on each option.\n * @return {?}\n */\nprivate _setOptionDisableRipple() {\n    if (this.options) {\n      this.options.forEach(option => option.disableRipple = this.disableRipple);\n    }\n  }\n/**\n * Focuses the selected item. If no option is selected, it will focus\n * the first item instead.\n * @return {?}\n */\nprivate _focusCorrectOption(): void {\n    if (this._selectionModel.isEmpty()) {\n      this._keyManager.setFirstItemActive();\n    } else {\n      this._keyManager.setActiveItem( /** @type {?} */((this._getOptionIndex(this._selectionModel.selected[0]))));\n    }\n  }\n/**\n * Focuses the select element.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n/**\n * Gets the index of the provided option in the option list.\n * @param {?} option\n * @return {?}\n */\nprivate _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n/**\n * Calculates the scroll position and x- and y-offsets of the overlay panel.\n * @return {?}\n */\nprivate _calculateOverlayPosition(): void {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n\n    const /** @type {?} */ items = this._getItemCount();\n    const /** @type {?} */ panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const /** @type {?} */ maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let /** @type {?} */ selectedOptionOffset =\n        this.empty ? 0 : /** @type {?} */(( this._getOptionIndex(this._selectionModel.selected[0])));\n\n    selectedOptionOffset += MatOption.countGroupLabelsBeforeOption(selectedOptionOffset,\n        this.options, this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const /** @type {?} */ scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n/**\n * Calculates the scroll position of the select's overlay panel.\n * \n * Attempts to center the selected option in the panel. If the option is\n * too high or too low in the panel to be scrolled to the center, it clamps the\n * scroll position to the min or max scroll positions respectively.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\n_calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const /** @type {?} */ halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const /** @type {?} */ optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return clampValue(0, optimalScrollPosition, maxScroll);\n  }\n/**\n * Returns the aria-label of the select component.\n * @return {?}\n */\nget _ariaLabel(): string | null {\n    // If an ariaLabelledby value has been set, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n/**\n * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text when\n * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n * can't be calculated until the panel has been attached, because we need to know the\n * content width in order to constrain the panel within the viewport.\n * @return {?}\n */\nprivate _calculateOverlayOffsetX(): void {\n    const /** @type {?} */ overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n    const /** @type {?} */ isRtl = this._isRtl();\n    const /** @type {?} */ paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let /** @type {?} */ offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let /** @type {?} */ selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const /** @type {?} */ leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const /** @type {?} */ rightOverflow = overlayRect.right + offsetX - viewportRect.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors.\n    this.overlayDir.offsetX = offsetX;\n    this.overlayDir.overlayRef.updatePosition();\n  }\n/**\n * Calculates the y-offset of the select's overlay panel in relation to the\n * top start corner of the trigger. It has to be adjusted in order for the\n * selected option to be aligned over the trigger when the panel opens.\n * @param {?} selectedIndex\n * @param {?} scrollBuffer\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const /** @type {?} */ maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let /** @type {?} */ optionOffsetFromPanelTop: number;\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const /** @type {?} */ firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const /** @type {?} */ selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let /** @type {?} */ partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height\n    // difference, multiplied by -1 to ensure that the overlay moves in the correct\n    // direction up the page.\n    return optionOffsetFromPanelTop * -1 - optionHeightAdjustment;\n  }\n/**\n * Checks that the attempted overlay position will fit within the viewport.\n * If it will not fit, tries to adjust the scroll position and the associated\n * y-offset so the panel can open fully on-screen. If it still won't fit,\n * sets the offset back to 0 to allow the fallback position to take over.\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _checkOverlayWithinViewport(maxScroll: number): void {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ viewportRect = this._viewportRuler.getViewportRect();\n\n    const /** @type {?} */ topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const /** @type {?} */ bottomSpaceAvailable =\n        viewportRect.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const /** @type {?} */ panelHeightTop = Math.abs(this._offsetY);\n    const /** @type {?} */ totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const /** @type {?} */ panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n/**\n * Adjusts the overlay panel up to fit in the viewport.\n * @param {?} panelHeightBottom\n * @param {?} bottomSpaceAvailable\n * @return {?}\n */\nprivate _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const /** @type {?} */ distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n/**\n * Adjusts the overlay panel down to fit in the viewport.\n * @param {?} panelHeightTop\n * @param {?} topSpaceAvailable\n * @param {?} maxScroll\n * @return {?}\n */\nprivate _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const /** @type {?} */ distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n/**\n * Sets the transform origin point based on the selected option.\n * @return {?}\n */\nprivate _getOriginBasedOnOption(): string {\n    const /** @type {?} */ itemHeight = this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    const /** @type {?} */ optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const /** @type {?} */ originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n/**\n * Handles the user pressing the arrow keys on a closed select.\n * @param {?} event\n * @return {?}\n */\nprivate _handleArrowKey(event: KeyboardEvent): void {\n    if (this._multiple) {\n      event.preventDefault();\n      this.open();\n    } else {\n      const /** @type {?} */ prevActiveItem = this._keyManager.activeItem;\n\n      // Cycle though the select options even when the select is closed,\n      // matching the behavior of the native select element.\n      // TODO(crisbeto): native selects also cycle through the options with left/right arrows,\n      // however the key manager only supports up/down at the moment.\n      this._keyManager.onKeydown(event);\n\n      const /** @type {?} */ currentActiveItem = /** @type {?} */(( this._keyManager.activeItem as MatOption));\n\n      if (currentActiveItem !== prevActiveItem) {\n        this._clearSelection();\n        this._setSelectionByValue(currentActiveItem.value, true);\n        this._propagateChanges();\n      }\n    }\n  }\n/**\n * Calculates the amount of items in the select. This includes options and group labels.\n * @return {?}\n */\nprivate _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() {\n    this.focus();\n    this.open();\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat() { return this._panelOpen || !this.empty; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-select',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_ariaLabel',\n    '[attr.aria-labelledby]': 'ariaLabelledby',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': '_optionIds',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    'class': 'mat-select',\n    '(keydown)': '_handleClosedKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    transformPanel,\n    fadeInContent\n  ],\n  providers: [{provide: MatFormFieldControl, useExisting: MatSelect}],\n  exportAs: 'matSelect',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewportRuler, },\n{type: ChangeDetectorRef, },\n{type: NgZone, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Self }, { type: Optional }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['tabindex', ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: ViewChild, args: ['trigger', ] },],\n'overlayDir': [{ type: ViewChild, args: [ConnectedOverlayDirective, ] },],\n'options': [{ type: ContentChildren, args: [MatOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MatOptgroup, ] },],\n'panelClass': [{ type: Input },],\n'customTrigger': [{ type: ContentChild, args: [MatSelectTrigger, ] },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'disableRipple': [{ type: Input },],\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'onOpen': [{ type: Output },],\n'onClose': [{ type: Output },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n};\n}\n\nfunction MatSelect_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelect.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelect.ctorParameters;\n/** @type {?} */\nMatSelect.propDecorators;\n/**\n * Whether or not the overlay panel is open.\n * @type {?}\n */\nMatSelect.prototype._panelOpen;\n/**\n * Subscriptions to option events.\n * @type {?}\n */\nMatSelect.prototype._optionSubscription;\n/**\n * Subscription to changes in the option list.\n * @type {?}\n */\nMatSelect.prototype._changeSubscription;\n/**\n * Subscription to tab events while overlay is focused.\n * @type {?}\n */\nMatSelect.prototype._tabSubscription;\n/**\n * Whether filling out the select is required in the form.\n * @type {?}\n */\nMatSelect.prototype._required;\n/**\n * The scroll position of the overlay panel, calculated to center the selected option.\n * @type {?}\n */\nMatSelect.prototype._scrollTop;\n/**\n * The placeholder displayed in the trigger of the select.\n * @type {?}\n */\nMatSelect.prototype._placeholder;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMatSelect.prototype._multiple;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMatSelect.prototype._compareWith;\n/**\n * Unique id for this input.\n * @type {?}\n */\nMatSelect.prototype._uid;\n/**\n * The last measured value for the trigger's client bounding rect.\n * @type {?}\n */\nMatSelect.prototype._triggerRect;\n/**\n * The aria-describedby attribute on the select for improved a11y.\n * @type {?}\n */\nMatSelect.prototype._ariaDescribedby;\n/**\n * The cached font-size of the trigger element.\n * @type {?}\n */\nMatSelect.prototype._triggerFontSize;\n/**\n * Deals with the selection logic.\n * @type {?}\n */\nMatSelect.prototype._selectionModel;\n/**\n * Manages keyboard events for options in the panel.\n * @type {?}\n */\nMatSelect.prototype._keyManager;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMatSelect.prototype._onChange;\n/**\n * View -> model callback called when select has been touched\n * @type {?}\n */\nMatSelect.prototype._onTouched;\n/**\n * The IDs of child options to be passed to the aria-owns attribute.\n * @type {?}\n */\nMatSelect.prototype._optionIds;\n/**\n * The value of the select panel's transform-origin property.\n * @type {?}\n */\nMatSelect.prototype._transformOrigin;\n/**\n * Whether the panel's animation is done.\n * @type {?}\n */\nMatSelect.prototype._panelDoneAnimating;\n/**\n * Strategy that will be used to handle scrolling while the select panel is open.\n * @type {?}\n */\nMatSelect.prototype._scrollStrategy;\n/**\n * The y-offset of the overlay panel in relation to the trigger's top start corner.\n * This must be adjusted to align the selected option text over the trigger text.\n * when the panel opens. Will change based on the y-position of the selected option.\n * @type {?}\n */\nMatSelect.prototype._offsetY;\n/**\n * This position config ensures that the top \"start\" corner of the overlay\n * is aligned with with the top \"start\" of the origin by default (overlapping\n * the trigger completely). If the panel cannot fit below the trigger, it\n * will fall back to a position above the trigger.\n * @type {?}\n */\nMatSelect.prototype._positions;\n/**\n * Stream that emits whenever the state of the select changes such that the wrapping\n * `MatFormField` needs to run change detection.\n * @type {?}\n */\nMatSelect.prototype.stateChanges;\n/**\n * Whether the select is focused.\n * @type {?}\n */\nMatSelect.prototype.focused;\n/**\n * A name for this control that can be used by `mat-form-field`.\n * @type {?}\n */\nMatSelect.prototype.controlType;\n/**\n * Trigger that opens the select.\n * @type {?}\n */\nMatSelect.prototype.trigger;\n/**\n * Overlay pane containing the options.\n * @type {?}\n */\nMatSelect.prototype.overlayDir;\n/**\n * All of the defined select options.\n * @type {?}\n */\nMatSelect.prototype.options;\n/**\n * All of the defined groups of options.\n * @type {?}\n */\nMatSelect.prototype.optionGroups;\n/**\n * Classes to be passed to the select panel. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nMatSelect.prototype.panelClass;\n/**\n * User-supplied override of the trigger element.\n * @type {?}\n */\nMatSelect.prototype.customTrigger;\n/** @type {?} */\nMatSelect.prototype._value;\n/** @type {?} */\nMatSelect.prototype._disableRipple;\n/**\n * Aria label of the select. If not specified, the placeholder will be used as label.\n * @type {?}\n */\nMatSelect.prototype.ariaLabel;\n/**\n * Input that can be used to specify the `aria-labelledby` attribute.\n * @type {?}\n */\nMatSelect.prototype.ariaLabelledby;\n/** @type {?} */\nMatSelect.prototype._id;\n/**\n * Event emitted when the select has been opened.\n * @type {?}\n */\nMatSelect.prototype.onOpen;\n/**\n * Event emitted when the select has been closed.\n * @type {?}\n */\nMatSelect.prototype.onClose;\n/**\n * Event emitted when the selected value has been changed by the user.\n * @type {?}\n */\nMatSelect.prototype.change;\n/**\n * Event that emits whenever the raw value of the select changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMatSelect.prototype.valueChange;\n/** @type {?} */\nMatSelect.prototype._viewportRuler;\n/** @type {?} */\nMatSelect.prototype._changeDetectorRef;\n/** @type {?} */\nMatSelect.prototype._ngZone;\n/** @type {?} */\nMatSelect.prototype._dir;\n/** @type {?} */\nMatSelect.prototype._parentForm;\n/** @type {?} */\nMatSelect.prototype._parentFormGroup;\n/** @type {?} */\nMatSelect.prototype.ngControl;\n/** @type {?} */\nMatSelect.prototype._scrollStrategyFactory;\n}\n\n/**\n * Clamps a value n between min and max values.\n * @param {?} min\n * @param {?} n\n * @param {?} max\n * @return {?}\n */\nfunction clampValue(min: number, n: number, max: number): number {\n  return Math.min(Math.max(min, n), max);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatSelect, MatSelectTrigger, MAT_SELECT_SCROLL_STRATEGY_PROVIDER} from './select';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {OverlayModule} from '@angular/cdk/overlay';\nexport class MatSelectModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSelectModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelectModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSelectModule,SELECT_PANEL_MAX_HEIGHT,SELECT_PANEL_PADDING_X,SELECT_PANEL_INDENT_PADDING_X,SELECT_ITEM_HEIGHT_EM,SELECT_MULTIPLE_PANEL_PADDING_X,SELECT_PANEL_VIEWPORT_PADDING,MAT_SELECT_SCROLL_STRATEGY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_SELECT_SCROLL_STRATEGY_PROVIDER,MatSelectChange,MatSelectBase,_MatSelectMixinBase,MatSelectTrigger,MatSelect,transformPanel,fadeInContent} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  OverlayConfig,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n/**\n * Time in ms to delay before changing the tooltip visibility to hidden\n */\nexport const TOUCHEND_HIDE_DELAY = 1500;\n/**\n * Time in ms to throttle repositioning after scroll events.\n */\nexport const SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @param {?} position\n * @return {?}\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });\n}\n/**\n * \\@docs-private\n */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n * \n * https://material.google.com/components/tooltips.html\n */\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\nprivate _position: TooltipPosition = 'below';\nprivate _disabled: boolean = false;\nprivate _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * Allows the user to define the position of the tooltip relative to the parent element\n * @return {?}\n */\nget position(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      // TODO(andrewjs): When the overlay's position can be dynamically changed, do not destroy\n      // the tooltip.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    }\n  }\n/**\n * Disables the display of the tooltip.\n * @return {?}\n */\nget disabled(): boolean { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n/**\n * @deprecated\n * @return {?}\n */\nget _positionDeprecated(): TooltipPosition { return this._position; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _positionDeprecated(value: TooltipPosition) { this._position = value; }\n/**\n * The default delay in ms before showing the tooltip after show is called\n */\nshowDelay = 0;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n */\nhideDelay = 0;\nprivate _message = '';\n/**\n * The message to be displayed in the tooltip\n * @return {?}\n */\nget message() { return this._message; }\n/**\n * @param {?} value\n * @return {?}\n */\nset message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n    this._updateTooltipMessage();\n    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n  }\n/**\n * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n * @return {?}\n */\nget tooltipClass() { return this._tooltipClass; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\nprivate _enterListener: Function;\nprivate _leaveListener: Function;\n/**\n * @param {?} renderer\n * @param {?} _overlay\n * @param {?} _elementRef\n * @param {?} _scrollDispatcher\n * @param {?} _viewContainerRef\n * @param {?} _ngZone\n * @param {?} _platform\n * @param {?} _ariaDescriber\n * @param {?} _scrollStrategy\n * @param {?} _dir\n */\nconstructor(\n    renderer: Renderer2,\nprivate _overlay: Overlay,\nprivate _elementRef: ElementRef,\nprivate _scrollDispatcher: ScrollDispatcher,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _ngZone: NgZone,\nprivate _platform: Platform,\nprivate _ariaDescriber: AriaDescriber,\nprivate _scrollStrategy,\nprivate _dir: Directionality) {\n\n    // The mouse events shouldn't be bound on iOS devices, because\n    // they can prevent the first tap from firing its click event.\n    if (!_platform.IOS) {\n      this._enterListener =\n        renderer.listen(_elementRef.nativeElement, 'mouseenter', () => this.show());\n      this._leaveListener =\n        renderer.listen(_elementRef.nativeElement, 'mouseleave', () => this.hide());\n    }\n  }\n/**\n * Dispose the tooltip when destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    if (this._tooltipInstance) {\n      this._disposeTooltip();\n    }\n    // Clean up the event listeners set in the constructor\n    if (!this._platform.IOS) {\n      this._enterListener();\n      this._leaveListener();\n    }\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n  }\n/**\n * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nshow(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message) { return; }\n\n    if (!this._tooltipInstance) {\n      this._createTooltip();\n    }\n\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage(); /** @type {?} */((\n    this._tooltipInstance)).show(this._position, delay);\n  }\n/**\n * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n * @param {?=} delay\n * @return {?}\n */\nhide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n/**\n * Shows/hides the tooltip\n * @return {?}\n */\ntoggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n/**\n * Returns true if the tooltip is currently visible to the user\n * @return {?}\n */\n_isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n/**\n * Handles the keydown events on the host element.\n * @param {?} e\n * @return {?}\n */\n_handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n/**\n * Create the tooltip to display\n * @return {?}\n */\nprivate _createTooltip(): void {\n    let /** @type {?} */ overlayRef = this._createOverlay();\n    let /** @type {?} */ portal = new ComponentPortal(TooltipComponent, this._viewContainerRef);\n\n    this._tooltipInstance = overlayRef.attach(portal).instance; /** @type {?} */((\n\n    // Dispose the overlay when finished the shown tooltip.\n    this._tooltipInstance)).afterHidden().subscribe(() => {\n      // Check first if the tooltip has already been removed through this components destroy.\n      if (this._tooltipInstance) {\n        this._disposeTooltip();\n      }\n    });\n  }\n/**\n * Create the overlay config and position strategy\n * @return {?}\n */\nprivate _createOverlay(): OverlayRef {\n    const /** @type {?} */ origin = this._getOrigin();\n    const /** @type {?} */ position = this._getOverlayPosition();\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    // After position changes occur and the overlay is clipped by a parent scrollable then\n    // close the tooltip.\n    const /** @type {?} */ strategy = this._overlay.position().connectedTo(this._elementRef, origin, position);\n    strategy.withScrollableContainers(this._scrollDispatcher.getScrollContainers(this._elementRef));\n    strategy.onPositionChange.subscribe(change => {\n      if (change.scrollableViewProperties.isOverlayClipped &&\n          this._tooltipInstance && this._tooltipInstance.isVisible()) {\n        this.hide(0);\n      }\n    });\n\n    const /** @type {?} */ config = new OverlayConfig({\n      direction: this._dir ? this._dir.value : 'ltr',\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._overlayRef = this._overlay.create(config);\n\n    return this._overlayRef;\n  }\n/**\n * Disposes the current tooltip and the overlay it is attached to\n * @return {?}\n */\nprivate _disposeTooltip(): void {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._tooltipInstance = null;\n  }\n/**\n * Returns the origin position based on the user's position preference\n * @return {?}\n */\n_getOrigin(): OriginConnectionPosition {\n    if (this.position == 'above' || this.position == 'below') {\n      return {originX: 'center', originY: this.position == 'above' ? 'top' : 'bottom'};\n    }\n\n    const /** @type {?} */ isDirectionLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isDirectionLtr ||\n        this.position == 'after' && !isDirectionLtr) {\n      return {originX: 'start', originY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isDirectionLtr ||\n        this.position == 'before' && !isDirectionLtr) {\n      return {originX: 'end', originY: 'center'};\n    }\n\n    throw getMatTooltipInvalidPositionError(this.position);\n  }\n/**\n * Returns the overlay position based on the user's preference\n * @return {?}\n */\n_getOverlayPosition(): OverlayConnectionPosition {\n    if (this.position == 'above') {\n      return {overlayX: 'center', overlayY: 'bottom'};\n    }\n\n    if (this.position == 'below') {\n      return {overlayX: 'center', overlayY: 'top'};\n    }\n\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    if (this.position == 'left' ||\n        this.position == 'before' && isLtr ||\n        this.position == 'after' && !isLtr) {\n      return {overlayX: 'end', overlayY: 'center'};\n    }\n\n    if (this.position == 'right' ||\n        this.position == 'after' && isLtr ||\n        this.position == 'before' && !isLtr) {\n      return {overlayX: 'start', overlayY: 'center'};\n    }\n\n    throw getMatTooltipInvalidPositionError(this.position);\n  }\n/**\n * Updates the tooltip message and repositions the overlay according to the new message length\n * @return {?}\n */\nprivate _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      first.call(this._ngZone.onMicrotaskEmpty.asObservable()).subscribe(() => {\n        if (this._tooltipInstance) { /** @type {?} */((\n          this._overlayRef)).updatePosition();\n        }\n      });\n    }\n  }\n/**\n * Updates the tooltip class\n * @param {?} tooltipClass\n * @return {?}\n */\nprivate _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-tooltip], [matTooltip]',\n  host: {\n    '(longpress)': 'show()',\n    '(focus)': 'show()',\n    '(blur)': 'hide(0)',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': 'hide(' + TOUCHEND_HIDE_DELAY + ')',\n  },\n  exportAs: 'matTooltip',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: Overlay, },\n{type: ElementRef, },\n{type: ScrollDispatcher, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: Platform, },\n{type: AriaDescriber, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'position': [{ type: Input, args: ['matTooltipPosition', ] },],\n'disabled': [{ type: Input, args: ['matTooltipDisabled', ] },],\n'_positionDeprecated': [{ type: Input, args: ['tooltip-position', ] },],\n'showDelay': [{ type: Input, args: ['matTooltipShowDelay', ] },],\n'hideDelay': [{ type: Input, args: ['matTooltipHideDelay', ] },],\n'message': [{ type: Input, args: ['matTooltip', ] },],\n'tooltipClass': [{ type: Input, args: ['matTooltipClass', ] },],\n};\n}\n\nfunction MatTooltip_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTooltip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTooltip.ctorParameters;\n/** @type {?} */\nMatTooltip.propDecorators;\n/** @type {?} */\nMatTooltip.prototype._overlayRef;\n/** @type {?} */\nMatTooltip.prototype._tooltipInstance;\n/** @type {?} */\nMatTooltip.prototype._position;\n/** @type {?} */\nMatTooltip.prototype._disabled;\n/** @type {?} */\nMatTooltip.prototype._tooltipClass;\n/**\n * The default delay in ms before showing the tooltip after show is called\n * @type {?}\n */\nMatTooltip.prototype.showDelay;\n/**\n * The default delay in ms before hiding the tooltip after hide is called\n * @type {?}\n */\nMatTooltip.prototype.hideDelay;\n/** @type {?} */\nMatTooltip.prototype._message;\n/** @type {?} */\nMatTooltip.prototype._enterListener;\n/** @type {?} */\nMatTooltip.prototype._leaveListener;\n/** @type {?} */\nMatTooltip.prototype._overlay;\n/** @type {?} */\nMatTooltip.prototype._elementRef;\n/** @type {?} */\nMatTooltip.prototype._scrollDispatcher;\n/** @type {?} */\nMatTooltip.prototype._viewContainerRef;\n/** @type {?} */\nMatTooltip.prototype._ngZone;\n/** @type {?} */\nMatTooltip.prototype._platform;\n/** @type {?} */\nMatTooltip.prototype._ariaDescriber;\n/** @type {?} */\nMatTooltip.prototype._scrollStrategy;\n/** @type {?} */\nMatTooltip.prototype._dir;\n}\n\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nexport class TooltipComponent {\n/**\n * Message to display in the tooltip\n */\nmessage: string;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n */\ntooltipClass: string|string[]|Set<string>|{[key: string]: any};\n/**\n * The timeout ID of any current timer set to show the tooltip\n */\n_showTimeoutId: number;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n */\n_hideTimeoutId: number;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n */\n_visibility: TooltipVisibility = 'initial';\n/**\n * Whether interactions on the page should close the tooltip\n */\nprivate _closeOnInteraction: boolean = false;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n */\n_transformOrigin: string = 'bottom';\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n */\nprivate _onHide: Subject<any> = new Subject();\n/**\n * @param {?} _dir\n * @param {?} _changeDetectorRef\n */\nconstructor(\nprivate _dir: Directionality,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * Shows the tooltip with an animation originating from the provided origin\n * @param {?} position Position of the tooltip.\n * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n * @return {?}\n */\nshow(position: TooltipPosition, delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n    }\n\n    this._setTransformOrigin(position);\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Begins the animation to hide the tooltip after the provided delay in ms.\n * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n * @return {?}\n */\nhide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n/**\n * Returns an observable that notifies when the tooltip has been hidden from view\n * @return {?}\n */\nafterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n/**\n * Whether the tooltip is being displayed\n * @return {?}\n */\nisVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n/**\n * Sets the tooltip transform origin according to the tooltip position\n * @param {?} value\n * @return {?}\n */\n_setTransformOrigin(value: TooltipPosition) {\n    const /** @type {?} */ isLtr = !this._dir || this._dir.value == 'ltr';\n    switch (value) {\n      case 'before': this._transformOrigin = isLtr ? 'right' : 'left'; break;\n      case 'after':  this._transformOrigin = isLtr ? 'left' : 'right'; break;\n      case 'left':   this._transformOrigin = 'right'; break;\n      case 'right':  this._transformOrigin = 'left'; break;\n      case 'above':  this._transformOrigin = 'bottom'; break;\n      case 'below':  this._transformOrigin = 'top'; break;\n      default: throw getMatTooltipInvalidPositionError(value);\n    }\n  }\n/**\n * @return {?}\n */\n_animationStart() {\n    this._closeOnInteraction = false;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_animationDone(event: AnimationEvent): void {\n    const /** @type {?} */ toState = /** @type {?} */(( event.toState as TooltipVisibility));\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      // Note: as of Angular 4.3, the animations module seems to fire the `start` callback before\n      // the end if animations are disabled. Make this call async to ensure that it still fires\n      // at the appropriate time.\n      Promise.resolve().then(() => this._closeOnInteraction = true);\n    }\n  }\n/**\n * Interactions on the HTML body should close the tooltip immediately as defined in the\n * material design spec.\n * https://material.google.com/components/tooltips.html#tooltips-interaction\n * @return {?}\n */\n_handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n/**\n * Marks that the tooltip needs to be checked in the next change detection run.\n * Mainly used for rendering the initial text before positioning a tooltip, which\n * can be problematic in components with OnPush change detection.\n * @return {?}\n */\n_markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('state', [\n      state('initial, void, hidden', style({transform: 'scale(0)'})),\n      state('visible', style({transform: 'scale(1)'})),\n      transition('* => visible', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n      transition('* => hidden', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n    ])\n  ],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction TooltipComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTooltipComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTooltipComponent.ctorParameters;\n/**\n * Message to display in the tooltip\n * @type {?}\n */\nTooltipComponent.prototype.message;\n/**\n * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n * @type {?}\n */\nTooltipComponent.prototype.tooltipClass;\n/**\n * The timeout ID of any current timer set to show the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._showTimeoutId;\n/**\n * The timeout ID of any current timer set to hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._hideTimeoutId;\n/**\n * Property watched by the animation framework to show or hide the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._visibility;\n/**\n * Whether interactions on the page should close the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._closeOnInteraction;\n/**\n * The transform origin used in the animation for showing and hiding the tooltip\n * @type {?}\n */\nTooltipComponent.prototype._transformOrigin;\n/**\n * Subject for notifying that the tooltip has been hidden from the view\n * @type {?}\n */\nTooltipComponent.prototype._onHide;\n/** @type {?} */\nTooltipComponent.prototype._dir;\n/** @type {?} */\nTooltipComponent.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, MatLine, MatLineSetter, mixinDisableRipple} from '@angular/material/core';\n/**\n * \\@docs-private\n */\nexport class MatListBase {}\nexport const /** @type {?} */ _MatListMixinBase = mixinDisableRipple(MatListBase);\n/**\n * \\@docs-private\n */\nexport class MatListItemBase {}\nexport const /** @type {?} */ _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\n/**\n * Divider between items within a list.\n */\nexport class MatListDivider {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    'aria-orientation': 'horizontal'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatListDivider_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListDivider.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListDivider.ctorParameters;\n}\n\n/**\n * A Material Design list component.\n */\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-list, mat-nav-list',\n  host: {'role': 'list'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatList_tsickle_Closure_declarations() {\n/** @type {?} */\nMatList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatList.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-list',\n  host: {'class': 'mat-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatNavListCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-nav-list',\n  host: {'class': 'mat-nav-list'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatNavListCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatNavListCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatNavListCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatDividerCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-divider',\n  host: {'class': 'mat-divider'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDividerCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDividerCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDividerCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatListAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListIconCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatListIconCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListIconCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListIconCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatListSubheaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatListSubheaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListSubheaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListSubheaderCssMatStyler.ctorParameters;\n}\n\n/**\n * An item within a Material Design list.\n */\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\nprivate _lineSetter: MatLineSetter;\nprivate _isNavList: boolean = false;\n\n   _lines: QueryList<MatLine>;\n/**\n * @param {?} avatar\n * @return {?}\n */\nset _hasAvatar(avatar: MatListAvatarCssMatStyler) {\n    if (avatar != null) {\n      this._renderer.addClass(this._element.nativeElement, 'mat-list-item-avatar');\n    } else {\n      this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-avatar');\n    }\n  }\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _list\n * @param {?} navList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _list: MatList,\n               navList: MatNavListCssMatStyler) {\n    super();\n    this._isNavList = !!navList;\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return !this._isNavList || this.disableRipple || this._list.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._renderer.addClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, 'mat-list-item-focus');\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item]',\n  host: {\n    'role': 'listitem',\n    'class': 'mat-list-item',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MatList, decorators: [{ type: Optional }, ]},\n{type: MatNavListCssMatStyler, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MatLine, ] },],\n'_hasAvatar': [{ type: ContentChild, args: [MatListAvatarCssMatStyler, ] },],\n};\n}\n\nfunction MatListItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListItem.ctorParameters;\n/** @type {?} */\nMatListItem.propDecorators;\n/** @type {?} */\nMatListItem.prototype._lineSetter;\n/** @type {?} */\nMatListItem.prototype._isNavList;\n/** @type {?} */\nMatListItem.prototype._lines;\n/** @type {?} */\nMatListItem.prototype._renderer;\n/** @type {?} */\nMatListItem.prototype._element;\n/** @type {?} */\nMatListItem.prototype._list;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE} from '@angular/cdk/keycodes';\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableRipple,\n  MatLine,\n  MatLineSetter,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\n/**\n * \\@docs-private\n */\nexport class MatSelectionListBase {}\nexport const /** @type {?} */ _MatSelectionListMixinBase = mixinDisableRipple(mixinDisabled(MatSelectionListBase));\n/**\n * \\@docs-private\n */\nexport class MatListOptionBase {}\nexport const /** @type {?} */ _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\n\n/** Event emitted by a selection-list whenever the state of an option is changed. */\nexport interface MatSelectionListOptionEvent {\n  option: MatListOption;\n}\n\nconst /** @type {?} */ FOCUSED_STYLE: string = 'mat-list-item-focus';\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is checked.\n */\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, FocusableOption, CanDisableRipple {\nprivate _lineSetter: MatLineSetter;\nprivate _selected: boolean = false;\nprivate _disabled: boolean = false;\n/**\n * Whether the option has focus.\n */\n_hasFocus: boolean = false;\n\n   _lines: QueryList<MatLine>;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n */\ncheckboxPosition: 'before' | 'after' = 'after';\n/**\n * Value of the option\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.selectionList && this.selectionList.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the option is selected.\n * @return {?}\n */\nget selected() { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) { this._selected = coerceBooleanProperty(value); }\n/**\n * Emitted when the option is focused.\n */\nonFocus = new EventEmitter<MatSelectionListOptionEvent>();\n/**\n * Emitted when the option is selected.\n */\nselectChange = new EventEmitter<MatSelectionListOptionEvent>();\n/**\n * Emitted when the option is deselected.\n */\ndeselected = new EventEmitter<MatSelectionListOptionEvent>();\n/**\n * Emitted when the option is destroyed.\n */\ndestroyed = new EventEmitter<MatSelectionListOptionEvent>();\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _changeDetector\n * @param {?} selectionList\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _changeDetector: ChangeDetectorRef,\npublic selectionList: MatSelectionList) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n\n    if (this.selectionList.disabled) {\n      this.disabled = true;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({option: this});\n  }\n/**\n * Toggles the selection state of the option.\n * @return {?}\n */\ntoggle(): void {\n    this.selected = !this.selected;\n    this.selectionList.selectedOptions.toggle(this);\n    this._changeDetector.markForCheck();\n  }\n/**\n * Allows for programmatic focusing of the option.\n * @return {?}\n */\nfocus(): void {\n    this._element.nativeElement.focus();\n    this.onFocus.emit({option: this});\n  }\n/**\n * Whether this list item should show a ripple effect when clicked.\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n/**\n * @return {?}\n */\n_handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus() {\n    this._hasFocus = true;\n    this._renderer.addClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * @return {?}\n */\n_handleBlur() {\n    this._renderer.removeClass(this._element.nativeElement, FOCUSED_STYLE);\n  }\n/**\n * Retrieves the DOM element of the component host.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MatSelectionList, decorators: [{ type: Optional }, { type: Inject, args: [forwardRef(() => MatSelectionList), ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MatLine, ] },],\n'checkboxPosition': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selected': [{ type: Input },],\n'selectChange': [{ type: Output },],\n'deselected': [{ type: Output },],\n'destroyed': [{ type: Output },],\n};\n}\n\nfunction MatListOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListOption.ctorParameters;\n/** @type {?} */\nMatListOption.propDecorators;\n/** @type {?} */\nMatListOption.prototype._lineSetter;\n/** @type {?} */\nMatListOption.prototype._selected;\n/** @type {?} */\nMatListOption.prototype._disabled;\n/**\n * Whether the option has focus.\n * @type {?}\n */\nMatListOption.prototype._hasFocus;\n/** @type {?} */\nMatListOption.prototype._lines;\n/**\n * Whether the label should appear before or after the checkbox. Defaults to 'after'\n * @type {?}\n */\nMatListOption.prototype.checkboxPosition;\n/**\n * Value of the option\n * @type {?}\n */\nMatListOption.prototype.value;\n/**\n * Emitted when the option is focused.\n * @type {?}\n */\nMatListOption.prototype.onFocus;\n/**\n * Emitted when the option is selected.\n * @type {?}\n */\nMatListOption.prototype.selectChange;\n/**\n * Emitted when the option is deselected.\n * @type {?}\n */\nMatListOption.prototype.deselected;\n/**\n * Emitted when the option is destroyed.\n * @type {?}\n */\nMatListOption.prototype.destroyed;\n/** @type {?} */\nMatListOption.prototype._renderer;\n/** @type {?} */\nMatListOption.prototype._element;\n/** @type {?} */\nMatListOption.prototype._changeDetector;\n/** @type {?} */\nMatListOption.prototype.selectionList;\n}\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nexport class MatSelectionList extends _MatSelectionListMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, AfterContentInit, OnDestroy {\n/**\n * Tab index for the selection-list.\n */\n_tabIndex = 0;\n/**\n * Subscription to all list options' onFocus events\n */\nprivate _optionFocusSubscription = Subscription.EMPTY;\n/**\n * Subscription to all list options' destroy events\n */\nprivate _optionDestroyStream = Subscription.EMPTY;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MatListOption>;\n/**\n * The option components contained within this selection-list.\n */\noptions: QueryList<MatListOption>;\n/**\n * The currently selected options.\n */\nselectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n/**\n * @param {?} _element\n */\nconstructor(private _element: ElementRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options).withWrap();\n\n    if (this.disabled) {\n      this._tabIndex = -1;\n    }\n\n    this._optionFocusSubscription = this._onFocusSubscription();\n    this._optionDestroyStream = this._onDestroySubscription();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._optionDestroyStream.unsubscribe();\n    this._optionFocusSubscription.unsubscribe();\n  }\n/**\n * Focus the selection-list.\n * @return {?}\n */\nfocus() {\n    this._element.nativeElement.focus();\n  }\n/**\n * Selects all of the options.\n * @return {?}\n */\nselectAll() {\n    this.options.forEach(option => {\n      if (!option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Deselects all of the options.\n * @return {?}\n */\ndeselectAll() {\n    this.options.forEach(option => {\n      if (option.selected) {\n        option.toggle();\n      }\n    });\n  }\n/**\n * Map all the options' destroy event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onDestroySubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MatListOption[]) => {\n        return merge(...options.map(option => option.destroyed));\n      }).subscribe((e: MatSelectionListOptionEvent) => {\n        let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n        if (e.option._hasFocus) {\n          // Check whether the option is the last item\n          if (optionIndex < this.options.length - 1) {\n            this._keyManager.setActiveItem(optionIndex);\n          } else if (optionIndex - 1 >= 0) {\n            this._keyManager.setActiveItem(optionIndex - 1);\n          }\n        }\n        e.option.destroyed.unsubscribe();\n      });\n  }\n/**\n * Map all the options' onFocus event subscriptions and merge them into one stream.\n * @return {?}\n */\nprivate _onFocusSubscription(): Subscription {\n    return RxChain.from(this.options.changes)\n      .call(startWith, this.options)\n      .call(switchMap, (options: MatListOption[]) => {\n        return merge(...options.map(option => option.onFocus));\n      }).subscribe((e: MatSelectionListOptionEvent) => {\n      let /** @type {?} */ optionIndex: number = this.options.toArray().indexOf(e.option);\n      this._keyManager.updateActiveItemIndex(optionIndex);\n    });\n  }\n/**\n * Passes relevant key presses to our key manager.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case SPACE:\n        this._toggleSelectOnFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Toggles the selected state of the currently focused option.\n * @return {?}\n */\nprivate _toggleSelectOnFocusedOption(): void {\n    let /** @type {?} */ focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let /** @type {?} */ focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption) {\n        focusedOption.toggle();\n      }\n    }\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of options.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'listbox',\n    '[attr.tabindex]': '_tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-disabled]': 'disabled.toString()'},\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: ContentChildren, args: [MatListOption, ] },],\n};\n}\n\nfunction MatSelectionList_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSelectionList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSelectionList.ctorParameters;\n/** @type {?} */\nMatSelectionList.propDecorators;\n/**\n * Tab index for the selection-list.\n * @type {?}\n */\nMatSelectionList.prototype._tabIndex;\n/**\n * Subscription to all list options' onFocus events\n * @type {?}\n */\nMatSelectionList.prototype._optionFocusSubscription;\n/**\n * Subscription to all list options' destroy events\n * @type {?}\n */\nMatSelectionList.prototype._optionDestroyStream;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMatSelectionList.prototype._keyManager;\n/**\n * The option components contained within this selection-list.\n * @type {?}\n */\nMatSelectionList.prototype.options;\n/**\n * The currently selected options.\n * @type {?}\n */\nMatSelectionList.prototype.selectedOptions;\n/** @type {?} */\nMatSelectionList.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatDividerCssMatStyler,\n  MatList,\n  MatListAvatarCssMatStyler,\n  MatListCssMatStyler,\n  MatListDivider,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n  MatNavListCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nexport class MatListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatListItem,\n    MatListDivider,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListCssMatStyler,\n    MatNavListCssMatStyler,\n    MatDividerCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption\n  ],\n  declarations: [\n    MatList,\n    MatListItem,\n    MatListDivider,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListCssMatStyler,\n    MatNavListCssMatStyler,\n    MatDividerCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatListModule,MatListBase,_MatListMixinBase,MatListItemBase,_MatListItemMixinBase,MatListDivider,MatList,MatListCssMatStyler,MatNavListCssMatStyler,MatDividerCssMatStyler,MatListAvatarCssMatStyler,MatListIconCssMatStyler,MatListSubheaderCssMatStyler,MatListItem,MatSelectionListBase,_MatSelectionListMixinBase,MatListOptionBase,_MatListOptionMixinBase,MatSelectionListOptionEvent,MatListOption,MatSelectionList} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Below are all the animations for the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n */\n\n\n/**\n * This animation controls the menu panel's entry and exit from the page.\n *\n * When the menu panel is added to the DOM, it scales in and fades in its border.\n *\n * When the menu panel is removed from the DOM, it simply fades out after a brief\n * delay to display the ripple.\n */\n\n// TODO(kara): switch to :enter and :leave once Mobile Safari is sorted out.\nexport const /** @type {?} */ transformMenu: AnimationTriggerMetadata = trigger('transformMenu', [\n  state('void', style({\n    opacity: 0,\n    // This starts off from 0.01, instead of 0, because there's an issue in the Angular animations\n    // as of 4.2, which causes the animation to be skipped if it starts from 0.\n    transform: 'scale(0.01, 0.01)'\n  })),\n  state('enter-start', style({\n    opacity: 1,\n    transform: 'scale(1, 0.5)'\n  })),\n  state('enter', style({\n    transform: 'scale(1, 1)'\n  })),\n  transition('void => enter-start', animate('100ms linear')),\n  transition('enter-start => enter', animate('300ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n  transition('* => void', animate('150ms 50ms linear', style({opacity: 0})))\n]);\n/**\n * This animation fades in the background color and content of the menu panel\n * after its containing element is scaled in.\n */\nexport const fadeInItems: AnimationTriggerMetadata = trigger('fadeInItems', [\n  state('showing', style({opacity: 1})),\n  transition('void => *', [\n    style({opacity: 0}),\n    animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n  ])\n]);\n","\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`mat-menu-trigger: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`x-position value must be either 'before' or after'.\n      Example: <mat-menu x-position=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`y-position value must be either 'above' or below'.\n      Example: <mat-menu y-position=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * \\@docs-private\n */\nexport class MatMenuItemBase {}\nexport const /** @type {?} */ _MatMenuItemMixinBase = mixinDisabled(MatMenuItemBase);\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nexport class MatMenuItem extends _MatMenuItemMixinBase implements FocusableOption, CanDisable,\n  OnDestroy {\n/**\n * Stream that emits when the menu item is hovered.\n */\nhover: Subject<MatMenuItem> = new Subject();\n/**\n * Whether the menu item is highlighted.\n */\n_highlighted: boolean = false;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n */\n_triggersSubmenu: boolean = false;\n/**\n * @param {?} _elementRef\n */\nconstructor(private _elementRef: ElementRef) {\n    super();\n  }\n/**\n * Focuses the menu item.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.hover.complete();\n  }\n/**\n * Used to set the `tabindex`.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Returns the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n/**\n * Prevents the default element actions if it is disabled.\n * @param {?} event\n * @return {?}\n */\n_checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n/**\n * Emits to the hover stream.\n * @return {?}\n */\n_emitHoverEvent() {\n    if (!this.disabled) {\n      this.hover.next(this);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  inputs: ['disabled'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_emitHoverEvent()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  templateUrl: 'menu-item.html',\n  exportAs: 'matMenuItem',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\n}\n\nfunction MatMenuItem_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMenuItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMenuItem.ctorParameters;\n/**\n * Stream that emits when the menu item is hovered.\n * @type {?}\n */\nMatMenuItem.prototype.hover;\n/**\n * Whether the menu item is highlighted.\n * @type {?}\n */\nMatMenuItem.prototype._highlighted;\n/**\n * Whether the menu item acts as a trigger for a sub-menu.\n * @type {?}\n */\nMatMenuItem.prototype._triggersSubmenu;\n/** @type {?} */\nMatMenuItem.prototype._elementRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {RxChain, startWith, switchMap} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {fadeInItems, transformMenu} from './menu-animations';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n}\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options');\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 2;\nexport class MatMenu implements AfterContentInit, MatMenuPanel, OnDestroy {\nprivate _keyManager: FocusKeyManager<MatMenuItem>;\nprivate _xPosition: MenuPositionX = this._defaultOptions.xPosition;\nprivate _yPosition: MenuPositionY = this._defaultOptions.yPosition;\nprivate _previousElevation: string;\n/**\n * Subscription to tab events on the menu panel\n */\nprivate _tabSubscription = Subscription.EMPTY;\n/**\n * Config object to be passed into the menu's ngClass\n */\n_classList: any = {};\n/**\n * Current state of the panel animation.\n */\n_panelAnimationState: 'void' | 'enter-start' | 'enter' = 'void';\n/**\n * Parent menu of the current menu panel.\n */\nparentMenu: MatMenuPanel | undefined;\n/**\n * Layout direction of the menu.\n */\ndirection: Direction;\n/**\n * Position of the menu in the X axis.\n * @return {?}\n */\nget xPosition() { return this._xPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n/**\n * Position of the menu in the Y axis.\n * @return {?}\n */\nget yPosition() { return this._yPosition; }\n/**\n * @param {?} value\n * @return {?}\n */\nset yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n   templateRef: TemplateRef<any>;\n/**\n * List of the items inside of a menu.\n */\nitems: QueryList<MatMenuItem>;\n/**\n * Whether the menu should overlap its trigger.\n */\noverlapTrigger = this._defaultOptions.overlapTrigger;\n/**\n * This method takes classes set on the host mat-menu element and applies them on the\n * menu template that displays in the overlay container.  Otherwise, it's difficult\n * to style the containing menu from outside the component.\n * @param {?} classes list of class names\n * @return {?}\n */\nset classList(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n      this.setPositionClasses();\n    }\n  }\n/**\n * Event emitted when the menu is closed.\n */\nclose = new EventEmitter<void | 'click' | 'keydown'>();\n/**\n * @param {?} _elementRef\n * @param {?} _defaultOptions\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _defaultOptions: MatMenuDefaultOptions) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this.items).withWrap();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.close.emit('keydown'));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.close.emit();\n    this.close.complete();\n  }\n/**\n * Stream that emits whenever the hovered menu item changes.\n * @return {?}\n */\nhover(): Observable<MatMenuItem> {\n    return RxChain.from(this.items.changes)\n      .call(startWith, this.items)\n      .call(switchMap, (items: MatMenuItem[]) => merge(...items.map(item => item.hover)))\n      .result();\n  }\n/**\n * Handle a keyboard event from the menu, delegating to the appropriate action.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case ESCAPE:\n        this.close.emit('keydown');\n        event.stopPropagation();\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.close.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.close.emit('keydown');\n        }\n      break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n/**\n * Focus the first item in the menu. This method is used by the menu trigger\n * to focus the first item when the menu is opened by the ENTER key.\n * @return {?}\n */\nfocusFirstItem() {\n    this._keyManager.setFirstItemActive();\n  }\n/**\n * It's necessary to set position-based classes to ensure the menu panel animation\n * folds out from the correct direction.\n * @param {?=} posX\n * @param {?=} posY\n * @return {?}\n */\nsetPositionClasses(posX = this.xPosition, posY = this.yPosition): void {\n    this._classList['mat-menu-before'] = posX === 'before';\n    this._classList['mat-menu-after'] = posX === 'after';\n    this._classList['mat-menu-above'] = posY === 'above';\n    this._classList['mat-menu-below'] = posY === 'below';\n  }\n/**\n * Sets the menu panel elevation.\n * @param {?} depth Number of parent menus that come before the menu.\n * @return {?}\n */\nsetElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const /** @type {?} */ newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const /** @type {?} */ customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n/**\n * Starts the enter animation.\n * @return {?}\n */\n_startAnimation() {\n    this._panelAnimationState = 'enter-start';\n  }\n/**\n * Resets the panel animation to its initial state.\n * @return {?}\n */\n_resetAnimation() {\n    this._panelAnimationState = 'void';\n  }\n/**\n * Callback that is invoked when the panel animation completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    // After the initial expansion is done, trigger the second phase of the enter animation.\n    if (event.toState === 'enter-start') {\n      this._panelAnimationState = 'enter';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    transformMenu,\n    fadeInItems\n  ],\n  exportAs: 'matMenu'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'xPosition': [{ type: Input },],\n'yPosition': [{ type: Input },],\n'templateRef': [{ type: ViewChild, args: [TemplateRef, ] },],\n'items': [{ type: ContentChildren, args: [MatMenuItem, ] },],\n'overlapTrigger': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'close': [{ type: Output },],\n};\n}\n\nfunction MatMenu_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMenu.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMenu.ctorParameters;\n/** @type {?} */\nMatMenu.propDecorators;\n/** @type {?} */\nMatMenu.prototype._keyManager;\n/** @type {?} */\nMatMenu.prototype._xPosition;\n/** @type {?} */\nMatMenu.prototype._yPosition;\n/** @type {?} */\nMatMenu.prototype._previousElevation;\n/**\n * Subscription to tab events on the menu panel\n * @type {?}\n */\nMatMenu.prototype._tabSubscription;\n/**\n * Config object to be passed into the menu's ngClass\n * @type {?}\n */\nMatMenu.prototype._classList;\n/**\n * Current state of the panel animation.\n * @type {?}\n */\nMatMenu.prototype._panelAnimationState;\n/**\n * Parent menu of the current menu panel.\n * @type {?}\n */\nMatMenu.prototype.parentMenu;\n/**\n * Layout direction of the menu.\n * @type {?}\n */\nMatMenu.prototype.direction;\n/** @type {?} */\nMatMenu.prototype.templateRef;\n/**\n * List of the items inside of a menu.\n * @type {?}\n */\nMatMenu.prototype.items;\n/**\n * Whether the menu should overlap its trigger.\n * @type {?}\n */\nMatMenu.prototype.overlapTrigger;\n/**\n * Event emitted when the menu is closed.\n * @type {?}\n */\nMatMenu.prototype.close;\n/** @type {?} */\nMatMenu.prototype._elementRef;\n/** @type {?} */\nMatMenu.prototype._defaultOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Renderer2,\n  ElementRef,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatLine, MatLineSetter} from '@angular/material/core';\nimport {coerceToNumber} from './grid-list-measure';\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * Amount of rows that the grid tile takes up.\n * @return {?}\n */\nget rowspan() { return this._rowspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset rowspan(value) { this._rowspan = coerceToNumber(value); }\n/**\n * Amount of columns that the grid tile takes up.\n * @return {?}\n */\nget colspan() { return this._colspan; }\n/**\n * @param {?} value\n * @return {?}\n */\nset colspan(value) { this._colspan = coerceToNumber(value); }\n/**\n * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n * \"Changed after checked\" errors that would occur with HostBinding.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\n_setStyle(property: string, value: any): void {\n    this._renderer.setStyle(this._element.nativeElement, property, value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'rowspan': [{ type: Input },],\n'colspan': [{ type: Input },],\n};\n}\n\nfunction MatGridTile_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridTile.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridTile.ctorParameters;\n/** @type {?} */\nMatGridTile.propDecorators;\n/** @type {?} */\nMatGridTile.prototype._rowspan;\n/** @type {?} */\nMatGridTile.prototype._colspan;\n/** @type {?} */\nMatGridTile.prototype._renderer;\n/** @type {?} */\nMatGridTile.prototype._element;\n}\n\nexport class MatGridTileText implements AfterContentInit {\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n */\n_lineSetter: MatLineSetter;\n   _lines: QueryList<MatLine>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n */\nconstructor(private _renderer: Renderer2,\nprivate _element: ElementRef) {}\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._lineSetter = new MatLineSetter(this._lines, this._renderer, this._element);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_lines': [{ type: ContentChildren, args: [MatLine, ] },],\n};\n}\n\nfunction MatGridTileText_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridTileText.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridTileText.ctorParameters;\n/** @type {?} */\nMatGridTileText.propDecorators;\n/**\n *  Helper that watches the number of lines in a text area and sets\n * a class on the host element that matches the line count.\n * @type {?}\n */\nMatGridTileText.prototype._lineSetter;\n/** @type {?} */\nMatGridTileText.prototype._lines;\n/** @type {?} */\nMatGridTileText.prototype._renderer;\n/** @type {?} */\nMatGridTileText.prototype._element;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatGridAvatarCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatGridAvatarCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridAvatarCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridAvatarCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatGridTileHeaderCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatGridTileHeaderCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridTileHeaderCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridTileHeaderCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatGridTileFooterCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatGridTileFooterCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridTileFooterCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridTileFooterCssMatStyler.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {QueryList} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n * \n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n * \n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n * \n * \\@docs-private\n */\nexport class TileCoordinator {\n/**\n * Tracking array (see class description).\n */\ntracker: number[];\n/**\n * Index at which the search for the next gap will start.\n */\ncolumnIndex: number = 0;\n/**\n * The current row index.\n */\nrowIndex: number = 0;\n/**\n * Gets the total number of rows occupied by tiles\n * @return {?}\n */\nget rowCount(): number { return this.rowIndex + 1; }\n/**\n * Gets the total span of rows occupied by tiles.\n * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n * @return {?}\n */\nget rowspan() {\n    let /** @type {?} */ lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n/**\n * The computed (row, col) position of each tile (the output).\n */\npositions: TilePosition[];\n/**\n * @param {?} numColumns\n * @param {?} tiles\n */\nconstructor(numColumns: number, tiles: QueryList<MatGridTile>) {\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n/**\n * Calculates the row and col position of a tile.\n * @param {?} tile\n * @return {?}\n */\nprivate _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    let /** @type {?} */ gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n/**\n * Finds the next available space large enough to fit the tile.\n * @param {?} tileCols\n * @return {?}\n */\nprivate _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let /** @type {?} */ gapStartIndex = -1;\n    let /** @type {?} */ gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile.\n    } while (gapEndIndex - gapStartIndex < tileCols);\n    return gapStartIndex;\n  }\n/**\n * Move \"down\" to the next row.\n * @return {?}\n */\nprivate _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let /** @type {?} */ i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n/**\n * Finds the end index (exclusive) of a gap given the index from which to start looking.\n * The gap ends when a non-zero value is found.\n * @param {?} gapStartIndex\n * @return {?}\n */\nprivate _findGapEndIndex(gapStartIndex: number): number {\n    for (let /** @type {?} */ i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n/**\n * Update the tile tracker to account for the given tile in the given space.\n * @param {?} start\n * @param {?} tile\n * @return {?}\n */\nprivate _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let /** @type {?} */ i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\nfunction TileCoordinator_tsickle_Closure_declarations() {\n/**\n * Tracking array (see class description).\n * @type {?}\n */\nTileCoordinator.prototype.tracker;\n/**\n * Index at which the search for the next gap will start.\n * @type {?}\n */\nTileCoordinator.prototype.columnIndex;\n/**\n * The current row index.\n * @type {?}\n */\nTileCoordinator.prototype.rowIndex;\n/**\n * The computed (row, col) position of each tile (the output).\n * @type {?}\n */\nTileCoordinator.prototype.positions;\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nexport class TilePosition {\n/**\n * @param {?} row\n * @param {?} col\n */\nconstructor(public row: number,\npublic col: number) {}\n}\n\nfunction TilePosition_tsickle_Closure_declarations() {\n/** @type {?} */\nTilePosition.prototype.row;\n/** @type {?} */\nTilePosition.prototype.col;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n/**\n * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n * because these properties haven't been calculated by that point.\n * \n * @param {?} gutterSize Size of the grid's gutter.\n * @param {?} tracker Instance of the TileCoordinator.\n * @param {?} cols Amount of columns in the grid.\n * @param {?} direction Layout direction of the grid.\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n/**\n * Computes the amount of space a single 1x1 tile would take up (width or height).\n * Used as a basis for other calculations.\n * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n */\ngetBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n/**\n * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} offset Number of tiles that have already been rendered in the row/column.\n * @return {?} Position of the tile as a CSS calc() expression.\n */\ngetTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n/**\n * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n * @param {?} span The tile's rowspan or colspan.\n * @return {?} Size of the tile as a CSS calc() expression.\n */\ngetTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n/**\n * Sets the style properties to be applied to a tile for the given row and column index.\n * @param {?} tile Tile to which to apply the styling.\n * @param {?} rowIndex Index of the tile's row.\n * @param {?} colIndex Index of the tile's column.\n * @return {?}\n */\nsetStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let /** @type {?} */ percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let /** @type {?} */ gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n/**\n * Sets the horizontal placement of the tile in the list.\n * @param {?} tile\n * @param {?} colIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let /** @type {?} */ baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let /** @type {?} */ side = this._direction === 'ltr' ? 'left' : 'right';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n/**\n * Calculates the total size taken up by gutters across one axis of a list.\n * @return {?}\n */\ngetGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n/**\n * Calculates the total size taken up by tiles across one axis of a list.\n * @param {?} tileHeight Height of the tile.\n * @return {?}\n */\ngetTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n/**\n * Sets the vertical placement of the tile in the list.\n * This method will be implemented by each type of TileStyler.\n * \\@docs-private\n * @abstract\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number) {}\n/**\n * Calculates the computed height and returns the correct style property to set.\n * This method can be implemented by each type of TileStyler.\n * \\@docs-private\n * @return {?}\n */\ngetComputedHeight(): [string, string] | null { return null; }\n/**\n * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n * \\@docs-private\n * @abstract\n * @param {?} list Grid list that the styler was attached to.\n * @return {?}\n */\nreset(list: MatGridList) {}\n}\n\nfunction TileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nTileStyler.prototype._gutterSize;\n/** @type {?} */\nTileStyler.prototype._rows;\n/** @type {?} */\nTileStyler.prototype._rowspan;\n/** @type {?} */\nTileStyler.prototype._cols;\n/** @type {?} */\nTileStyler.prototype._direction;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example <mat-grid-list cols=\"3\" rowHeight=\"100px\">\n * \\@docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n/**\n * @param {?} fixedRowHeight\n */\nconstructor(public fixedRowHeight: string) { super(); }\n/**\n * @param {?} gutterSize\n * @param {?} tracker\n * @param {?} cols\n * @param {?} direction\n * @return {?}\n */\ninit(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n\nfunction FixedTileStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nFixedTileStyler.prototype.fixedRowHeight;\n}\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example <mat-grid-list cols=\"3\" rowHeight=\"3:1\">\n * \\@docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n/**\n * Ratio width:height given by user to determine row height.\n */\nrowHeightRatio: number;\n  baseTileHeight: string;\n/**\n * @param {?} value\n */\nconstructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @param {?} percentWidth\n * @param {?} gutterWidth\n * @return {?}\n */\nsetRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let /** @type {?} */ percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('margin-top', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('padding-top', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n/**\n * @return {?}\n */\ngetComputedHeight(): [string, string] {\n    return [\n      'padding-bottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MatGridList) {\n    list._setListStyle(['padding-bottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('margin-top', null);\n      tile._setStyle('padding-top', null);\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _parseRatio(value: string): void {\n    const /** @type {?} */ ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\nfunction RatioTileStyler_tsickle_Closure_declarations() {\n/**\n * Ratio width:height given by user to determine row height.\n * @type {?}\n */\nRatioTileStyler.prototype.rowHeightRatio;\n/** @type {?} */\nRatioTileStyler.prototype.baseTileHeight;\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example <mat-grid-list cols=\"3\" rowHeight=\"fit\">\n * \n * \\@docs-private\n */\nexport class FitTileStyler extends TileStyler {\n/**\n * @param {?} tile\n * @param {?} rowIndex\n * @return {?}\n */\nsetRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let /** @type {?} */ percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let /** @type {?} */ gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let /** @type {?} */ baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n/**\n * @param {?} list\n * @return {?}\n */\nreset(list: MatGridList) {\n    list._tiles.forEach(tile => {\n      tile._setStyle('top', null);\n      tile._setStyle('height', null);\n    });\n  }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  Renderer2,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  coerceToString,\n  coerceToNumber,\n} from './grid-list-measure';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst /** @type {?} */ MAT_FIT_MODE = 'fit';\nexport class MatGridList implements OnInit, AfterContentChecked {\n/**\n * Number of columns being rendered.\n */\nprivate _cols: number;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n */\nprivate _rowHeight: string;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n */\nprivate _gutter: string = '1px';\n/**\n * Sets position and size styles for a tile\n */\nprivate _tileStyler: TileStyler;\n/**\n * Query list of tiles that are being rendered.\n */\n_tiles: QueryList<MatGridTile>;\n/**\n * @param {?} _renderer\n * @param {?} _element\n * @param {?} _dir\n */\nconstructor(\nprivate _renderer: Renderer2,\nprivate _element: ElementRef,\nprivate _dir: Directionality) {}\n/**\n * Amount of columns in the grid list.\n * @return {?}\n */\nget cols() { return this._cols; }\n/**\n * @param {?} value\n * @return {?}\n */\nset cols(value: any) { this._cols = coerceToNumber(value); }\n/**\n * Size of the grid list's gutter in pixels.\n * @return {?}\n */\nget gutterSize() { return this._gutter; }\n/**\n * @param {?} value\n * @return {?}\n */\nset gutterSize(value: any) { this._gutter = coerceToString(value); }\n/**\n * Set internal representation of row height from the user-provided value.\n * @param {?} value\n * @return {?}\n */\nset rowHeight(value: string | number) {\n    const /** @type {?} */ newValue = coerceToString(value);\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n/**\n * The layout calculation is fairly cheap if nothing changes, so there's little cost\n * to run it frequently.\n * @return {?}\n */\nngAfterContentChecked() {\n    this._layoutTiles();\n  }\n/**\n * Throw a friendly error if cols property is missing\n * @return {?}\n */\nprivate _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n/**\n * Default to equal width:height if rowHeight property is missing\n * @return {?}\n */\nprivate _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n/**\n * Creates correct Tile Styler subtype based on rowHeight passed in by user\n * @param {?} rowHeight\n * @return {?}\n */\nprivate _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n/**\n * Computes and applies the size and position for all children grid tiles.\n * @return {?}\n */\nprivate _layoutTiles(): void {\n    const /** @type {?} */ tracker = new TileCoordinator(this.cols, this._tiles);\n    const /** @type {?} */ direction = this._dir ? this._dir.value : 'ltr';\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    this._tiles.forEach((tile, index) => {\n      const /** @type {?} */ pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n/**\n * Sets style on the main grid-list element, given the style name and value.\n * @param {?} style\n * @return {?}\n */\n_setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      this._renderer.setStyle(this._element.nativeElement, style[0], style[1]);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tiles': [{ type: ContentChildren, args: [MatGridTile, ] },],\n'cols': [{ type: Input },],\n'gutterSize': [{ type: Input },],\n'rowHeight': [{ type: Input },],\n};\n}\n\nfunction MatGridList_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridList.ctorParameters;\n/** @type {?} */\nMatGridList.propDecorators;\n/**\n * Number of columns being rendered.\n * @type {?}\n */\nMatGridList.prototype._cols;\n/**\n * Row height value passed in by user. This can be one of three types:\n * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n * @type {?}\n */\nMatGridList.prototype._rowHeight;\n/**\n * The amount of space between tiles. This will be something like '5px' or '2em'.\n * @type {?}\n */\nMatGridList.prototype._gutter;\n/**\n * Sets position and size styles for a tile\n * @type {?}\n */\nMatGridList.prototype._tileStyler;\n/**\n * Query list of tiles that are being rendered.\n * @type {?}\n */\nMatGridList.prototype._tiles;\n/** @type {?} */\nMatGridList.prototype._renderer;\n/** @type {?} */\nMatGridList.prototype._element;\n/** @type {?} */\nMatGridList.prototype._dir;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\nexport class MatGridListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatGridListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatGridListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatGridListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatGridTile,MatGridListModule,MatGridList} from './public_api';\n\nexport {MatGridAvatarCssMatStyler as ɵb,MatGridTileFooterCssMatStyler as ɵd,MatGridTileHeaderCssMatStyler as ɵc,MatGridTileText as ɵa} from './grid-tile';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, ElementRef, Input, AfterViewInit, DoCheck} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nexport class MatTextareaAutosize implements AfterViewInit, DoCheck {\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n */\nprivate _previousValue: string;\nprivate _minRows: number;\nprivate _maxRows: number;\n/**\n * @return {?}\n */\nget minRows() { return this._minRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minRows(value: number) {\n    this._minRows = value;\n    this._setMinHeight();\n  }\n/**\n * @return {?}\n */\nget maxRows() { return this._maxRows; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxRows(value: number) {\n    this._maxRows = value;\n    this._setMaxHeight();\n  }\n/**\n * Cached height of a textarea with a single row.\n */\nprivate _cachedLineHeight: number;\n/**\n * @param {?} _elementRef\n * @param {?} _platform\n */\nconstructor(private _elementRef: ElementRef,\nprivate _platform: Platform) {}\n/**\n * Sets the minimum height of the textarea as determined by minRows.\n * @return {?}\n */\n_setMinHeight(): void {\n    const /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n        `${this.minRows * this._cachedLineHeight}px` : null;\n\n    if (minHeight)  {\n      this._setTextareaStyle('minHeight', minHeight);\n    }\n  }\n/**\n * Sets the maximum height of the textarea as determined by maxRows.\n * @return {?}\n */\n_setMaxHeight(): void {\n    const /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n        `${this.maxRows * this._cachedLineHeight}px` : null;\n\n    if (maxHeight) {\n      this._setTextareaStyle('maxHeight', maxHeight);\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._cacheTextareaLineHeight();\n      this.resizeToFitContent();\n    }\n  }\n/**\n * Sets a style property on the textarea element.\n * @param {?} property\n * @param {?} value\n * @return {?}\n */\nprivate _setTextareaStyle(property: string, value: string): void {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    textarea.style[property] = value;\n  }\n/**\n * Cache the height of a single-row textarea.\n * \n * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n * maxRows. For the initial version, we will assume that the height of a single line in the\n * textarea does not ever change.\n * @return {?}\n */\nprivate _cacheTextareaLineHeight(): void {\n    let /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n\n    // Use a clone element because we have to override some styles.\n    let /** @type {?} */ textareaClone = /** @type {?} */(( textarea.cloneNode(false) as HTMLTextAreaElement));\n    textareaClone.rows = 1;\n\n    // Use `position: absolute` so that this doesn't cause a browser layout and use\n    // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n    // would affect the height.\n    textareaClone.style.position = 'absolute';\n    textareaClone.style.visibility = 'hidden';\n    textareaClone.style.border = 'none';\n    textareaClone.style.padding = '0';\n    textareaClone.style.height = '';\n    textareaClone.style.minHeight = '';\n    textareaClone.style.maxHeight = '';\n\n    // In Firefox it happens that textarea elements are always bigger than the specified amount\n    // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n    // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n    // to hidden. This ensures that there is no invalid calculation of the line height.\n    // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n    textareaClone.style.overflow = 'hidden'; /** @type {?} */((\n\n    textarea.parentNode)).appendChild(textareaClone);\n    this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */((\n    textarea.parentNode)).removeChild(textareaClone);\n\n    // Min and max heights have to be re-calculated if the cached line height changes\n    this._setMinHeight();\n    this._setMaxHeight();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    this.resizeToFitContent();\n  }\n/**\n * Resize the textarea to fit its content.\n * @return {?}\n */\nresizeToFitContent() {\n    const /** @type {?} */ textarea = /** @type {?} */(( this._elementRef.nativeElement as HTMLTextAreaElement));\n    const /** @type {?} */ value = textarea.value;\n\n    // Only resize of the value changed since these calculations can be expensive.\n    if (value === this._previousValue) {\n      return;\n    }\n\n    // Reset the textarea height to auto in order to shrink back to its default size.\n    // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n    textarea.style.height = 'auto';\n    textarea.style.overflow = 'hidden';\n\n    // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n    textarea.style.height = `${textarea.scrollHeight}px`;\n    textarea.style.overflow = '';\n\n    this._previousValue = value;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `textarea[mat-autosize], textarea[matTextareaAutosize]`,\n  exportAs: 'matTextareaAutosize',\n  host: {\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Platform, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'minRows': [{ type: Input, args: ['matAutosizeMinRows', ] },],\n'maxRows': [{ type: Input, args: ['matAutosizeMaxRows', ] },],\n};\n}\n\nfunction MatTextareaAutosize_tsickle_Closure_declarations() {\n/** @type {?} */\nMatTextareaAutosize.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatTextareaAutosize.ctorParameters;\n/** @type {?} */\nMatTextareaAutosize.propDecorators;\n/**\n * Keep track of the previous textarea value to avoid resizing when the value hasn't changed.\n * @type {?}\n */\nMatTextareaAutosize.prototype._previousValue;\n/** @type {?} */\nMatTextareaAutosize.prototype._minRows;\n/** @type {?} */\nMatTextareaAutosize.prototype._maxRows;\n/**\n * Cached height of a textarea with a single row.\n * @type {?}\n */\nMatTextareaAutosize.prototype._cachedLineHeight;\n/** @type {?} */\nMatTextareaAutosize.prototype._elementRef;\n/** @type {?} */\nMatTextareaAutosize.prototype._platform;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Platform, getSupportedInputTypes} from '@angular/cdk/platform';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {\n  defaultErrorStateMatcher,\n  ErrorOptions,\n  ErrorStateMatcher,\n  MAT_ERROR_GLOBAL_OPTIONS\n} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatFormFieldControl} from '@angular/material/form-field';\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst /** @type {?} */ MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'color',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nexport class MatInput implements MatFormFieldControl<any>, OnChanges, OnDestroy, DoCheck {\n/**\n * Variables used as cache for getters and setters.\n */\nprotected _type = 'text';\n  protected _disabled = false;\n  protected _required = false;\n  protected _id: string;\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _errorOptions: ErrorOptions;\n  protected _previousNativeValue = this.value;\n/**\n * Whether the input is focused.\n */\nfocused = false;\n/**\n * Whether the input is in an error state.\n */\nerrorState = false;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n */\n_ariaDescribedby: string;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * A name for this control that can be used by `mat-form-field`.\n */\ncontrolType = 'mat-input';\n/**\n * Whether the element is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Unique id of the element.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * @param {?} value\n * @return {?}\n */\nset id(value: string) { this._id = value || this._uid; }\n/**\n * Placeholder attribute of the element.\n */\nplaceholder: string = '';\n/**\n * Whether the element is required.\n * @return {?}\n */\nget required() { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value: any) { this._required = coerceBooleanProperty(value); }\n/**\n * Input type of the element.\n * @return {?}\n */\nget type() { return this._type; }\n/**\n * @param {?} value\n * @return {?}\n */\nset type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'type', this._type);\n    }\n  }\n/**\n * A function used to control when error messages are shown.\n */\nerrorStateMatcher: ErrorStateMatcher;\n/**\n * The input element's value.\n * @return {?}\n */\nget value() { return this._elementRef.nativeElement.value; }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: string) {\n    if (value !== this.value) {\n      this._elementRef.nativeElement.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _platform\n * @param {?} ngControl\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} errorOptions\n */\nconstructor(protected _elementRef: ElementRef,\n              protected _renderer: Renderer2,\n              protected _platform: Platform,\npublic ngControl: NgControl,\n               protected _parentForm: NgForm,\n               protected _parentFormGroup: FormGroupDirective,\n                errorOptions: ErrorOptions) {\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n    this._errorOptions = errorOptions ? errorOptions : {};\n    this.errorStateMatcher = this._errorOptions.errorStateMatcher || defaultErrorStateMatcher;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      _renderer.listen(_elementRef.nativeElement, 'keyup', (event: Event) => {\n        let el = event.target as HTMLInputElement;\n        if (!el.value && !el.selectionStart && !el.selectionEnd) {\n          // Note: Just setting `0, 0` doesn't fix the issue. Setting `1, 1` fixes it for the first\n          // time that you type text and then hold delete. Toggling to `1, 1` and then back to\n          // `0, 0` seems to completely fix it.\n          el.setSelectionRange(1, 1);\n          el.setSelectionRange(0, 0);\n        }\n      });\n    }\n  }\n/**\n * @return {?}\n */\nngOnChanges() {\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateChanges.complete();\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this._updateErrorState();\n    } else {\n      // When the input isn't used together with `@angular/forms`, we need to check manually for\n      // changes to the native `value` property in order to update the floating label.\n      this._dirtyCheckNativeValue();\n    }\n  }\n/**\n * @return {?}\n */\nfocus() { this._elementRef.nativeElement.focus(); }\n/**\n * Callback for the cases where the focused state of the input changes.\n * @param {?} isFocused\n * @return {?}\n */\n_focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n/**\n * @return {?}\n */\n_onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n/**\n * Re-evaluates the error state. This is only relevant with \\@angular/forms.\n * @return {?}\n */\nprotected _updateErrorState() {\n    const /** @type {?} */ oldState = this.errorState;\n    const /** @type {?} */ ngControl = this.ngControl;\n    const /** @type {?} */ parent = this._parentFormGroup || this._parentForm;\n    const /** @type {?} */ newState = ngControl && this.errorStateMatcher( /** @type {?} */((ngControl.control as FormControl)), parent);\n\n    if (newState !== oldState) {\n      this.errorState = newState;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Does some manual dirty checking on the native input `value` property.\n * @return {?}\n */\nprotected _dirtyCheckNativeValue() {\n    const /** @type {?} */ newValue = this.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n/**\n * Make sure the input is a supported type.\n * @return {?}\n */\nprotected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n/**\n * Checks whether the input type is one of the types that are never empty.\n * @return {?}\n */\nprotected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n/**\n * Checks whether the input is invalid based on the native validation.\n * @return {?}\n */\nprotected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let /** @type {?} */ validity = ( /** @type {?} */((this._elementRef.nativeElement as HTMLInputElement))).validity;\n    return validity && validity.badInput;\n  }\n/**\n * Determines if the component host is a textarea. If not recognizable it returns false.\n * @return {?}\n */\nprotected _isTextarea() {\n    let /** @type {?} */ nativeElement = this._elementRef.nativeElement;\n\n    // In Universal, we don't have access to `nodeName`, but the same can be achieved with `name`.\n    // Note that this shouldn't be necessary once Angular switches to an API that resembles the\n    // DOM closer.\n    let /** @type {?} */ nodeName = this._platform.isBrowser ? nativeElement.nodeName : nativeElement.name;\n    return nodeName ? nodeName.toLowerCase() === 'textarea' : false;\n  }\n/**\n * @return {?}\n */\nget empty(): boolean {\n    return !this._isNeverEmpty() &&\n        (this.value == null || this.value === '') &&\n        // Check if the input contains bad input. If so, we know that it only appears empty because\n        // the value failed to parse. From the user's perspective it is not empty.\n        // TODO(mmalerba): Add e2e test for bad input case.\n        !this._isBadInput();\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean { return this.focused || !this.empty; }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @return {?}\n */\nonContainerClick() { this.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[matInput], textarea[matInput]`,\n  host: {\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: Platform, },\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ERROR_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'id': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'required': [{ type: Input },],\n'type': [{ type: Input },],\n'errorStateMatcher': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\nfunction MatInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMatInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatInput.ctorParameters;\n/** @type {?} */\nMatInput.propDecorators;\n/**\n * Variables used as cache for getters and setters.\n * @type {?}\n */\nMatInput.prototype._type;\n/** @type {?} */\nMatInput.prototype._disabled;\n/** @type {?} */\nMatInput.prototype._required;\n/** @type {?} */\nMatInput.prototype._id;\n/** @type {?} */\nMatInput.prototype._uid;\n/** @type {?} */\nMatInput.prototype._errorOptions;\n/** @type {?} */\nMatInput.prototype._previousNativeValue;\n/**\n * Whether the input is focused.\n * @type {?}\n */\nMatInput.prototype.focused;\n/**\n * Whether the input is in an error state.\n * @type {?}\n */\nMatInput.prototype.errorState;\n/**\n * The aria-describedby attribute on the input for improved a11y.\n * @type {?}\n */\nMatInput.prototype._ariaDescribedby;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n * needs to run change detection.\n * @type {?}\n */\nMatInput.prototype.stateChanges;\n/**\n * A name for this control that can be used by `mat-form-field`.\n * @type {?}\n */\nMatInput.prototype.controlType;\n/**\n * Placeholder attribute of the element.\n * @type {?}\n */\nMatInput.prototype.placeholder;\n/**\n * A function used to control when error messages are shown.\n * @type {?}\n */\nMatInput.prototype.errorStateMatcher;\n/** @type {?} */\nMatInput.prototype._neverEmptyInputTypes;\n/** @type {?} */\nMatInput.prototype._elementRef;\n/** @type {?} */\nMatInput.prototype._renderer;\n/** @type {?} */\nMatInput.prototype._platform;\n/** @type {?} */\nMatInput.prototype.ngControl;\n/** @type {?} */\nMatInput.prototype._parentForm;\n/** @type {?} */\nMatInput.prototype._parentFormGroup;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\nexport class MatInputModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    PlatformModule,\n  ],\n  exports: [\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatInputModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatInputModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatInputModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatInputModule,MatTextareaAutosize,MatInput,getMatInputUnsupportedTypeError} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatCalendar} from './calendar';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\n/**\n * Used to generate a unique ID for each datepicker instance.\n */\nlet datepickerUid = 0;\n/**\n * Injection token that determines the scroll handling while the calendar is open.\n */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * \\@docs-private\n */\nexport class MatDatepickerContent<D> implements AfterContentInit {\n  datepicker: MatDatepicker<D>;\n\n   _calendar: MatCalendar<D>;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._calendar._focusActiveCell();\n  }\n/**\n * Handles keydown event on datepicker content.\n * @param {?} event The event.\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE) {\n      this.datepicker.close();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_calendar': [{ type: ViewChild, args: [MatCalendar, ] },],\n};\n}\n\nfunction MatDatepickerContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerContent.ctorParameters;\n/** @type {?} */\nMatDatepickerContent.propDecorators;\n/** @type {?} */\nMatDatepickerContent.prototype.datepicker;\n/** @type {?} */\nMatDatepickerContent.prototype._calendar;\n}\n\n/**\n * Component responsible for managing the datepicker popup/dialog.\n */\nexport class MatDatepicker<D> implements OnDestroy {\n/**\n * The date to open the calendar to initially.\n * @return {?}\n */\nget startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nset startAt(date: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, date); }\nprivate _startAt: D | null;\n/**\n * The view that the calendar should start in.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n */\ntouchUi = false;\n/**\n * Whether the datepicker pop-up should be disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this._datepickerInput.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n */\nselectedChanged = new EventEmitter<D>();\n/**\n * Whether the calendar is open.\n */\nopened = false;\n/**\n * The id for the datepicker calendar.\n */\nid = `mat-datepicker-${datepickerUid++}`;\n/**\n * The currently selected date.\n * @return {?}\n */\nget _selected(): D | null { return this._validSelected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _selected(value: D | null) { this._validSelected = value; }\nprivate _validSelected: D | null = null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n/**\n * @return {?}\n */\nget _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n */\nprivate _popupRef: OverlayRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n */\nprivate _dialogRef: MatDialogRef<any> | null;\n/**\n * A portal containing the calendar for this datepicker.\n */\nprivate _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n/**\n * The element that was focused before the datepicker was opened.\n */\nprivate _focusedElementBeforeOpen: HTMLElement | null = null;\nprivate _inputSubscription = Subscription.EMPTY;\n/**\n * The input element this datepicker is associated with.\n */\n_datepickerInput: MatDatepickerInput<D>;\n/**\n * Emits when the datepicker is disabled.\n */\n_disabledChange = new Subject<boolean>();\n/**\n * @param {?} _dialog\n * @param {?} _overlay\n * @param {?} _ngZone\n * @param {?} _viewContainerRef\n * @param {?} _scrollStrategy\n * @param {?} _dateAdapter\n * @param {?} _dir\n * @param {?} _document\n */\nconstructor(private _dialog: MatDialog,\nprivate _overlay: Overlay,\nprivate _ngZone: NgZone,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _scrollStrategy,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dir: Directionality,\nprivate _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n    }\n  }\n/**\n * Selects the given date\n * @param {?} date\n * @return {?}\n */\n_select(date: D): void {\n    let /** @type {?} */ oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this.selectedChanged.emit(date);\n    }\n  }\n/**\n * Register an input with this datepicker.\n * @param {?} input The datepicker input to register with this datepicker.\n * @return {?}\n */\n_registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('An MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n/**\n * Open the calendar.\n * @return {?}\n */\nopen(): void {\n    if (this.opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this.opened = true;\n  }\n/**\n * Close the calendar.\n * @return {?}\n */\nclose(): void {\n    if (!this.opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n\n      this._focusedElementBeforeOpen.focus();\n      this._focusedElementBeforeOpen = null;\n    }\n\n    this.opened = false;\n  }\n/**\n * Open the calendar as a dialog.\n * @return {?}\n */\nprivate _openAsDialog(): void {\n    this._dialogRef = this._dialog.open(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n    });\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n  }\n/**\n * Open the calendar as a popup.\n * @return {?}\n */\nprivate _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      let /** @type {?} */ componentRef: ComponentRef<MatDatepickerContent<D>> =\n          this._popupRef.attach(this._calendarPortal);\n      componentRef.instance.datepicker = this;\n\n      // Update the position once the calendar has rendered.\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n\n    this._popupRef.backdropClick().subscribe(() => this.close());\n  }\n/**\n * Create the popup.\n * @return {?}\n */\nprivate _createPopup(): void {\n    const /** @type {?} */ overlayState = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir ? this._dir.value : 'ltr',\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._popupRef = this._overlay.create(overlayState);\n  }\n/**\n * Create the popup PositionStrategy.\n * @return {?}\n */\nprivate _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .connectedTo(this._datepickerInput.getPopupConnectionElementRef(),\n        {originX: 'start', originY: 'bottom'},\n        {overlayX: 'start', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'start', originY: 'top' },\n        { overlayX: 'start', overlayY: 'bottom' }\n      )\n      .withFallbackPosition(\n        {originX: 'end', originY: 'bottom'},\n        {overlayX: 'end', overlayY: 'top'}\n      )\n      .withFallbackPosition(\n        { originX: 'end', originY: 'top' },\n        { overlayX: 'end', overlayY: 'bottom' }\n      );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialog, },\n{type: Overlay, },\n{type: NgZone, },\n{type: ViewContainerRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_DATEPICKER_SCROLL_STRATEGY, ] }, ]},\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'touchUi': [{ type: Input },],\n'disabled': [{ type: Input },],\n'selectedChanged': [{ type: Output },],\n};\n}\n\nfunction MatDatepicker_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepicker.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepicker.ctorParameters;\n/** @type {?} */\nMatDatepicker.propDecorators;\n/** @type {?} */\nMatDatepicker.prototype._startAt;\n/**\n * The view that the calendar should start in.\n * @type {?}\n */\nMatDatepicker.prototype.startView;\n/**\n * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n * than a popup and elements have more padding to allow for bigger touch targets.\n * @type {?}\n */\nMatDatepicker.prototype.touchUi;\n/** @type {?} */\nMatDatepicker.prototype._disabled;\n/**\n * Emits new selected date when selected date changes.\n * @deprecated Switch to the `dateChange` and `dateInput` binding on the input element.\n * @type {?}\n */\nMatDatepicker.prototype.selectedChanged;\n/**\n * Whether the calendar is open.\n * @type {?}\n */\nMatDatepicker.prototype.opened;\n/**\n * The id for the datepicker calendar.\n * @type {?}\n */\nMatDatepicker.prototype.id;\n/** @type {?} */\nMatDatepicker.prototype._validSelected;\n/**\n * A reference to the overlay when the calendar is opened as a popup.\n * @type {?}\n */\nMatDatepicker.prototype._popupRef;\n/**\n * A reference to the dialog when the calendar is opened as a dialog.\n * @type {?}\n */\nMatDatepicker.prototype._dialogRef;\n/**\n * A portal containing the calendar for this datepicker.\n * @type {?}\n */\nMatDatepicker.prototype._calendarPortal;\n/**\n * The element that was focused before the datepicker was opened.\n * @type {?}\n */\nMatDatepicker.prototype._focusedElementBeforeOpen;\n/** @type {?} */\nMatDatepicker.prototype._inputSubscription;\n/**\n * The input element this datepicker is associated with.\n * @type {?}\n */\nMatDatepicker.prototype._datepickerInput;\n/**\n * Emits when the datepicker is disabled.\n * @type {?}\n */\nMatDatepicker.prototype._disabledChange;\n/** @type {?} */\nMatDatepicker.prototype._dialog;\n/** @type {?} */\nMatDatepicker.prototype._overlay;\n/** @type {?} */\nMatDatepicker.prototype._ngZone;\n/** @type {?} */\nMatDatepicker.prototype._viewContainerRef;\n/** @type {?} */\nMatDatepicker.prototype._scrollStrategy;\n/** @type {?} */\nMatDatepicker.prototype._dateAdapter;\n/** @type {?} */\nMatDatepicker.prototype._dir;\n/** @type {?} */\nMatDatepicker.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nexport const /** @type {?} */ MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\nexport const /** @type {?} */ MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n/**\n * The new value for the target datepicker input.\n */\nvalue: D | null;\n/**\n * @param {?} target\n * @param {?} targetElement\n */\nconstructor(public target: MatDatepickerInput<D>,\npublic targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\nfunction MatDatepickerInputEvent_tsickle_Closure_declarations() {\n/**\n * The new value for the target datepicker input.\n * @type {?}\n */\nMatDatepickerInputEvent.prototype.value;\n/** @type {?} */\nMatDatepickerInputEvent.prototype.target;\n/** @type {?} */\nMatDatepickerInputEvent.prototype.targetElement;\n}\n\n/**\n * Directive used to connect an input to a MatDatepicker.\n */\nexport class MatDatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\n    Validator {\n/**\n * The datepicker that this input is associated with.\n * @param {?} value\n * @return {?}\n */\nset matDatepicker(value: MatDatepicker<D>) {\n    this.registerDatepicker(value);\n  }\n  _datepicker: MatDatepicker<D>;\n/**\n * @param {?} value\n * @return {?}\n */\nprivate registerDatepicker(value: MatDatepicker<D>) {\n    if (value) {\n      this._datepicker = value;\n      this._datepicker._registerInput(this);\n    }\n  }\n/**\n * @param {?} filter\n * @return {?}\n */\nset matDatepickerFilter(filter: (date: D | null) => boolean) {\n    this._dateFilter = filter;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n/**\n * The value of the input.\n * @return {?}\n */\nget value(): D | null {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: D | null) {\n    value = coerceDateProperty(this._dateAdapter, value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n\n    let /** @type {?} */ oldDate = this.value;\n    this._value = value;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '');\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\nprivate _value: D | null;\n/**\n * The minimum valid date.\n * @return {?}\n */\nget min(): D | null { return this._min; }\n/**\n * @param {?} value\n * @return {?}\n */\nset min(value: D | null) {\n    this._min = coerceDateProperty(this._dateAdapter, value);\n    this._validatorOnChange();\n  }\nprivate _min: D | null;\n/**\n * The maximum valid date.\n * @return {?}\n */\nget max(): D | null { return this._max; }\n/**\n * @param {?} value\n * @return {?}\n */\nset max(value: D | null) {\n    this._max = coerceDateProperty(this._dateAdapter, value);\n    this._validatorOnChange();\n  }\nprivate _max: D | null;\n/**\n * Whether the datepicker-input is disabled.\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) {\n    const /** @type {?} */ newValue = coerceBooleanProperty(value);\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n  }\nprivate _disabled: boolean;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n */\ndateChange = new EventEmitter<MatDatepickerInputEvent<D>>();\n/**\n * Emits when an `input` event is fired on this `<input>`.\n */\ndateInput = new EventEmitter<MatDatepickerInputEvent<D>>();\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n */\n_valueChange = new EventEmitter<D|null>();\n/**\n * Emits when the disabled state has changed\n */\n_disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\nprivate _cvaOnChange: (value: any) => void = () => {};\nprivate _validatorOnChange = () => {};\nprivate _datepickerSubscription = Subscription.EMPTY;\nprivate _localeSubscription = Subscription.EMPTY;\n/**\n * The form control validator for whether the input parses.\n */\nprivate _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n/**\n * The form control validator for the min date.\n */\nprivate _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n/**\n * The form control validator for the max date.\n */\nprivate _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n/**\n * The form control validator for the date filter.\n */\nprivate _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = coerceDateProperty(this._dateAdapter, control.value);\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n/**\n * The combined form control validator for this input.\n */\nprivate _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n/**\n * Whether the last value set on the input was valid.\n */\nprivate _lastValueValid = false;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} _formField\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats,\nprivate _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    if (this._datepicker) {\n      this._datepickerSubscription =\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this._cvaOnChange(selected);\n            this._onTouched();\n            this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n            this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          });\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n/**\n * @param {?} c\n * @return {?}\n */\nvalidate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n/**\n * Gets the element that the datepicker popup should be connected to.\n * @return {?} The element to connect the popup to.\n */\ngetPopupConnectionElementRef(): ElementRef {\n    return this._formField ? this._formField.underlineRef : this._elementRef;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: D): void {\n    this.value = value;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onKeydown(event: KeyboardEvent) {\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\n_onInput(value: string) {\n    let /** @type {?} */ date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n    this._value = date;\n    this._cvaOnChange(date);\n    this._valueChange.emit(date);\n    this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @return {?}\n */\n_onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n/**\n * @param {?} obj The object to check.\n * @return {?} The given object if it is both a date instance and valid, otherwise null.\n */\nprivate _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[matDatepicker]',\n  providers: [MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n{type: MatFormField, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'matDatepicker': [{ type: Input },],\n'matDatepickerFilter': [{ type: Input },],\n'value': [{ type: Input },],\n'min': [{ type: Input },],\n'max': [{ type: Input },],\n'disabled': [{ type: Input },],\n'dateChange': [{ type: Output },],\n'dateInput': [{ type: Output },],\n};\n}\n\nfunction MatDatepickerInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerInput.ctorParameters;\n/** @type {?} */\nMatDatepickerInput.propDecorators;\n/** @type {?} */\nMatDatepickerInput.prototype._datepicker;\n/** @type {?} */\nMatDatepickerInput.prototype._dateFilter;\n/** @type {?} */\nMatDatepickerInput.prototype._value;\n/** @type {?} */\nMatDatepickerInput.prototype._min;\n/** @type {?} */\nMatDatepickerInput.prototype._max;\n/** @type {?} */\nMatDatepickerInput.prototype._disabled;\n/**\n * Emits when a `change` event is fired on this `<input>`.\n * @type {?}\n */\nMatDatepickerInput.prototype.dateChange;\n/**\n * Emits when an `input` event is fired on this `<input>`.\n * @type {?}\n */\nMatDatepickerInput.prototype.dateInput;\n/**\n * Emits when the value changes (either due to user input or programmatic change).\n * @type {?}\n */\nMatDatepickerInput.prototype._valueChange;\n/**\n * Emits when the disabled state has changed\n * @type {?}\n */\nMatDatepickerInput.prototype._disabledChange;\n/** @type {?} */\nMatDatepickerInput.prototype._onTouched;\n/** @type {?} */\nMatDatepickerInput.prototype._cvaOnChange;\n/** @type {?} */\nMatDatepickerInput.prototype._validatorOnChange;\n/** @type {?} */\nMatDatepickerInput.prototype._datepickerSubscription;\n/** @type {?} */\nMatDatepickerInput.prototype._localeSubscription;\n/**\n * The form control validator for whether the input parses.\n * @type {?}\n */\nMatDatepickerInput.prototype._parseValidator;\n/**\n * The form control validator for the min date.\n * @type {?}\n */\nMatDatepickerInput.prototype._minValidator;\n/**\n * The form control validator for the max date.\n * @type {?}\n */\nMatDatepickerInput.prototype._maxValidator;\n/**\n * The form control validator for the date filter.\n * @type {?}\n */\nMatDatepickerInput.prototype._filterValidator;\n/**\n * The combined form control validator for this input.\n * @type {?}\n */\nMatDatepickerInput.prototype._validator;\n/**\n * Whether the last value set on the input was valid.\n * @type {?}\n */\nMatDatepickerInput.prototype._lastValueValid;\n/** @type {?} */\nMatDatepickerInput.prototype._elementRef;\n/** @type {?} */\nMatDatepickerInput.prototype._renderer;\n/** @type {?} */\nMatDatepickerInput.prototype._dateAdapter;\n/** @type {?} */\nMatDatepickerInput.prototype._dateFormats;\n/** @type {?} */\nMatDatepickerInput.prototype._formField;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nexport class MatDatepickerToggle<D> implements OnChanges, OnDestroy {\nprivate _stateChanges = Subscription.EMPTY;\n/**\n * Datepicker instance that the button will toggle.\n */\ndatepicker: MatDatepicker<D>;\n/**\n * Whether the toggle button is disabled.\n * @return {?}\n */\nget disabled() {\n    return this._disabled === undefined ? this.datepicker.disabled : this._disabled;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\nprivate _disabled: boolean;\n/**\n * @param {?} _intl\n * @param {?} _changeDetectorRef\n */\nconstructor(\npublic _intl: MatDatepickerIntl,\nprivate _changeDetectorRef: ChangeDetectorRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      const /** @type {?} */ datepicker: MatDatepicker<D> = changes.datepicker.currentValue;\n      const /** @type {?} */ datepickerDisabled = datepicker ? datepicker._disabledChange : observableOf();\n      const /** @type {?} */ inputDisabled = datepicker && datepicker._datepickerInput ?\n        datepicker._datepickerInput._disabledChange :\n        observableOf();\n\n      this._stateChanges.unsubscribe();\n      this._stateChanges = merge(this._intl.changes, datepickerDisabled, inputDisabled)\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  host: {\n    'class': 'mat-datepicker-toggle',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDatepickerIntl, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'datepicker': [{ type: Input, args: ['for', ] },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MatDatepickerToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerToggle.ctorParameters;\n/** @type {?} */\nMatDatepickerToggle.propDecorators;\n/** @type {?} */\nMatDatepickerToggle.prototype._stateChanges;\n/**\n * Datepicker instance that the button will toggle.\n * @type {?}\n */\nMatDatepickerToggle.prototype.datepicker;\n/** @type {?} */\nMatDatepickerToggle.prototype._disabled;\n/** @type {?} */\nMatDatepickerToggle.prototype._intl;\n/** @type {?} */\nMatDatepickerToggle.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst /** @type {?} */ DAYS_PER_WEEK = 7;\n/**\n * An internal component used to display a single month in the datepicker.\n * \\@docs-private\n */\nexport class MatMonthView<D> implements AfterContentInit {\n/**\n * The date to display in this month view (everything other than the month and year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\n    this._selected = coerceDateProperty(this._dateAdapter, value);\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new date is selected.\n */\nselectedChange = new EventEmitter<D | null>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * The label for this month (e.g. \"January 2017\").\n */\n_monthLabel: string;\n/**\n * Grid of calendar cells representing the dates of the month.\n */\n_weeks: MatCalendarCell[][];\n/**\n * The number of blank cells in the first row before the 1st of the month.\n */\n_firstWeekOffset: number;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n */\n_selectedDate: number | null;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n */\n_todayDate: number | null;\n/**\n * The names of the weekdays.\n */\n_weekdays: {long: string, narrow: string}[];\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n    this._init();\n  }\n/**\n * Handles when a new date is selected.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const /** @type {?} */ selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const /** @type {?} */ selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const /** @type {?} */ selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this.userSelection.emit();\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n  }\n/**\n * Creates MatCalendarCells for the dates in this month.\n * @return {?}\n */\nprivate _createWeekCells() {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    let /** @type {?} */ dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let /** @type {?} */ i = 0, /** @type {?} */ cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      let /** @type {?} */ date = this._dateAdapter.createDate(\n          this._dateAdapter.getYear(this.activeDate),\n          this._dateAdapter.getMonth(this.activeDate), i + 1);\n      let /** @type {?} */ enabled = !this.dateFilter ||\n          this.dateFilter(date);\n      let /** @type {?} */ ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled));\n    }\n  }\n/**\n * Gets the date in this month that the given Date falls on.\n * Returns null if the given Date is in another month.\n * @param {?} date\n * @return {?}\n */\nprivate _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n/**\n * Checks whether the 2 dates are non-null and fall within the same month of the same year.\n * @param {?} d1\n * @param {?} d2\n * @return {?}\n */\nprivate _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MatMonthView_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMonthView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMonthView.ctorParameters;\n/** @type {?} */\nMatMonthView.propDecorators;\n/** @type {?} */\nMatMonthView.prototype._activeDate;\n/** @type {?} */\nMatMonthView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMatMonthView.prototype.dateFilter;\n/**\n * Emits when a new date is selected.\n * @type {?}\n */\nMatMonthView.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMatMonthView.prototype.userSelection;\n/**\n * The label for this month (e.g. \"January 2017\").\n * @type {?}\n */\nMatMonthView.prototype._monthLabel;\n/**\n * Grid of calendar cells representing the dates of the month.\n * @type {?}\n */\nMatMonthView.prototype._weeks;\n/**\n * The number of blank cells in the first row before the 1st of the month.\n * @type {?}\n */\nMatMonthView.prototype._firstWeekOffset;\n/**\n * The date of the month that the currently selected Date falls on.\n * Null if the currently selected Date is in another month.\n * @type {?}\n */\nMatMonthView.prototype._selectedDate;\n/**\n * The date of the month that today falls on. Null if today is in another month.\n * @type {?}\n */\nMatMonthView.prototype._todayDate;\n/**\n * The names of the weekdays.\n * @type {?}\n */\nMatMonthView.prototype._weekdays;\n/** @type {?} */\nMatMonthView.prototype._dateAdapter;\n/** @type {?} */\nMatMonthView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {MatCalendarCell} from './calendar-body';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\n/**\n * An internal component used to display a single year in the datepicker.\n * \\@docs-private\n */\nexport class MatYearView<D> implements AfterContentInit {\n/**\n * The date to display in this year view (everything other than the year is ignored).\n * @return {?}\n */\nget activeDate(): D { return this._activeDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset activeDate(value: D) {\n    let /** @type {?} */ oldActiveDate = this._activeDate;\n    this._activeDate = coerceDateProperty(this._dateAdapter, value) || this._dateAdapter.today();\n    if (this._dateAdapter.getYear(oldActiveDate) != this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\nprivate _activeDate: D;\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) {\n    this._selected = coerceDateProperty(this._dateAdapter, value);\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\nprivate _selected: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when a new month is selected.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Grid of calendar cells representing the months of the year.\n */\n_months: MatCalendarCell[][];\n/**\n * The label for this year (e.g. \"2017\").\n */\n_yearLabel: string;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n */\n_todayMonth: number | null;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n */\n_selectedMonth: number | null;\n/**\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n */\nconstructor(\npublic _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._init();\n  }\n/**\n * Handles when a new month is selected.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: number) {\n    let /** @type {?} */ daysInMonth = this._dateAdapter.getNumDaysInMonth(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n/**\n * Initializes this month view.\n * @return {?}\n */\nprivate _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let /** @type {?} */ monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n  }\n/**\n * Gets the month in this year that the given Date falls on.\n * Returns null if the given Date is in another year.\n * @param {?} date\n * @return {?}\n */\nprivate _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n/**\n * Creates an MatCalendarCell for the given month.\n * @param {?} month\n * @param {?} monthName\n * @return {?}\n */\nprivate _createCellForMonth(month: number, monthName: string) {\n    let /** @type {?} */ ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._isMonthEnabled(month));\n  }\n/**\n * Whether the given month is enabled.\n * @param {?} month\n * @return {?}\n */\nprivate _isMonthEnabled(month: number) {\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    let /** @type {?} */ firstOfMonth = this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let /** @type {?} */ date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activeDate': [{ type: Input },],\n'selected': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n};\n}\n\nfunction MatYearView_tsickle_Closure_declarations() {\n/** @type {?} */\nMatYearView.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatYearView.ctorParameters;\n/** @type {?} */\nMatYearView.propDecorators;\n/** @type {?} */\nMatYearView.prototype._activeDate;\n/** @type {?} */\nMatYearView.prototype._selected;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMatYearView.prototype.dateFilter;\n/**\n * Emits when a new month is selected.\n * @type {?}\n */\nMatYearView.prototype.selectedChange;\n/**\n * Grid of calendar cells representing the months of the year.\n * @type {?}\n */\nMatYearView.prototype._months;\n/**\n * The label for this year (e.g. \"2017\").\n * @type {?}\n */\nMatYearView.prototype._yearLabel;\n/**\n * The month in this year that today falls on. Null if today is in a different year.\n * @type {?}\n */\nMatYearView.prototype._todayMonth;\n/**\n * The month in this year that the selected Date falls on.\n * Null if the selected Date is in a different year.\n * @type {?}\n */\nMatYearView.prototype._selectedMonth;\n/** @type {?} */\nMatYearView.prototype._dateAdapter;\n/** @type {?} */\nMatYearView.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCalendar} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  MatDatepicker,\n  MatDatepickerContent,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatYearView} from './year-view';\nexport class MatDatepickerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatIconModule,\n    OverlayModule,\n    A11yModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatMonthView,\n    MatYearView,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDatepickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n/**\n * Unique ID counter\n */\nlet nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nexport class CdkAccordion {\n/**\n * A readonly id value to use for unique selection coordination.\n */\nreadonly id = `cdk-accordion-${nextId++}`;\n/**\n * Whether the accordion should allow multiple expanded accordion items simulateously.\n * @return {?}\n */\nget multi(): boolean { return this._multi; }\n/**\n * @param {?} multi\n * @return {?}\n */\nset multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\nprivate  _multi: boolean = false;\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\nget hideToggle(): boolean { return this._hideToggle; }\n/**\n * @param {?} show\n * @return {?}\n */\nset hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\nprivate  _hideToggle: boolean = false;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n */\ndisplayMode: MatAccordionDisplayMode = 'default';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'cdk-accordion, [cdk-accordion]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multi': [{ type: Input },],\n'hideToggle': [{ type: Input },],\n'displayMode': [{ type: Input },],\n};\n}\n\nfunction CdkAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nCdkAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCdkAccordion.ctorParameters;\n/** @type {?} */\nCdkAccordion.propDecorators;\n/**\n * A readonly id value to use for unique selection coordination.\n * @type {?}\n */\nCdkAccordion.prototype.id;\n/** @type {?} */\nCdkAccordion.prototype._multi;\n/** @type {?} */\nCdkAccordion.prototype._hideToggle;\n/**\n * The display mode used for all expansion panels in the accordion. Currently two display\n * modes exist:\n *   default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n *     panel at a different elevation from the reset of the accordion.\n *  flat - no spacing is placed around expanded panels, showing all panels at the same\n *     elevation.\n * @type {?}\n */\nCdkAccordion.prototype.displayMode;\n}\n\n/**\n * Directive for a Material Design Accordion.\n */\nexport class MatAccordion extends CdkAccordion {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-accordion',\n  host: {\n    class: 'mat-accordion'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatAccordion_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAccordion.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAccordion.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Output,\n  EventEmitter,\n  Input,\n  Injectable,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CdkAccordion} from './accordion';\n/**\n * Used to generate unique ID for each expansion panel.\n */\nlet nextId = 0;\n/**\n * An abstract class to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nexport class AccordionItem implements OnDestroy {\n/**\n * Event emitted every time the AccordionItem is closed.\n */\nclosed = new EventEmitter<void>();\n/**\n * Event emitted every time the AccordionItem is opened.\n */\nopened = new EventEmitter<void>();\n/**\n * Event emitted when the AccordionItem is destroyed.\n */\ndestroyed = new EventEmitter<void>();\n/**\n * The unique AccordionItem id.\n */\nreadonly id = `cdk-accordion-child-${nextId++}`;\n/**\n * Whether the AccordionItem is expanded.\n * @return {?}\n */\nget expanded(): boolean { return this._expanded; }\n/**\n * @param {?} expanded\n * @return {?}\n */\nset expanded(expanded: boolean) {\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      if (expanded) {\n        this.opened.emit();\n/**\n * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n * the name value is the id of the accordion.\n */\nconst accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _expanded: boolean;\n/**\n * Unregister function for _expansionDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _expansionDispatcher\n */\nconstructor(\npublic accordion: CdkAccordion,\nprivate _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n  }\n/**\n * Emits an event for the accordion item being destroyed.\n * @return {?}\n */\nngOnDestroy() {\n    this.destroyed.emit();\n    this._removeUniqueSelectionListener();\n  }\n/**\n * Toggles the expanded state of the accordion item.\n * @return {?}\n */\ntoggle(): void {\n    this.expanded = !this.expanded;\n  }\n/**\n * Sets the expanded state of the accordion item to false.\n * @return {?}\n */\nclose(): void {\n    this.expanded = false;\n  }\n/**\n * Sets the expanded state of the accordion item to true.\n * @return {?}\n */\nopen(): void {\n    this.expanded = true;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CdkAccordion, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'closed': [{ type: Output },],\n'opened': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'expanded': [{ type: Input },],\n};\n}\n\nfunction AccordionItem_tsickle_Closure_declarations() {\n/** @type {?} */\nAccordionItem.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAccordionItem.ctorParameters;\n/** @type {?} */\nAccordionItem.propDecorators;\n/**\n * Event emitted every time the AccordionItem is closed.\n * @type {?}\n */\nAccordionItem.prototype.closed;\n/**\n * Event emitted every time the AccordionItem is opened.\n * @type {?}\n */\nAccordionItem.prototype.opened;\n/**\n * Event emitted when the AccordionItem is destroyed.\n * @type {?}\n */\nAccordionItem.prototype.destroyed;\n/**\n * The unique AccordionItem id.\n * @type {?}\n */\nAccordionItem.prototype.id;\n/** @type {?} */\nAccordionItem.prototype._expanded;\n/**\n * Unregister function for _expansionDispatcher *\n * @type {?}\n */\nAccordionItem.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nAccordionItem.prototype.accordion;\n/** @type {?} */\nAccordionItem.prototype._changeDetectorRef;\n/** @type {?} */\nAccordionItem.prototype._expansionDispatcher;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  forwardRef,\n  Host,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, mixinDisabled, UniqueSelectionDispatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\nimport {MatAccordion} from './accordion';\nimport {AccordionItem} from './accordion-item';\n/**\n * \\@docs-private\n */\nexport class MatExpansionPanelBase extends AccordionItem {\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n  }\n}\nexport const /** @type {?} */ _MatExpansionPanelMixinBase = mixinDisabled(MatExpansionPanelBase);\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * Time and timing curve for expansion panel animations.\n */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * <mat-expansion-panel> component.\n * \n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the CdkAccordion directive attached.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MatExpansionPanel extends _MatExpansionPanelMixinBase\n    implements CanDisable, OnChanges, OnDestroy {\n/**\n * Whether the toggle indicator should be hidden.\n */\nhideToggle: boolean = false;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n */\n_inputChanges = new Subject<SimpleChanges>();\n/**\n * @param {?} accordion\n * @param {?} _changeDetectorRef\n * @param {?} _uniqueSelectionDispatcher\n */\nconstructor(  accordion: MatAccordion,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n  }\n/**\n * Whether the expansion indicator should be hidden.\n * @return {?}\n */\n_getHideToggle(): boolean {\n    if (this.accordion) {\n      return this.accordion.hideToggle;\n    }\n    return this.hideToggle;\n  }\n/**\n * Determines whether the expansion panel should have spacing between it and its siblings.\n * @return {?}\n */\n_hasSpacing(): boolean {\n    if (this.accordion) {\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n/**\n * Gets the expanded state string.\n * @return {?}\n */\n_getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._inputChanges.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  },\n  providers: [\n    {provide: AccordionItem, useExisting: forwardRef(() => MatExpansionPanel)}\n  ],\n  animations: [\n    trigger('bodyExpansion', [\n      state('collapsed', style({height: '0px', visibility: 'hidden'})),\n      state('expanded', style({height: '*', visibility: 'visible'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatAccordion, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideToggle': [{ type: Input },],\n};\n}\n\nfunction MatExpansionPanel_tsickle_Closure_declarations() {\n/** @type {?} */\nMatExpansionPanel.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatExpansionPanel.ctorParameters;\n/** @type {?} */\nMatExpansionPanel.propDecorators;\n/**\n * Whether the toggle indicator should be hidden.\n * @type {?}\n */\nMatExpansionPanel.prototype.hideToggle;\n/**\n * Stream that emits for changes in `\\@Input` properties.\n * @type {?}\n */\nMatExpansionPanel.prototype._inputChanges;\n}\n\nexport class MatExpansionPanelActionRow {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatExpansionPanelActionRow_tsickle_Closure_declarations() {\n/** @type {?} */\nMatExpansionPanelActionRow.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatExpansionPanelActionRow.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {filter} from '@angular/cdk/rxjs';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  Renderer2,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subscription} from 'rxjs/Subscription';\nimport {EXPANSION_PANEL_ANIMATION_TIMING, MatExpansionPanel} from './expansion-panel';\n/**\n * <mat-expansion-panel-header> component.\n * \n * This component corresponds to the header element of an <mat-expansion-panel>.\n * \n * Please refer to README.md for examples on how to use it.\n */\nexport class MatExpansionPanelHeader implements OnDestroy {\nprivate _parentChangeSubscription = Subscription.EMPTY;\n/**\n * @param {?} renderer\n * @param {?} panel\n * @param {?} _element\n * @param {?} _focusMonitor\n * @param {?} _changeDetectorRef\n */\nconstructor(\n    renderer: Renderer2,\npublic panel: MatExpansionPanel,\nprivate _element: ElementRef,\nprivate _focusMonitor: FocusMonitor,\nprivate _changeDetectorRef: ChangeDetectorRef) {\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to  subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      filter.call(panel._inputChanges, changes => !!(changes.hideToggle || changes.disabled))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    _focusMonitor.monitor(_element.nativeElement, renderer, false);\n  }\n/**\n * Height of the header while the panel is expanded.\n */\nexpandedHeight: string;\n/**\n * Height of the header while the panel is collapsed.\n */\ncollapsedHeight: string;\n/**\n * Toggles the expanded state of the panel.\n * @return {?}\n */\n_toggle(): void {\n    if (!this.panel.disabled) {\n      this.panel.toggle();\n    }\n  }\n/**\n * Gets whether the panel is expanded.\n * @return {?}\n */\n_isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n/**\n * Gets the expanded state string of the panel.\n * @return {?}\n */\n_getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n/**\n * Gets the panel id.\n * @return {?}\n */\n_getPanelId(): string {\n    return this.panel.id;\n  }\n/**\n * Gets whether the expand indicator should be shown.\n * @return {?}\n */\n_showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n/**\n * Handle keyup event calling to toggle() if appropriate.\n * @param {?} event\n * @return {?}\n */\n_keyup(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        event.preventDefault();\n        this._toggle();\n        break;\n      default:\n        return;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element.nativeElement);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.tabindex]': 'panel.disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keyup)': '_keyup($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n  animations: [\n    trigger('indicatorRotate', [\n      state('collapsed', style({transform: 'rotate(0deg)'})),\n      state('expanded', style({transform: 'rotate(180deg)'})),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    trigger('expansionHeight', [\n      state('collapsed', style({\n        height: '{{collapsedHeight}}',\n      }), {\n        params: {collapsedHeight: '48px'},\n      }),\n      state('expanded', style({\n        height: '{{expandedHeight}}'\n      }), {\n        params: {expandedHeight: '64px'}\n      }),\n      transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: MatExpansionPanel, decorators: [{ type: Host }, ]},\n{type: ElementRef, },\n{type: FocusMonitor, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandedHeight': [{ type: Input },],\n'collapsedHeight': [{ type: Input },],\n};\n}\n\nfunction MatExpansionPanelHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatExpansionPanelHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatExpansionPanelHeader.ctorParameters;\n/** @type {?} */\nMatExpansionPanelHeader.propDecorators;\n/** @type {?} */\nMatExpansionPanelHeader.prototype._parentChangeSubscription;\n/**\n * Height of the header while the panel is expanded.\n * @type {?}\n */\nMatExpansionPanelHeader.prototype.expandedHeight;\n/**\n * Height of the header while the panel is collapsed.\n * @type {?}\n */\nMatExpansionPanelHeader.prototype.collapsedHeight;\n/** @type {?} */\nMatExpansionPanelHeader.prototype.panel;\n/** @type {?} */\nMatExpansionPanelHeader.prototype._element;\n/** @type {?} */\nMatExpansionPanelHeader.prototype._focusMonitor;\n/** @type {?} */\nMatExpansionPanelHeader.prototype._changeDetectorRef;\n}\n\n/**\n * <mat-panel-description> directive.\n * \n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport class MatExpansionPanelDescription {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-panel-description',\n  host : {\n    class: 'mat-expansion-panel-header-description'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatExpansionPanelDescription_tsickle_Closure_declarations() {\n/** @type {?} */\nMatExpansionPanelDescription.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatExpansionPanelDescription.ctorParameters;\n}\n\n/**\n * <mat-panel-title> directive.\n * \n * This direction is to be used inside of the MatExpansionPanelHeader component.\n */\nexport class MatExpansionPanelTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-panel-title',\n  host : {\n    class: 'mat-expansion-panel-header-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatExpansionPanelTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatExpansionPanelTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatExpansionPanelTitle.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CdkAccordion, MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\nexport class MatExpansionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, A11yModule],\n  exports: [\n    CdkAccordion,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription\n  ],\n  declarations: [\n    CdkAccordion,\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription\n  ],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatExpansionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatExpansionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatExpansionModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {CdkAccordion,MatAccordion,MatAccordionDisplayMode,AccordionItem,MatExpansionPanel,MatExpansionPanelState,MatExpansionPanelActionRow,MatExpansionPanelHeader,MatExpansionPanelDescription,MatExpansionPanelTitle,MatExpansionModule} from './public_api';\n\nexport {EXPANSION_PANEL_ANIMATION_TIMING as ɵc,MatExpansionPanelBase as ɵa,_MatExpansionPanelMixinBase as ɵb} from './expansion-panel';","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MatDialogContainer,\npublic readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\n      .call(first)\n      .subscribe(() => {\n        this._afterOpen.next();\n        this._afterOpen.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => {\n        this._beforeClose.next(dialogResult);\n        this._beforeClose.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\n    return this._beforeClose.asObservable();\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MatDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMatDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMatDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMatDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMatDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMatDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMatDialogRef.prototype._result;\n/** @type {?} */\nMatDialogRef.prototype._overlayRef;\n/** @type {?} */\nMatDialogRef.prototype._containerInstance;\n/** @type {?} */\nMatDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {extendObject} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const /** @type {?} */ MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MatDialog {\nprivate _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MatDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig): MatDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MatDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MatDialogConfig): OverlayConfig {\n    const /** @type {?} */ state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n/**\n * Attaches an MatDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MatDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\n          <any>{ $implicit: config.data, dialogRef }))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MatDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialog.ctorParameters;\n/** @type {?} */\nMatDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMatDialog.prototype.afterAllClosed;\n/** @type {?} */\nMatDialog.prototype._overlay;\n/** @type {?} */\nMatDialog.prototype._injector;\n/** @type {?} */\nMatDialog.prototype._scrollStrategy;\n/** @type {?} */\nMatDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MatDialogConfig): MatDialogConfig {\n  return extendObject(new MatDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MatDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MatDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n};\n}\n\nfunction MatDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogClose.ctorParameters;\n/** @type {?} */\nMatDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMatDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMatDialogClose.prototype.dialogResult;\n/** @type {?} */\nMatDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMatDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MatDialogTitle implements OnInit {\n   id = `mat-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MatDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MatDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogTitle.ctorParameters;\n/** @type {?} */\nMatDialogTitle.propDecorators;\n/** @type {?} */\nMatDialogTitle.prototype.id;\n/** @type {?} */\nMatDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MatDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MatDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\nexport class MatDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatDialogModule,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MatDialog,throwMatDialogContentAlreadyAttachedError,MatDialogContainer,MatDialogClose,MatDialogTitle,MatDialogContent,MatDialogActions,DialogRole,DialogPosition,MatDialogConfig,MatDialogRef} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {catchOperator, doOperator, finallyOperator, map, RxChain, share} from '@angular/cdk/rxjs';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MatIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <mat-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MatIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMatIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMatIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMatIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMatIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMatIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMatIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMatIconRegistry.prototype._http;\n/** @type {?} */\nMatIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n/**\n * \\@docs-private\n */\nexport class MatIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconBase.prototype._renderer;\n/** @type {?} */\nMatIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _iconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _iconRegistry: MatIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._iconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MatIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MatIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIcon.ctorParameters;\n/** @type {?} */\nMatIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMatIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMatIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMatIcon.prototype.fontIcon;\n/** @type {?} */\nMatIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMatIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMatIcon.prototype._iconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MatIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatIconModule,MatIconBase,_MatIconMixinBase,MatIcon,getMatIconNameNotFoundError,getMatIconNoHttpProviderError,getMatIconFailedToSanitizeError,MatIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\n/**\n * Datepicker data that requires internationalization.\n */\nexport class MatDatepickerIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * A label for the calendar popup (used by screen readers).\n */\ncalendarLabel = 'Calendar';\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n */\nopenCalendarLabel = 'Open calendar';\n/**\n * A label for the previous month button (used by screen readers).\n */\nprevMonthLabel = 'Previous month';\n/**\n * A label for the next month button (used by screen readers).\n */\nnextMonthLabel = 'Next month';\n/**\n * A label for the previous year button (used by screen readers).\n */\nprevYearLabel = 'Previous year';\n/**\n * A label for the next year button (used by screen readers).\n */\nnextYearLabel = 'Next year';\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n */\nswitchToMonthViewLabel = 'Change to month view';\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n */\nswitchToYearViewLabel = 'Change to year view';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDatepickerIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDatepickerIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDatepickerIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMatDatepickerIntl.prototype.changes;\n/**\n * A label for the calendar popup (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.calendarLabel;\n/**\n * A label for the button used to open the calendar popup (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.openCalendarLabel;\n/**\n * A label for the previous month button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.prevMonthLabel;\n/**\n * A label for the next month button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.nextMonthLabel;\n/**\n * A label for the previous year button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.prevYearLabel;\n/**\n * A label for the next year button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.nextYearLabel;\n/**\n * A label for the 'switch to month view' button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.switchToMonthViewLabel;\n/**\n * A label for the 'switch to year view' button (used by screen readers).\n * @type {?}\n */\nMatDatepickerIntl.prototype.switchToYearViewLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {first} from 'rxjs/operator/first';\nimport {Subscription} from 'rxjs/Subscription';\nimport {coerceDateProperty} from './coerce-date-property';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\n/**\n * A calendar that is used as part of the datepicker.\n * \\@docs-private\n */\nexport class MatCalendar<D> implements AfterContentInit, OnDestroy {\nprivate _intlChanges: Subscription;\n/**\n * A date representing the period (month or year) to start the calendar in.\n * @return {?}\n */\nget startAt(): D | null { return this._startAt; }\n/**\n * @param {?} value\n * @return {?}\n */\nset startAt(value: D | null) { this._startAt = coerceDateProperty(this._dateAdapter, value); }\nprivate _startAt: D | null;\n/**\n * Whether the calendar should be started in month or year view.\n */\nstartView: 'month' | 'year' = 'month';\n/**\n * The currently selected date.\n * @return {?}\n */\nget selected(): D | null { return this._selected; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: D | null) { this._selected = coerceDateProperty(this._dateAdapter, value); }\nprivate _selected: D | null;\n/**\n * The minimum selectable date.\n * @return {?}\n */\nget minDate(): D | null { return this._minDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset minDate(value: D | null) { this._minDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _minDate: D | null;\n/**\n * The maximum selectable date.\n * @return {?}\n */\nget maxDate(): D | null { return this._maxDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset maxDate(value: D | null) { this._maxDate = coerceDateProperty(this._dateAdapter, value); }\nprivate _maxDate: D | null;\n/**\n * A function used to filter which dates are selectable.\n */\ndateFilter: (date: D) => boolean;\n/**\n * Emits when the currently selected date changes.\n */\nselectedChange = new EventEmitter<D>();\n/**\n * Emits when any date is selected.\n */\nuserSelection = new EventEmitter<void>();\n/**\n * Date filter for the month and year views.\n */\n_dateFilterForViews = (date: D) => {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n/**\n * The current active date. This determines which time period is shown and which date is\n * highlighted when using keyboard navigation.\n * @return {?}\n */\nget _activeDate(): D { return this._clampedActiveDate; }\n/**\n * @param {?} value\n * @return {?}\n */\nset _activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n  }\nprivate _clampedActiveDate: D;\n/**\n * Whether the calendar is in month view.\n */\n_monthView: boolean;\n/**\n * The label for the current calendar view.\n * @return {?}\n */\nget _periodButtonText(): string {\n    return this._monthView ?\n        this._dateAdapter.format(this._activeDate, this._dateFormats.display.monthYearLabel)\n            .toLocaleUpperCase() :\n        this._dateAdapter.getYearName(this._activeDate);\n  }\n/**\n * @return {?}\n */\nget _periodButtonLabel(): string {\n    return this._monthView ? this._intl.switchToYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n/**\n * The label for the the previous button.\n * @return {?}\n */\nget _prevButtonLabel(): string {\n    return this._monthView ? this._intl.prevMonthLabel : this._intl.prevYearLabel;\n  }\n/**\n * The label for the the next button.\n * @return {?}\n */\nget _nextButtonLabel(): string {\n    return this._monthView ? this._intl.nextMonthLabel : this._intl.nextYearLabel;\n  }\n/**\n * @param {?} _elementRef\n * @param {?} _intl\n * @param {?} _ngZone\n * @param {?} _dateAdapter\n * @param {?} _dateFormats\n * @param {?} changeDetectorRef\n */\nconstructor(private _elementRef: ElementRef,\nprivate _intl: MatDatepickerIntl,\nprivate _ngZone: NgZone,\nprivate _dateAdapter: DateAdapter<D>,\nprivate _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._activeDate = this.startAt || this._dateAdapter.today();\n    this._focusActiveCell();\n    this._monthView = this.startView != 'year';\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n/**\n * Handles date selection in the month view.\n * @param {?} date\n * @return {?}\n */\n_dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n/**\n * @return {?}\n */\n_userSelected(): void {\n    this.userSelection.emit();\n  }\n/**\n * Handles month selection in the year view.\n * @param {?} month\n * @return {?}\n */\n_monthSelected(month: D): void {\n    this._activeDate = month;\n    this._monthView = true;\n  }\n/**\n * Handles user clicks on the period label.\n * @return {?}\n */\n_currentPeriodClicked(): void {\n    this._monthView = !this._monthView;\n  }\n/**\n * Handles user clicks on the previous button.\n * @return {?}\n */\n_previousClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, -1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, -1);\n  }\n/**\n * Handles user clicks on the next button.\n * @return {?}\n */\n_nextClicked(): void {\n    this._activeDate = this._monthView ?\n        this._dateAdapter.addCalendarMonths(this._activeDate, 1) :\n        this._dateAdapter.addCalendarYears(this._activeDate, 1);\n  }\n/**\n * Whether the previous period button is enabled.\n * @return {?}\n */\n_previousEnabled(): boolean {\n    if (!this.minDate) {\n      return true;\n    }\n    return !this.minDate || !this._isSameView(this._activeDate, this.minDate);\n  }\n/**\n * Whether the next period button is enabled.\n * @return {?}\n */\n_nextEnabled(): boolean {\n    return !this.maxDate || !this._isSameView(this._activeDate, this.maxDate);\n  }\n/**\n * Handles keydown events on the calendar body.\n * @param {?} event\n * @return {?}\n */\n_handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n    if (this._monthView) {\n      this._handleCalendarBodyKeydownInMonthView(event);\n    } else {\n      this._handleCalendarBodyKeydownInYearView(event);\n    }\n  }\n/**\n * Focuses the active cell after the microtask queue is empty.\n * @return {?}\n */\n_focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.mat-calendar-body-active').focus();\n      });\n    });\n  }\n/**\n * Whether the two dates represent the same view in the current view mode (month or year).\n * @param {?} date1\n * @param {?} date2\n * @return {?}\n */\nprivate _isSameView(date1: D, date2: D): boolean {\n    return this._monthView ?\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2) :\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in month view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInMonthView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n             this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n        if (this._dateFilterForViews(this._activeDate)) {\n          this._dateSelected(this._activeDate);\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Handles keydown events on the calendar body when calendar is in year view.\n * @param {?} event\n * @return {?}\n */\nprivate _handleCalendarBodyKeydownInYearView(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case RIGHT_ARROW:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case UP_ARROW:\n        this._activeDate = this._prevMonthInSameCol(this._activeDate);\n        break;\n      case DOWN_ARROW:\n        this._activeDate = this._nextMonthInSameCol(this._activeDate);\n        break;\n      case HOME:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this._activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this._activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n        this._monthSelected(this._activeDate);\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n/**\n * Determine the date for the month that comes before the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _prevMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? -5 :\n        (this._dateAdapter.getMonth(date) >= 7 ? -7 : -12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\n/**\n * Determine the date for the month that comes after the given month in the same column in the\n * calendar table.\n * @param {?} date\n * @return {?}\n */\nprivate _nextMonthInSameCol(date: D): D {\n    // Determine how many months to jump forward given that there are 2 empty slots at the beginning\n    // of each year.\n    let /** @type {?} */ increment = this._dateAdapter.getMonth(date) <= 4 ? 7 :\n        (this._dateAdapter.getMonth(date) >= 7 ? 5 : 12);\n    return this._dateAdapter.addCalendarMonths(date, increment);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: MatDatepickerIntl, },\n{type: NgZone, },\n{type: DateAdapter, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_FORMATS, ] }, ]},\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'startAt': [{ type: Input },],\n'startView': [{ type: Input },],\n'selected': [{ type: Input },],\n'minDate': [{ type: Input },],\n'maxDate': [{ type: Input },],\n'dateFilter': [{ type: Input },],\n'selectedChange': [{ type: Output },],\n'userSelection': [{ type: Output },],\n};\n}\n\nfunction MatCalendar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCalendar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCalendar.ctorParameters;\n/** @type {?} */\nMatCalendar.propDecorators;\n/** @type {?} */\nMatCalendar.prototype._intlChanges;\n/** @type {?} */\nMatCalendar.prototype._startAt;\n/**\n * Whether the calendar should be started in month or year view.\n * @type {?}\n */\nMatCalendar.prototype.startView;\n/** @type {?} */\nMatCalendar.prototype._selected;\n/** @type {?} */\nMatCalendar.prototype._minDate;\n/** @type {?} */\nMatCalendar.prototype._maxDate;\n/**\n * A function used to filter which dates are selectable.\n * @type {?}\n */\nMatCalendar.prototype.dateFilter;\n/**\n * Emits when the currently selected date changes.\n * @type {?}\n */\nMatCalendar.prototype.selectedChange;\n/**\n * Emits when any date is selected.\n * @type {?}\n */\nMatCalendar.prototype.userSelection;\n/**\n * Date filter for the month and year views.\n * @type {?}\n */\nMatCalendar.prototype._dateFilterForViews;\n/** @type {?} */\nMatCalendar.prototype._clampedActiveDate;\n/**\n * Whether the calendar is in month view.\n * @type {?}\n */\nMatCalendar.prototype._monthView;\n/** @type {?} */\nMatCalendar.prototype._elementRef;\n/** @type {?} */\nMatCalendar.prototype._intl;\n/** @type {?} */\nMatCalendar.prototype._ngZone;\n/** @type {?} */\nMatCalendar.prototype._dateAdapter;\n/** @type {?} */\nMatCalendar.prototype._dateFormats;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * \\@docs-private\n */\nexport class MatCalendarCell {\n/**\n * @param {?} value\n * @param {?} displayValue\n * @param {?} ariaLabel\n * @param {?} enabled\n */\nconstructor(public value: number,\npublic displayValue: string,\npublic ariaLabel: string,\npublic enabled: boolean) {}\n}\n\nfunction MatCalendarCell_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCalendarCell.prototype.value;\n/** @type {?} */\nMatCalendarCell.prototype.displayValue;\n/** @type {?} */\nMatCalendarCell.prototype.ariaLabel;\n/** @type {?} */\nMatCalendarCell.prototype.enabled;\n}\n\n/**\n * An internal component used to display calendar data in a table.\n * \\@docs-private\n */\nexport class MatCalendarBody {\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n */\nlabel: string;\n/**\n * The cells to display in the table.\n */\nrows: MatCalendarCell[][];\n/**\n * The value in the table that corresponds to today.\n */\ntodayValue: number;\n/**\n * The value in the table that is currently selected.\n */\nselectedValue: number;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n */\nlabelMinRequiredCells: number;\n/**\n * The number of columns in the table.\n */\nnumCols = 7;\n/**\n * Whether to allow selection of disabled cells.\n */\nallowDisabledSelection = false;\n/**\n * The cell number of the active cell in the table.\n */\nactiveCell = 0;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n */\ncellAspectRatio = 1;\n/**\n * Emits when a new value is selected.\n */\nselectedValueChange = new EventEmitter<number>();\n/**\n * @param {?} cell\n * @return {?}\n */\n_cellClicked(cell: MatCalendarCell): void {\n    if (!this.allowDisabledSelection && !cell.enabled) {\n      return;\n    }\n    this.selectedValueChange.emit(cell.value);\n  }\n/**\n * The number of blank cells to put at the beginning for the first row.\n * @return {?}\n */\nget _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n/**\n * @param {?} rowIndex\n * @param {?} colIndex\n * @return {?}\n */\n_isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let /** @type {?} */ cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n'rows': [{ type: Input },],\n'todayValue': [{ type: Input },],\n'selectedValue': [{ type: Input },],\n'labelMinRequiredCells': [{ type: Input },],\n'numCols': [{ type: Input },],\n'allowDisabledSelection': [{ type: Input },],\n'activeCell': [{ type: Input },],\n'cellAspectRatio': [{ type: Input },],\n'selectedValueChange': [{ type: Output },],\n};\n}\n\nfunction MatCalendarBody_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCalendarBody.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCalendarBody.ctorParameters;\n/** @type {?} */\nMatCalendarBody.propDecorators;\n/**\n * The label for the table. (e.g. \"Jan 2017\").\n * @type {?}\n */\nMatCalendarBody.prototype.label;\n/**\n * The cells to display in the table.\n * @type {?}\n */\nMatCalendarBody.prototype.rows;\n/**\n * The value in the table that corresponds to today.\n * @type {?}\n */\nMatCalendarBody.prototype.todayValue;\n/**\n * The value in the table that is currently selected.\n * @type {?}\n */\nMatCalendarBody.prototype.selectedValue;\n/**\n * The minimum number of free cells needed to fit the label in the first row.\n * @type {?}\n */\nMatCalendarBody.prototype.labelMinRequiredCells;\n/**\n * The number of columns in the table.\n * @type {?}\n */\nMatCalendarBody.prototype.numCols;\n/**\n * Whether to allow selection of disabled cells.\n * @type {?}\n */\nMatCalendarBody.prototype.allowDisabledSelection;\n/**\n * The cell number of the active cell in the table.\n * @type {?}\n */\nMatCalendarBody.prototype.activeCell;\n/**\n * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n * maintained even as the table resizes.\n * @type {?}\n */\nMatCalendarBody.prototype.cellAspectRatio;\n/**\n * Emits when a new value is selected.\n * @type {?}\n */\nMatCalendarBody.prototype.selectedValueChange;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleRef,\n} from '@angular/material/core';\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\nexport type TransitionCheckState = number;\nexport let TransitionCheckState: any = {};\nTransitionCheckState.Init = 0;\nTransitionCheckState.Checked = 1;\nTransitionCheckState.Unchecked = 2;\nTransitionCheckState.Indeterminate = 3;\nTransitionCheckState[TransitionCheckState.Init] = \"Init\";\nTransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\nTransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\nTransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n\n/**\n * Change event object emitted by MatCheckbox.\n */\nexport class MatCheckboxChange {\n/**\n * The source MatCheckbox of the event.\n */\nsource: MatCheckbox;\n/**\n * The new `checked` value of the checkbox.\n */\nchecked: boolean;\n}\n\nfunction MatCheckboxChange_tsickle_Closure_declarations() {\n/**\n * The source MatCheckbox of the event.\n * @type {?}\n */\nMatCheckboxChange.prototype.source;\n/**\n * The new `checked` value of the checkbox.\n * @type {?}\n */\nMatCheckboxChange.prototype.checked;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatCheckboxBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatCheckboxBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCheckboxBase.prototype._renderer;\n/** @type {?} */\nMatCheckboxBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatCheckboxMixinBase =\n  mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent');\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://www.google.com/design/spec/components/selection-controls.html\n */\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, CanDisableRipple {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\nprivate _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n */\nid: string = this._uniqueId;\n/**\n * Returns the unique id for the visual hidden input.\n * @return {?}\n */\nget inputId(): string { return `${this.id || this._uniqueId}-input`; }\nprivate _required: boolean;\n/**\n * Whether the checkbox is required.\n * @return {?}\n */\nget required(): boolean { return this._required; }\n/**\n * @param {?} value\n * @return {?}\n */\nset required(value) { this._required = coerceBooleanProperty(value); }\n/**\n * Whether or not the checkbox should appear before or after the label.\n * @deprecated\n * @return {?}\n */\nget align(): 'start' | 'end' {\n    // align refers to the checkbox relative to the label, while labelPosition refers to the\n    // label relative to the checkbox. As such, they are inverted.\n    return this.labelPosition == 'after' ? 'start' : 'end';\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset align(v) {\n    this.labelPosition = (v == 'start') ? 'after' : 'before';\n  }\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n */\nlabelPosition: 'before' | 'after' = 'after';\n/**\n * Tabindex value that is passed to the underlying input element.\n */\ntabIndex: number = 0;\n/**\n * Name value will be applied to the input element if present\n */\nname: string | null = null;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n */\nchange: EventEmitter<MatCheckboxChange> = new EventEmitter<MatCheckboxChange>();\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n */\nindeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n/**\n * The value attribute of the native input element\n */\nvalue: string ;\n/**\n * The native `<input type=\"checkbox\"> element\n */\n_inputElement: ElementRef;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n */\n_ripple: MatRipple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n */\nonTouched: () => any = () => {};\nprivate _currentAnimationClass: string = '';\nprivate _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\nprivate _checked: boolean = false;\nprivate _indeterminate: boolean = false;\nprivate _controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * Reference to the focused state ripple.\n */\nprivate _focusRipple: RippleRef | null;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._inputElement.nativeElement, this._renderer, false)\n      .subscribe(focusOrigin => this._onInputFocusChange(focusOrigin));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n  }\n/**\n * Whether the checkbox is checked.\n * @return {?}\n */\nget checked() {\n    return this._checked;\n  }\n/**\n * @param {?} checked\n * @return {?}\n */\nset checked(checked: boolean) {\n    if (checked != this.checked) {\n      this._checked = checked;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n * set to false.\n * @return {?}\n */\nget indeterminate() {\n    return this._indeterminate;\n  }\n/**\n * @param {?} indeterminate\n * @return {?}\n */\nset indeterminate(indeterminate: boolean) {\n    let /** @type {?} */ changed =  indeterminate != this._indeterminate;\n    this._indeterminate = indeterminate;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Method being called whenever the label text changes.\n * @return {?}\n */\n_onLabelTextChange() {\n    // This method is getting called whenever the label of the checkbox changes.\n    // Since the checkbox uses the OnPush strategy we need to notify it about the change\n    // that has been recognized by the cdkObserveContent directive.\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.checked = !!value;\n  }\n/**\n * Registers a callback to be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Function to be called on change.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback to be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn Callback to be triggered when the checkbox is touched.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Sets the checkbox's disabled state. Implemented as a part of ControlValueAccessor.\n * @param {?} isDisabled Whether the checkbox should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * @param {?} newState\n * @return {?}\n */\nprivate _transitionCheckState(newState: TransitionCheckState) {\n    let /** @type {?} */ oldState = this._currentCheckState;\n    let /** @type {?} */ renderer = this._renderer;\n    let /** @type {?} */ elementRef = this._elementRef;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      renderer.removeClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      renderer.addClass(elementRef.nativeElement, this._currentAnimationClass);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _emitChangeEvent() {\n    let /** @type {?} */ event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n/**\n * Function is called whenever the focus changes for the input element.\n * @param {?} focusOrigin\n * @return {?}\n */\nprivate _onInputFocusChange(focusOrigin: FocusOrigin) {\n    if (!this._focusRipple && focusOrigin === 'keyboard') {\n      this._focusRipple = this._ripple.launch(0, 0, {persistent: true, centered: true});\n    } else if (!focusOrigin) {\n      this._removeFocusRipple();\n      this.onTouched();\n    }\n  }\n/**\n * Toggles the `checked` state of the checkbox.\n * @return {?}\n */\ntoggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Event handler for checkbox input element.\n * Toggles checked state if element is not disabled.\n * Do not toggle on (change) event since IE doesn't fire change event when\n *   indeterminate checkbox is clicked.\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    this._removeFocusRipple();\n\n    if (!this.disabled) {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this._indeterminate) {\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n        this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    }\n  }\n/**\n * Focuses the checkbox.\n * @return {?}\n */\nfocus(): void {\n    this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n/**\n * @param {?} oldState\n * @param {?} newState\n * @return {?}\n */\nprivate _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    let /** @type {?} */ animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n/**\n * Fades out the focus state ripple.\n * @return {?}\n */\nprivate _removeFocusRipple(): void {\n    if (this._focusRipple) {\n      this._focusRipple.fadeOut();\n      this._focusRipple = null;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'align': [{ type: Input },],\n'labelPosition': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'name': [{ type: Input },],\n'change': [{ type: Output },],\n'indeterminateChange': [{ type: Output },],\n'value': [{ type: Input },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'_ripple': [{ type: ViewChild, args: [MatRipple, ] },],\n'checked': [{ type: Input },],\n'indeterminate': [{ type: Input },],\n};\n}\n\nfunction MatCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCheckbox.ctorParameters;\n/** @type {?} */\nMatCheckbox.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMatCheckbox.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMatCheckbox.prototype.ariaLabelledby;\n/** @type {?} */\nMatCheckbox.prototype._uniqueId;\n/**\n * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n * @type {?}\n */\nMatCheckbox.prototype.id;\n/** @type {?} */\nMatCheckbox.prototype._required;\n/**\n * Whether the label should appear after or before the checkbox. Defaults to 'after'\n * @type {?}\n */\nMatCheckbox.prototype.labelPosition;\n/**\n * Tabindex value that is passed to the underlying input element.\n * @type {?}\n */\nMatCheckbox.prototype.tabIndex;\n/**\n * Name value will be applied to the input element if present\n * @type {?}\n */\nMatCheckbox.prototype.name;\n/**\n * Event emitted when the checkbox's `checked` value changes.\n * @type {?}\n */\nMatCheckbox.prototype.change;\n/**\n * Event emitted when the checkbox's `indeterminate` value changes.\n * @type {?}\n */\nMatCheckbox.prototype.indeterminateChange;\n/**\n * The value attribute of the native input element\n * @type {?}\n */\nMatCheckbox.prototype.value;\n/**\n * The native `<input type=\"checkbox\"> element\n * @type {?}\n */\nMatCheckbox.prototype._inputElement;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * @type {?}\n */\nMatCheckbox.prototype._ripple;\n/**\n * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n * \\@docs-private\n * @type {?}\n */\nMatCheckbox.prototype.onTouched;\n/** @type {?} */\nMatCheckbox.prototype._currentAnimationClass;\n/** @type {?} */\nMatCheckbox.prototype._currentCheckState;\n/** @type {?} */\nMatCheckbox.prototype._checked;\n/** @type {?} */\nMatCheckbox.prototype._indeterminate;\n/** @type {?} */\nMatCheckbox.prototype._controlValueAccessorChangeFn;\n/**\n * Reference to the focused state ripple.\n * @type {?}\n */\nMatCheckbox.prototype._focusRipple;\n/** @type {?} */\nMatCheckbox.prototype._changeDetectorRef;\n/** @type {?} */\nMatCheckbox.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const /** @type {?} */ _MatCheckboxRequiredValidator = CheckboxRequiredValidator;\n\nexport const /** @type {?} */ MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nexport class MatCheckboxRequiredValidator extends _MatCheckboxRequiredValidator {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCheckboxRequiredValidator_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCheckboxRequiredValidator.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCheckboxRequiredValidator.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatRippleModule, MatCommonModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MatCheckboxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule, A11yModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCheckboxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR,TransitionCheckState,MatCheckboxChange,MatCheckboxBase,_MatCheckboxMixinBase,MatCheckbox,MatCheckboxModule,_MatCheckboxRequiredValidator,MAT_CHECKBOX_REQUIRED_VALIDATOR,MatCheckboxRequiredValidator} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport {CanColor, CanDisable, mixinColor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs/Subject';\n\n\nexport interface MatChipEvent {\n  chip: MatChip;\n}\n/**\n * Event object emitted by MatChip when selected or deselected.\n */\nexport class MatChipSelectionChange {\n/**\n * @param {?} source\n * @param {?} selected\n * @param {?=} isUserInput\n */\nconstructor(public source: MatChip,\npublic selected: boolean,\npublic isUserInput = false) { }\n}\n\nfunction MatChipSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipSelectionChange.prototype.source;\n/** @type {?} */\nMatChipSelectionChange.prototype.selected;\n/** @type {?} */\nMatChipSelectionChange.prototype.isUserInput;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatChipBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {\n  }\n}\n\nfunction MatChipBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipBase.prototype._renderer;\n/** @type {?} */\nMatChipBase.prototype._elementRef;\n}\n\n\nexport const /** @type {?} */ _MatChipMixinBase = mixinColor(mixinDisabled(MatChipBase), 'primary');\n/**\n * Dummy directive to add CSS class to basic chips.\n * \\@docs-private\n */\nexport class MatBasicChip {\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `mat-basic-chip, [mat-basic-chip]`,\n  host: {'class': 'mat-basic-chip'},\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatBasicChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMatBasicChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatBasicChip.ctorParameters;\n}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable {\n\n  protected _value: any;\n\n  protected _selected: boolean = false;\n\n  protected _selectable: boolean = true;\n\n  protected _removable: boolean = true;\n/**\n * Whether the chip has focus.\n */\n_hasFocus: boolean = false;\n/**\n * Whether the chip is selected.\n * @return {?}\n */\nget selected(): boolean {\n    return this._selected;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selected(value: boolean) {\n    this._selected = coerceBooleanProperty(value);\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: value\n    });\n  }\n/**\n * The value of the chip. Defaults to the content inside <mat-chip> tags.\n * @return {?}\n */\nget value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this._value = newValue;\n  }\n/**\n * Whether or not the chips are selectable. When a chip is not selectable,\n * changes to it's selected state are always ignored.\n * @return {?}\n */\nget selectable(): boolean {\n    return this._selectable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n/**\n * Determines whether or not the chip displays the remove styling and emits (remove) events.\n * @return {?}\n */\nget removable(): boolean {\n    return this._removable;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n/**\n * Emits when the chip is focused.\n */\n_onFocus = new Subject<MatChipEvent>();\n/**\n * Emits when the chip is blured.\n */\n_onBlur = new Subject<MatChipEvent>();\n/**\n * Emitted when the chip is selected or deselected.\n */\nselectionChange = new EventEmitter<MatChipSelectionChange>();\n/**\n * Emitted when the chip is destroyed.\n */\ndestroyed = new EventEmitter<MatChipEvent>();\n/**\n * Emitted when the chip is destroyed.\n * @deprecated Use 'destroyed' instead.\n */\ndestroy = this.destroyed;\n/**\n * Emitted when a chip is to be removed.\n */\nremoved = new EventEmitter<MatChipEvent>();\n/**\n * Emitted when a chip is to be removed.\n * @deprecated Use `removed` instead.\n */\nonRemove = this.removed;\n/**\n * @return {?}\n */\nget ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n/**\n * @param {?} renderer\n * @param {?} _elementRef\n */\nconstructor(renderer: Renderer2,\npublic _elementRef: ElementRef) {\n    super(renderer, _elementRef);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this.destroyed.emit({chip: this});\n  }\n/**\n * Selects the chip.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: true\n    });\n  }\n/**\n * Deselects the chip.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: false,\n      selected: false\n    });\n  }\n/**\n * Select this chip and emit selected event\n * @return {?}\n */\nselectViaInteraction(): void {\n    this._selected = true;\n    // Emit select event when selected changes.\n    this.selectionChange.emit({\n      source: this,\n      isUserInput: true,\n      selected: true\n    });\n  }\n/**\n * Toggles the current selected state of this chip.\n * @param {?=} isUserInput\n * @return {?}\n */\ntoggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n\n    return this.selected;\n  }\n/**\n * Allows for programmatic focusing of the chip.\n * @return {?}\n */\nfocus(): void {\n    this._elementRef.nativeElement.focus();\n    this._onFocus.next({chip: this});\n  }\n/**\n * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n * BACKSPACE keys are pressed.\n * \n * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n * @return {?}\n */\nremove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n/**\n * Ensures events fire properly upon click.\n * @param {?} event\n * @return {?}\n */\n_handleClick(event: Event) {\n    // Check disabled\n    if (this.disabled) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.focus();\n  }\n/**\n * Handle custom key presses.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n/**\n * @return {?}\n */\n_blur(): void {\n    this._hasFocus = false;\n    this._onBlur.next({chip: this});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    'tabindex': '-1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_hasFocus = true',\n    '(blur)': '_blur()',\n  },\n\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selected': [{ type: Input },],\n'value': [{ type: Input },],\n'selectable': [{ type: Input },],\n'removable': [{ type: Input },],\n'selectionChange': [{ type: Output },],\n'destroyed': [{ type: Output },],\n'destroy': [{ type: Output },],\n'removed': [{ type: Output },],\n'onRemove': [{ type: Output, args: ['remove', ] },],\n};\n}\n\nfunction MatChip_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChip.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatChip.ctorParameters;\n/** @type {?} */\nMatChip.propDecorators;\n/** @type {?} */\nMatChip.prototype._value;\n/** @type {?} */\nMatChip.prototype._selected;\n/** @type {?} */\nMatChip.prototype._selectable;\n/** @type {?} */\nMatChip.prototype._removable;\n/**\n * Whether the chip has focus.\n * @type {?}\n */\nMatChip.prototype._hasFocus;\n/**\n * Emits when the chip is focused.\n * @type {?}\n */\nMatChip.prototype._onFocus;\n/**\n * Emits when the chip is blured.\n * @type {?}\n */\nMatChip.prototype._onBlur;\n/**\n * Emitted when the chip is selected or deselected.\n * @type {?}\n */\nMatChip.prototype.selectionChange;\n/**\n * Emitted when the chip is destroyed.\n * @type {?}\n */\nMatChip.prototype.destroyed;\n/**\n * Emitted when the chip is destroyed.\n * @deprecated Use 'destroyed' instead.\n * @type {?}\n */\nMatChip.prototype.destroy;\n/**\n * Emitted when a chip is to be removed.\n * @type {?}\n */\nMatChip.prototype.removed;\n/**\n * Emitted when a chip is to be removed.\n * @deprecated Use `removed` instead.\n * @type {?}\n */\nMatChip.prototype.onRemove;\n/** @type {?} */\nMatChip.prototype._elementRef;\n}\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n * \n * Example:\n * \n *     <mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>\n * \n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nexport class MatChipRemove {\n/**\n * @param {?} _parentChip\n */\nconstructor(protected _parentChip: MatChip) {\n  }\n/**\n * Calls the parent chip's public `remove()` method if applicable.\n * @return {?}\n */\n_handleClick(): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove',\n    '(click)': '_handleClick($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatChip, },\n];\n}\n\nfunction MatChipRemove_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipRemove.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatChipRemove.ctorParameters;\n/** @type {?} */\nMatChipRemove.prototype._parentChip;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, DELETE, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Observable} from 'rxjs/Observable';\nimport {merge} from 'rxjs/observable/merge';\nimport {Subject} from 'rxjs/Subject';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipInput} from './chip-input';\n\n// Increasing integer for generating unique ids for chip-list components.\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Change event object that is emitted when the chip list value has changed.\n */\nexport class MatChipListChange {\n/**\n * @param {?} source\n * @param {?} value\n */\nconstructor(public source: MatChipList,\npublic value: any) { }\n}\n\nfunction MatChipListChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipListChange.prototype.source;\n/** @type {?} */\nMatChipListChange.prototype.value;\n}\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\nexport class MatChipList implements MatFormFieldControl<any>, ControlValueAccessor,\n    AfterContentInit, OnInit, OnDestroy {\n  readonly controlType = 'mat-chip-list';\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n * needs to run change detection.\n */\nstateChanges = new Subject<void>();\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n */\nprotected _lastDestroyedIndex: number|null = null;\n/**\n * Track which chips we're listening to for focus/destruction.\n */\nprotected _chipSet: WeakMap<MatChip, boolean> = new WeakMap();\n/**\n * Subscription to tabbing out from the chip list.\n */\nprivate _tabOutSubscription = Subscription.EMPTY;\n/**\n * Subscription to changes in the chip list.\n */\nprivate _changeSubscription: Subscription;\n/**\n * Subscription to focus changes in the chips.\n */\nprivate _chipFocusSubscription: Subscription|null;\n/**\n * Subscription to blur changes in the chips.\n */\nprivate _chipBlurSubscription: Subscription|null;\n/**\n * Subscription to selection changes in chips.\n */\nprivate _chipSelectionSubscription: Subscription|null;\n/**\n * Subscription to remove changes in chips.\n */\nprivate _chipRemoveSubscription: Subscription|null;\n/**\n * Whether or not the chip is selectable.\n */\nprotected _selectable: boolean = true;\n/**\n * Whether the component is in multiple selection mode.\n */\nprivate _multiple: boolean = false;\n/**\n * The chip input to add more chips\n */\nprotected _chipInput: MatChipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n */\nprotected _ariaDescribedby: string;\n/**\n * Id of the chip list\n */\nprotected _id: string;\n/**\n * Uid of the chip list\n */\nprotected _uid: string = `mat-chip-list-${nextUniqueId++}`;\n/**\n * Whether this is required\n */\nprotected _required: boolean = false;\n/**\n * Whether this is disabled\n */\nprotected _disabled: boolean = false;\n\n  protected _value: any;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput\n */\nprotected _placeholder: string;\n/**\n * Tab index for the chip list.\n */\n_tabIndex = 0;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n */\n_userTabIndex: number | null = null;\n/**\n * The FocusKeyManager which handles focus.\n */\n_keyManager: FocusKeyManager<MatChip>;\n/**\n * Function when touched\n */\n_onTouched = () => {};\n/**\n * Function when changed\n */\n_onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n */\nprivate _compareWith = (o1: any, o2: any) => o1 === o2;\n/**\n * The array of selected chips inside chip list.\n * @return {?}\n */\nget selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n/**\n * Whether the user should be allowed to select multiple chips.\n * @return {?}\n */\nget multiple(): boolean { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n/**\n * A function to compare the option values with the selected values. The first argument\n * is a value from an option. The second is a value from the selection. A boolean\n * should be returned.\n * @return {?}\n */\nget compareWith() { return this._compareWith; }\n/**\n * @param {?} fn\n * @return {?}\n */\nset compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n/**\n * Required for FormFieldControl\n * @return {?}\n */\nget value() { return this._value; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    this.writeValue(newValue);\n    this._value = newValue;\n  }\n/**\n * Required for FormFieldControl. The ID of the chip list\n * @param {?} value\n * @return {?}\n */\nset id(value: string) {\n    this._id = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget id() { return this._id || this._uid; }\n/**\n * Required for FormFieldControl. Whether the chip list is required.\n * @param {?} value\n * @return {?}\n */\nset required(value: any) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget required() {\n    return this._required;\n  }\n/**\n * For FormFieldControl. Use chip input's placholder if there's a chip input\n * @param {?} value\n * @return {?}\n */\nset placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nget placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n/**\n * Whether any chips or the matChipInput inside of this chip-list has focus.\n * @return {?}\n */\nget focused() {\n    return this.chips.some(chip => chip._hasFocus) ||\n      (this._chipInput && this._chipInput.focused);\n  }\n/**\n * Whether this chip-list contains no chips and no matChipInput.\n * @return {?}\n */\nget empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n/**\n * @return {?}\n */\nget shouldPlaceholderFloat(): boolean {\n    return this.empty;\n  }\n/**\n * Whether this chip-list is disabled.\n * @return {?}\n */\nget disabled() { return this.ngControl ? this.ngControl.disabled : this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether the chip list is in an error state.\n * @return {?}\n */\nget errorState(): boolean {\n    const /** @type {?} */ isInvalid = this.ngControl && this.ngControl.invalid;\n    const /** @type {?} */ isTouched = this.ngControl && this.ngControl.touched;\n    const /** @type {?} */ isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||\n      (this._parentForm && this._parentForm.submitted);\n    return !!(isInvalid && (isTouched || isSubmitted));\n  }\n/**\n * Orientation of the chip list.\n */\nariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n/**\n * Whether or not this chip is selectable. When a chip is not selectable,\n * its selected state is always ignored.\n * @return {?}\n */\nget selectable(): boolean { return this._selectable; }\n/**\n * @param {?} value\n * @return {?}\n */\nset selectable(value: boolean) { this._selectable = coerceBooleanProperty(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n/**\n * Combined stream of all of the child chips' selection change events.\n * @return {?}\n */\nget chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n/**\n * Combined stream of all of the child chips' focus change events.\n * @return {?}\n */\nget chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n/**\n * Combined stream of all of the child chips' blur change events.\n * @return {?}\n */\nget chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n/**\n * Combined stream of all of the child chips' remove change events.\n * @return {?}\n */\nget chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroy));\n  }\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n */\nchange: EventEmitter<MatChipListChange> = new EventEmitter<MatChipListChange>();\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n */\nvalueChange = new EventEmitter<any>();\n/**\n * The chip components contained within this chip list.\n */\nchips: QueryList<MatChip>;\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _changeDetectorRef\n * @param {?} _dir\n * @param {?} _parentForm\n * @param {?} _parentFormGroup\n * @param {?} ngControl\n */\nconstructor(protected _renderer: Renderer2,\n              protected _elementRef: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _dir: Directionality,\nprivate _parentForm: NgForm,\nprivate _parentFormGroup: FormGroupDirective,\npublic ngControl: NgControl) {\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterContentInit(): void {\n\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips).withWrap();\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._tabOutSubscription = this._keyManager.tabOut.subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this._changeSubscription = startWith.call(this.chips.changes, null).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._tabOutSubscription.unsubscribe();\n\n    if (this._changeSubscription) {\n      this._changeSubscription.unsubscribe();\n    }\n    this._dropSubscriptions();\n  }\n/**\n * Associates an HTML input element with this chip list.\n * @param {?} inputElement\n * @return {?}\n */\nregisterInput(inputElement: MatChipInput) {\n    this._chipInput = inputElement;\n  }\n/**\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} disabled\n * @return {?}\n */\nsetDisabledState(disabled: boolean): void {\n    this.disabled = disabled;\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nonContainerClick() {\n    this.focus();\n  }\n/**\n * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n * are no eligible chips.\n * @return {?}\n */\nfocus() {\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n/**\n * Attempt to focus an input if we have one.\n * @return {?}\n */\n_focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n/**\n * Pass events to the keyboard manager. Available here for tests.\n * @param {?} event\n * @return {?}\n */\n_keydown(event: KeyboardEvent) {\n    let /** @type {?} */ code = event.keyCode;\n    let /** @type {?} */ target = /** @type {?} */(( event.target as HTMLElement));\n    let /** @type {?} */ isInputEmpty = this._isInputEmpty(target);\n    let /** @type {?} */ isRtl = this._dir && this._dir.value == 'rtl';\n\n    let /** @type {?} */ isPrevKey = (code === (isRtl ? RIGHT_ARROW : LEFT_ARROW));\n    let /** @type {?} */ isNextKey = (code === (isRtl ? LEFT_ARROW : RIGHT_ARROW));\n    let /** @type {?} */ isBackKey = (code === BACKSPACE || code == DELETE || code == UP_ARROW || isPrevKey);\n    // If they are on an empty input and hit backspace/delete/left arrow, focus the last chip\n    if (isInputEmpty && isBackKey) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n      return;\n    }\n\n    // If they are on a chip, check for space/left/right, otherwise pass to our key manager (like\n    // up/down keys)\n    if (target && target.classList.contains('mat-chip')) {\n      if (isPrevKey) {\n        this._keyManager.setPreviousItemActive();\n        event.preventDefault();\n      } else if (isNextKey) {\n        this._keyManager.setNextItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n    }\n    this.stateChanges.next();\n  }\n/**\n * Check the tab index as you should not be allowed to focus an empty list.\n * @return {?}\n */\nprotected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n/**\n * Update key manager's active item when chip is deleted.\n * If the deleted chip is the last chip in chip list, focus the new last chip.\n * Otherwise focus the next chip in the list.\n * Save `_lastDestroyedIndex` so we can set the correct focus.\n * @param {?} chip\n * @return {?}\n */\nprotected _updateKeyManager(chip: MatChip) {\n    let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(chip);\n    if (this._isValidIndex(chipIndex)) {\n      if (chip._hasFocus) {\n        // Check whether the chip is not the last item\n        if (chipIndex < this.chips.length - 1) {\n          this._keyManager.setActiveItem(chipIndex);\n        } else if (chipIndex - 1 >= 0) {\n          this._keyManager.setActiveItem(chipIndex - 1);\n        }\n      }\n      if (this._keyManager.activeItemIndex === chipIndex) {\n        this._lastDestroyedIndex = chipIndex;\n      }\n    }\n  }\n/**\n * Checks to see if a focus chip was recently destroyed so that we can refocus the next closest\n * one.\n * @return {?}\n */\nprotected _updateFocusForDestroyedChips() {\n    let /** @type {?} */ chipsArray = this.chips;\n\n    if (this._lastDestroyedIndex != null && chipsArray.length > 0) {\n      // Check whether the destroyed chip was the last item\n      const /** @type {?} */ newFocusIndex = Math.min(this._lastDestroyedIndex, chipsArray.length - 1);\n      this._keyManager.setActiveItem(newFocusIndex);\n      let /** @type {?} */ focusChip = this._keyManager.activeItem;\n      // Focus the chip\n      if (focusChip) {\n        focusChip.focus();\n      }\n    } else if (chipsArray.length === 0) {\n      this._focusInput();\n    }\n\n    // Reset our destroyed index\n    this._lastDestroyedIndex = null;\n  }\n/**\n * Utility to ensure all indexes are valid.\n * \n * @param {?} index The index to be checked.\n * @return {?} True if the index is valid for our list of chips.\n */\nprivate _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let /** @type {?} */ input = /** @type {?} */(( element as HTMLInputElement));\n\n      return !input.value;\n    }\n\n    return false;\n  }\n/**\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?}\n */\n_setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const /** @type {?} */ correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        this._keyManager.setActiveItem(this.chips.toArray().indexOf(correspondingChip));\n      }\n    }\n  }\n/**\n * Finds and selects the chip based on its value.\n * @param {?} value\n * @param {?=} isUserInput\n * @return {?} Chip that has the corresponding value.\n */\nprivate _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const /** @type {?} */ correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n/**\n * @return {?}\n */\nprivate _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n      this.stateChanges.next();\n    });\n  }\n/**\n * Deselects every chip in the list.\n * @param {?=} skip Chip that should not be deselected.\n * @return {?}\n */\nprivate _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n/**\n * Sorts the model values, ensuring that they keep the same\n * order that they have in the panel.\n * @return {?}\n */\nprivate _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n/**\n * Emits change event to set the model value.\n * @param {?=} fallbackValue\n * @return {?}\n */\nprivate _propagateChanges(fallbackValue?: any): void {\n    let /** @type {?} */ valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * When blurred, mark the field as touched when focus moved outside the chip list.\n * @return {?}\n */\n_blur() {\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n/**\n * Mark the field as touched\n * @return {?}\n */\n_markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n/**\n * @return {?}\n */\nprivate _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n/**\n * @return {?}\n */\nprivate _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n/**\n * Listens to user-generated selection events on each chip.\n * @return {?}\n */\nprivate _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let /** @type {?} */ chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(_ => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n/**\n * @return {?}\n */\nprivate _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {\n      this._updateKeyManager(event.chip);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': '_tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    'role': 'listbox',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)'\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: NgForm, decorators: [{ type: Optional }, ]},\n{type: FormGroupDirective, decorators: [{ type: Optional }, ]},\n{type: NgControl, decorators: [{ type: Optional }, { type: Self }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'multiple': [{ type: Input },],\n'compareWith': [{ type: Input },],\n'value': [{ type: Input },],\n'id': [{ type: Input },],\n'required': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'disabled': [{ type: Input },],\n'ariaOrientation': [{ type: Input, args: ['aria-orientation', ] },],\n'selectable': [{ type: Input },],\n'tabIndex': [{ type: Input },],\n'change': [{ type: Output },],\n'valueChange': [{ type: Output },],\n'chips': [{ type: ContentChildren, args: [MatChip, ] },],\n};\n}\n\nfunction MatChipList_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipList.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatChipList.ctorParameters;\n/** @type {?} */\nMatChipList.propDecorators;\n/** @type {?} */\nMatChipList.prototype.controlType;\n/**\n * Stream that emits whenever the state of the input changes such that the wrapping `MatFormField`\n * needs to run change detection.\n * @type {?}\n */\nMatChipList.prototype.stateChanges;\n/**\n * When a chip is destroyed, we track the index so we can focus the appropriate next chip.\n * @type {?}\n */\nMatChipList.prototype._lastDestroyedIndex;\n/**\n * Track which chips we're listening to for focus/destruction.\n * @type {?}\n */\nMatChipList.prototype._chipSet;\n/**\n * Subscription to tabbing out from the chip list.\n * @type {?}\n */\nMatChipList.prototype._tabOutSubscription;\n/**\n * Subscription to changes in the chip list.\n * @type {?}\n */\nMatChipList.prototype._changeSubscription;\n/**\n * Subscription to focus changes in the chips.\n * @type {?}\n */\nMatChipList.prototype._chipFocusSubscription;\n/**\n * Subscription to blur changes in the chips.\n * @type {?}\n */\nMatChipList.prototype._chipBlurSubscription;\n/**\n * Subscription to selection changes in chips.\n * @type {?}\n */\nMatChipList.prototype._chipSelectionSubscription;\n/**\n * Subscription to remove changes in chips.\n * @type {?}\n */\nMatChipList.prototype._chipRemoveSubscription;\n/**\n * Whether or not the chip is selectable.\n * @type {?}\n */\nMatChipList.prototype._selectable;\n/**\n * Whether the component is in multiple selection mode.\n * @type {?}\n */\nMatChipList.prototype._multiple;\n/**\n * The chip input to add more chips\n * @type {?}\n */\nMatChipList.prototype._chipInput;\n/**\n * The aria-describedby attribute on the chip list for improved a11y.\n * @type {?}\n */\nMatChipList.prototype._ariaDescribedby;\n/**\n * Id of the chip list\n * @type {?}\n */\nMatChipList.prototype._id;\n/**\n * Uid of the chip list\n * @type {?}\n */\nMatChipList.prototype._uid;\n/**\n * Whether this is required\n * @type {?}\n */\nMatChipList.prototype._required;\n/**\n * Whether this is disabled\n * @type {?}\n */\nMatChipList.prototype._disabled;\n/** @type {?} */\nMatChipList.prototype._value;\n/**\n * Placeholder for the chip list. Alternatively, placeholder can be set on MatChipInput\n * @type {?}\n */\nMatChipList.prototype._placeholder;\n/**\n * Tab index for the chip list.\n * @type {?}\n */\nMatChipList.prototype._tabIndex;\n/**\n * User defined tab index.\n * When it is not null, use user defined tab index. Otherwise use _tabIndex\n * @type {?}\n */\nMatChipList.prototype._userTabIndex;\n/**\n * The FocusKeyManager which handles focus.\n * @type {?}\n */\nMatChipList.prototype._keyManager;\n/**\n * Function when touched\n * @type {?}\n */\nMatChipList.prototype._onTouched;\n/**\n * Function when changed\n * @type {?}\n */\nMatChipList.prototype._onChange;\n/** @type {?} */\nMatChipList.prototype._selectionModel;\n/**\n * Comparison function to specify which option is displayed. Defaults to object equality.\n * @type {?}\n */\nMatChipList.prototype._compareWith;\n/**\n * Orientation of the chip list.\n * @type {?}\n */\nMatChipList.prototype.ariaOrientation;\n/**\n * Event emitted when the selected chip list value has been changed by the user.\n * @type {?}\n */\nMatChipList.prototype.change;\n/**\n * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n * to facilitate the two-way binding for the `value` input.\n * \\@docs-private\n * @type {?}\n */\nMatChipList.prototype.valueChange;\n/**\n * The chip components contained within this chip list.\n * @type {?}\n */\nMatChipList.prototype.chips;\n/** @type {?} */\nMatChipList.prototype._renderer;\n/** @type {?} */\nMatChipList.prototype._elementRef;\n/** @type {?} */\nMatChipList.prototype._changeDetectorRef;\n/** @type {?} */\nMatChipList.prototype._dir;\n/** @type {?} */\nMatChipList.prototype._parentForm;\n/** @type {?} */\nMatChipList.prototype._parentFormGroup;\n/** @type {?} */\nMatChipList.prototype.ngControl;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {Directive, ElementRef, EventEmitter, Input, Output} from '@angular/core';\nimport {MatChipList} from './chip-list';\n\n\nexport interface MatChipInputEvent {\n  input: HTMLInputElement;\n  value: string;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside <mat-form-field>.\n * May be placed inside or outside of an <mat-chip-list>.\n */\nexport class MatChipInput {\n  focused: boolean = false;\n  _chipList: MatChipList;\n/**\n * Register input for chip list\n * @param {?} value\n * @return {?}\n */\nset chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n/**\n * Whether or not the chipEnd event will be emitted when the input is blurred.\n * @return {?}\n */\nget addOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset addOnBlur(value) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  // TODO(tinayuangao): Support Set here\n   separatorKeyCodes: number[] = [ENTER];\n/**\n * Emitted when a chip is to be added.\n */\nchipEnd = new EventEmitter<MatChipInputEvent>();\n/**\n * @param {?} value\n * @return {?}\n */\nset matChipList(value: MatChipList) { this.chipList = value; }\n/**\n * @return {?}\n */\nget matAddOnBlur() { return this._addOnBlur; }\n/**\n * @param {?} value\n * @return {?}\n */\nset matAddOnBlur(value) { this.addOnBlur = value; }\n/**\n * @return {?}\n */\nget matSeparatorKeyCodes() { return this.separatorKeyCodes; }\n/**\n * @param {?} v\n * @return {?}\n */\nset matSeparatorKeyCodes(v: number[]) { this.separatorKeyCodes = v; }\n\n   placeholder: string = '';\n/**\n * @return {?}\n */\nget empty(): boolean {\n    let /** @type {?} */ value: string | null = this._inputElement.value;\n    return value == null || value === '';\n  }\n/**\n * The native input element to which this directive is attached.\n */\nprotected _inputElement: HTMLInputElement;\n/**\n * @param {?} _elementRef\n */\nconstructor(protected _elementRef: ElementRef) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n/**\n * Utility method to make host definition/tests more clear.\n * @param {?=} event\n * @return {?}\n */\n_keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n/**\n * Checks to see if the blur should emit the (chipEnd) event.\n * @return {?}\n */\n_blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n/**\n * @return {?}\n */\n_focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n/**\n * Checks to see if the (chipEnd) event needs to be emitted.\n * @param {?=} event\n * @return {?}\n */\n_emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this.separatorKeyCodes.indexOf(event.keyCode) > -1) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nfocus() { this._inputElement.focus(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[matChipInputFor]',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'chipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'addOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'separatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'chipEnd': [{ type: Output, args: ['matChipInputTokenEnd', ] },],\n'matChipList': [{ type: Input, args: ['matChipInputFor', ] },],\n'matAddOnBlur': [{ type: Input, args: ['matChipInputAddOnBlur', ] },],\n'matSeparatorKeyCodes': [{ type: Input, args: ['matChipInputSeparatorKeyCodes', ] },],\n'placeholder': [{ type: Input },],\n};\n}\n\nfunction MatChipInput_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipInput.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatChipInput.ctorParameters;\n/** @type {?} */\nMatChipInput.propDecorators;\n/** @type {?} */\nMatChipInput.prototype.focused;\n/** @type {?} */\nMatChipInput.prototype._chipList;\n/** @type {?} */\nMatChipInput.prototype._addOnBlur;\n/** @type {?} */\nMatChipInput.prototype.separatorKeyCodes;\n/**\n * Emitted when a chip is to be added.\n * @type {?}\n */\nMatChipInput.prototype.chipEnd;\n/** @type {?} */\nMatChipInput.prototype.placeholder;\n/**\n * The native input element to which this directive is attached.\n * @type {?}\n */\nMatChipInput.prototype._inputElement;\n/** @type {?} */\nMatChipInput.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatChipList} from './chip-list';\nimport {MatBasicChip, MatChip, MatChipRemove} from './chip';\nimport {MatChipInput} from './chip-input';\nexport class MatChipsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [],\n  exports: [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipRemove, MatBasicChip],\n  declarations: [MatChipList, MatChip, MatChipInput, MatChipRemove,  MatChipRemove, MatBasicChip]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatChipsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatChipsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatChipsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MatDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMatDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMatDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMatDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMatDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMatDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMatDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMatDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMatDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMatDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMatDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.ariaDescribedBy;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MatDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MatDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @template C\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the dialog, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MatDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogContainer.ctorParameters;\n/** @type {?} */\nMatDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMatDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMatDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMatDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMatDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMatDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMatDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMatDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMatDialogContainer.prototype._elementRef;\n/** @type {?} */\nMatDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMatDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMatDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  OnDestroy,\n  Optional,\n  Renderer2,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple\n} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n/**\n * Default color palette for round buttons (mat-fab and mat-mini-fab)\n */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-button], a[mat-button]',\n  host: {'class': 'mat-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatRaisedButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-raised-button], a[mat-raised-button]',\n  host: {'class': 'mat-raised-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRaisedButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRaisedButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRaisedButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatIconButtonCssMatStyler {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-icon-button], a[mat-icon-button]',\n  host: {'class': 'mat-icon-button'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconButtonCssMatStyler_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconButtonCssMatStyler.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconButtonCssMatStyler.ctorParameters;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nexport class MatFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MatButton,\n                 anchor: MatAnchor) {\n    // Set the default color palette for the mat-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-fab], a[mat-fab]',\n  host: {'class': 'mat-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatButton), ] }, ]},\n{type: MatAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatAnchor), ] }, ]},\n];\n}\n\nfunction MatFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFab.ctorParameters;\n}\n\n/**\n * Directive that targets mini-fab buttons and anchors. It's used to apply the `mat-` class\n * to all mini-fab buttons and also is responsible for setting the default color palette.\n * \\@docs-private\n */\nexport class MatMiniFab {\n/**\n * @param {?} button\n * @param {?} anchor\n */\nconstructor(   button: MatButton,\n                 anchor: MatAnchor) {\n    // Set the default color palette for the mat-mini-fab components.\n    (button || anchor).color = DEFAULT_ROUND_BUTTON_COLOR;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'button[mat-mini-fab], a[mat-mini-fab]',\n  host: {'class': 'mat-mini-fab'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButton, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatButton), ] }, ]},\n{type: MatAnchor, decorators: [{ type: Self }, { type: Optional }, { type: Inject, args: [forwardRef(() => MatAnchor), ] }, ]},\n];\n}\n\nfunction MatMiniFab_tsickle_Closure_declarations() {\n/** @type {?} */\nMatMiniFab.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatMiniFab.ctorParameters;\n}\n\n/**\n * \\@docs-private\n */\nexport class MatButtonBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatButtonBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonBase.prototype._renderer;\n/** @type {?} */\nMatButtonBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatButtonMixinBase = mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n/**\n * Material design button.\n */\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n/**\n * Whether the button is round.\n */\n_isRoundButton: boolean = this._hasAttributeWithPrefix('fab', 'mini-fab');\n/**\n * Whether the button is icon button.\n */\n_isIconButton: boolean = this._hasAttributeWithPrefix('icon-button');\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _platform\n * @param {?} _focusMonitor\n */\nconstructor(renderer: Renderer2,\n              elementRef: ElementRef,\nprivate _platform: Platform,\nprivate _focusMonitor: FocusMonitor) {\n    super(renderer, elementRef);\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus(): void {\n    this._getHostElement().focus();\n  }\n/**\n * @return {?}\n */\n_getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n/**\n * @return {?}\n */\n_isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n/**\n * Gets whether the button has one of the given attributes with a 'mat-' prefix.\n * @param {...?} unprefixedAttributeNames\n * @return {?}\n */\n_hasAttributeWithPrefix(...unprefixedAttributeNames: string[]) {\n    // If not on the browser, say that there are none of the attributes present.\n    // Since these only affect how the ripple displays (and ripples only happen on the client),\n    // detecting these attributes isn't necessary when not on the browser.\n    if (!this._platform.isBrowser) {\n      return false;\n    }\n\n    return unprefixedAttributeNames.some(suffix => {\n      return this._getHostElement().hasAttribute('mat-' + suffix);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab]`,\n  host: {\n    '[disabled]': 'disabled || null',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: Platform, },\n{type: FocusMonitor, },\n];\n}\n\nfunction MatButton_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButton.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButton.ctorParameters;\n/**\n * Whether the button is round.\n * @type {?}\n */\nMatButton.prototype._isRoundButton;\n/**\n * Whether the button is icon button.\n * @type {?}\n */\nMatButton.prototype._isIconButton;\n/** @type {?} */\nMatButton.prototype._platform;\n/** @type {?} */\nMatButton.prototype._focusMonitor;\n}\n\n/**\n * Raised Material design button.\n */\nexport class MatAnchor extends MatButton {\n/**\n * @param {?} platform\n * @param {?} focusMonitor\n * @param {?} elementRef\n * @param {?} renderer\n */\nconstructor(\n      platform: Platform,\n      focusMonitor: FocusMonitor,\n      elementRef: ElementRef,\n      renderer: Renderer2) {\n    super(renderer, elementRef, platform, focusMonitor);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]`,\n  host: {\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: FocusMonitor, },\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\nfunction MatAnchor_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAnchor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAnchor.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {\n  MatAnchor,\n  MatButton,\n  MatMiniFab,\n  MatButtonCssMatStyler,\n  MatFab,\n  MatIconButtonCssMatStyler,\n  MatRaisedButtonCssMatStyler\n} from './button';\nexport class MatButtonModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n    A11yModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatCommonModule,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n    MatMiniFab,\n    MatFab,\n    MatButtonCssMatStyler,\n    MatRaisedButtonCssMatStyler,\n    MatIconButtonCssMatStyler,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatButtonModule,MatButtonCssMatStyler,MatRaisedButtonCssMatStyler,MatIconButtonCssMatStyler,MatFab,MatMiniFab,MatButtonBase,_MatButtonMixinBase,MatButton,MatAnchor} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MatButtonToggleGroupBase {}\nexport const /** @type {?} */ _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nexport class MatButtonToggleChange {\n/**\n * The MatButtonToggle that emits the event.\n */\nsource: MatButtonToggle | null;\n/**\n * The value assigned to the MatButtonToggle.\n */\nvalue: any;\n}\n\nfunction MatButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MatButtonToggle that emits the event.\n * @type {?}\n */\nMatButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MatButtonToggle.\n * @type {?}\n */\nMatButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MatButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MatButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MatButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMatButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMatButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMatButtonToggleGroup.prototype.change;\n/** @type {?} */\nMatButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MatButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMatButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMatButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MatButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MatButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MatButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n */\nconstructor( toggleGroup: MatButtonToggleGroup,\n               toggleGroupMultiple: MatButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MatButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MatButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggle.ctorParameters;\n/** @type {?} */\nMatButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMatButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMatButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMatButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMatButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMatButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMatButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMatButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMatButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMatButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMatButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMatButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMatButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMatButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMatButtonToggle.prototype.change;\n/** @type {?} */\nMatButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMatButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMatButtonToggle.prototype._renderer;\n/** @type {?} */\nMatButtonToggle.prototype._elementRef;\n/** @type {?} */\nMatButtonToggle.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER, MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MatButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ToggleType,MatButtonToggleGroupBase,_MatButtonToggleGroupMixinBase,MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MatButtonToggleChange,MatButtonToggleGroup,MatButtonToggleGroupMultiple,MatButtonToggle,MatButtonToggleModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MatCardContent {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardContent.ctorParameters;\n}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MatCardTitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardTitle.ctorParameters;\n}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MatCardSubtitle {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardSubtitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardSubtitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardSubtitle.ctorParameters;\n}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MatCardActions {\n/**\n * Position of the actions inside the card.\n */\nalign: 'start' | 'end' = 'start';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-card-actions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n};\n}\n\nfunction MatCardActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardActions.ctorParameters;\n/** @type {?} */\nMatCardActions.propDecorators;\n/**\n * Position of the actions inside the card.\n * @type {?}\n */\nMatCardActions.prototype.align;\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * \\@docs-private\n */\nexport class MatCardFooter {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardFooter_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardFooter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardFooter.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MatCardImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MatCardSmImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardSmImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardSmImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardSmImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MatCardMdImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardMdImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardMdImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardMdImage.ctorParameters;\n}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MatCardLgImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardLgImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardLgImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardLgImage.ctorParameters;\n}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MatCardXlImage {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardXlImage_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardXlImage.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardXlImage.ctorParameters;\n}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * \\@docs-private\n */\nexport class MatCardAvatar {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardAvatar_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardAvatar.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardAvatar.ctorParameters;\n}\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n * \n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\nexport class MatCard {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-card',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCard_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCard.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCard.ctorParameters;\n}\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * \\@docs-private\n */\nexport class MatCardHeader {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardHeader.ctorParameters;\n}\n\n/**\n * Component intended to be used within the <mat-card> component. It adds styles for a preset\n * layout that groups an image with a title section.\n * \\@docs-private\n */\nexport class MatCardTitleGroup {static decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardTitleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardTitleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardTitleGroup.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardHeader,\n  MatCardTitleGroup,\n  MatCardContent,\n  MatCardTitle,\n  MatCardSubtitle,\n  MatCardActions,\n  MatCardFooter,\n  MatCardSmImage,\n  MatCardMdImage,\n  MatCardLgImage,\n  MatCardImage,\n  MatCardXlImage,\n  MatCardAvatar,\n} from './card';\nexport class MatCardModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatCardModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCardModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCardModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {MatOptgroup} from './optgroup';\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n/**\n * Event object emitted by MatOption when selected or deselected.\n */\nexport class MatOptionSelectionChange {\n/**\n * @param {?} source\n * @param {?=} isUserInput\n */\nconstructor(public source: MatOption,\npublic isUserInput = false) { }\n}\n\nfunction MatOptionSelectionChange_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptionSelectionChange.prototype.source;\n/** @type {?} */\nMatOptionSelectionChange.prototype.isUserInput;\n}\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\nexport class MatOption {\nprivate _selected: boolean = false;\nprivate _active: boolean = false;\nprivate _multiple: boolean = false;\nprivate _disableRipple: boolean = false;\n/**\n * Whether the option is disabled.\n */\nprivate _disabled: boolean = false;\nprivate _id: string = `mat-option-${_uniqueIdCounter++}`;\n/**\n * Whether the wrapping component is in multiple selection mode.\n * @return {?}\n */\nget multiple() { return this._multiple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset multiple(value: boolean) {\n    if (value !== this._multiple) {\n      this._multiple = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * The unique ID of the option.\n * @return {?}\n */\nget id() { return this._id; }\n/**\n * Whether or not the option is currently selected.\n * @return {?}\n */\nget selected(): boolean { return this._selected; }\n/**\n * The form value of the option.\n */\nvalue: any;\n/**\n * Whether the option is disabled.\n * @return {?}\n */\nget disabled() { return (this.group && this.group.disabled) || this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * Whether ripples for the option are disabled.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: boolean) {\n    this._disableRipple = value;\n    this._changeDetectorRef.markForCheck();\n  }\n/**\n * Event emitted when the option is selected or deselected.\n */\nonSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n/**\n * @param {?} _element\n * @param {?} _changeDetectorRef\n * @param {?} group\n */\nconstructor(\nprivate _element: ElementRef,\nprivate _changeDetectorRef: ChangeDetectorRef,\npublic readonly group: MatOptgroup) {}\n/**\n * Whether or not the option is currently active and ready to be selected.\n * An active option displays styles as if it is focused, but the\n * focus is actually retained somewhere else. This comes in handy\n * for components like autocomplete where focus must remain on the input.\n * @return {?}\n */\nget active(): boolean {\n    return this._active;\n  }\n/**\n * The displayed value of the option. It is necessary to show the selected option in the\n * select's trigger.\n * @return {?}\n */\nget viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n/**\n * Selects the option.\n * @return {?}\n */\nselect(): void {\n    this._selected = true;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Deselects the option.\n * @return {?}\n */\ndeselect(): void {\n    this._selected = false;\n    this._changeDetectorRef.markForCheck();\n    this._emitSelectionChangeEvent();\n  }\n/**\n * Sets focus onto this option.\n * @return {?}\n */\nfocus(): void {\n    const /** @type {?} */ element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n/**\n * This method sets display styles on the option to make it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * This method removes display styles on the option that made it appear\n * active. This is used by the ActiveDescendantKeyManager so key\n * events will display the proper options as active on arrow key events.\n * @return {?}\n */\nsetInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Gets the label to be used when determining whether the option should be focused.\n * @return {?}\n */\ngetLabel(): string {\n    return this.viewValue;\n  }\n/**\n * Ensures the option is selected when activated from the keyboard.\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n/**\n * Selects the option while indicating the selection came from the user. Used to\n * determine if the select's view -> model callback should be invoked.\n * @return {?}\n */\n_selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n/**\n * Returns the correct tabindex for the option depending on disabled state.\n * @return {?}\n */\n_getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n/**\n * Gets the host DOM element.\n * @return {?}\n */\n_getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n/**\n * Emits the selection change event.\n * @param {?=} isUserInput\n * @return {?}\n */\nprivate _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param {?} optionIndex Index of the option at which to start counting.\n * @param {?} options Flat list of all of the options.\n * @param {?} optionGroups Flat list of all of the option groups.\n * @return {?}\n */\nstatic countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n    optionGroups: QueryList<MatOptgroup>): number {\n\n    if (optionGroups.length) {\n      let /** @type {?} */ optionsArray = options.toArray();\n      let /** @type {?} */ groups = optionGroups.toArray();\n      let /** @type {?} */ groupCounter = 0;\n\n      for (let /** @type {?} */ i = 0; i < optionIndex + 1; i++) {\n        if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n          groupCounter++;\n        }\n      }\n\n      return groupCounter;\n    }\n\n    return 0;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-option',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: MatOptgroup, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'onSelectionChange': [{ type: Output },],\n};\n}\n\nfunction MatOption_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOption.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOption.ctorParameters;\n/** @type {?} */\nMatOption.propDecorators;\n/** @type {?} */\nMatOption.prototype._selected;\n/** @type {?} */\nMatOption.prototype._active;\n/** @type {?} */\nMatOption.prototype._multiple;\n/** @type {?} */\nMatOption.prototype._disableRipple;\n/**\n * Whether the option is disabled.\n * @type {?}\n */\nMatOption.prototype._disabled;\n/** @type {?} */\nMatOption.prototype._id;\n/**\n * The form value of the option.\n * @type {?}\n */\nMatOption.prototype.value;\n/**\n * Event emitted when the option is selected or deselected.\n * @type {?}\n */\nMatOption.prototype.onSelectionChange;\n/** @type {?} */\nMatOption.prototype._element;\n/** @type {?} */\nMatOption.prototype._changeDetectorRef;\n/** @type {?} */\nMatOption.prototype.group;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nexport class MatError {\n   id: string = `mat-error-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MatError_tsickle_Closure_declarations() {\n/** @type {?} */\nMatError.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatError.ctorParameters;\n/** @type {?} */\nMatError.propDecorators;\n/** @type {?} */\nMatError.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Observable} from 'rxjs/Observable';\nimport {NgControl} from '@angular/forms';\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n */\nexport abstract class MatFormFieldControl<T> {\n/**\n * The value of the control.\n */\nvalue: T;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n * needs to run change detection.\n */\nreadonly stateChanges: Observable<void>;\n/**\n * The element ID for this control.\n */\nreadonly id: string;\n/**\n * The placeholder for this control.\n */\nreadonly placeholder: string;\n/**\n * Gets the NgControl for this control.\n */\nreadonly ngControl: NgControl | null;\n/**\n * Whether the control is focused.\n */\nreadonly focused: boolean;\n/**\n * Whether the control is empty.\n */\nreadonly empty: boolean;\n/**\n * Whether the `MatFormField` label should try to float.\n */\nreadonly shouldPlaceholderFloat: boolean;\n/**\n * Whether the control is required.\n */\nreadonly required: boolean;\n/**\n * Whether the control is disabled.\n */\nreadonly disabled: boolean;\n/**\n * Whether the control is in an error state.\n */\nreadonly errorState: boolean;\n/**\n * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n * based on their control type. The form field will add a class,\n * `mat-form-field-type-{{controlType}}` to its root element.\n */\nreadonly controlType?: string;\n/**\n * Sets the list of element IDs that currently describe this control.\n * @abstract\n * @param {?} ids\n * @return {?}\n */\nsetDescribedByIds(ids: string[]) {}\n/**\n * Handles a click on the control's container.\n * @abstract\n * @param {?} event\n * @return {?}\n */\nonContainerClick(event: MouseEvent) {}\n}\n\nfunction MatFormFieldControl_tsickle_Closure_declarations() {\n/**\n * The value of the control.\n * @type {?}\n */\nMatFormFieldControl.prototype.value;\n/**\n * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n * needs to run change detection.\n * @type {?}\n */\nMatFormFieldControl.prototype.stateChanges;\n/**\n * The element ID for this control.\n * @type {?}\n */\nMatFormFieldControl.prototype.id;\n/**\n * The placeholder for this control.\n * @type {?}\n */\nMatFormFieldControl.prototype.placeholder;\n/**\n * Gets the NgControl for this control.\n * @type {?}\n */\nMatFormFieldControl.prototype.ngControl;\n/**\n * Whether the control is focused.\n * @type {?}\n */\nMatFormFieldControl.prototype.focused;\n/**\n * Whether the control is empty.\n * @type {?}\n */\nMatFormFieldControl.prototype.empty;\n/**\n * Whether the `MatFormField` label should try to float.\n * @type {?}\n */\nMatFormFieldControl.prototype.shouldPlaceholderFloat;\n/**\n * Whether the control is required.\n * @type {?}\n */\nMatFormFieldControl.prototype.required;\n/**\n * Whether the control is disabled.\n * @type {?}\n */\nMatFormFieldControl.prototype.disabled;\n/**\n * Whether the control is in an error state.\n * @type {?}\n */\nMatFormFieldControl.prototype.errorState;\n/**\n * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n * based on their control type. The form field will add a class,\n * `mat-form-field-type-{{controlType}}` to its root element.\n * @type {?}\n */\nMatFormFieldControl.prototype.controlType;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nexport class MatHint {\n/**\n * Whether to align the hint label at the start or end of the line.\n */\nalign: 'start' | 'end' = 'start';\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n */\nid: string = `mat-hint-${nextUniqueId++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'align': [{ type: Input },],\n'id': [{ type: Input },],\n};\n}\n\nfunction MatHint_tsickle_Closure_declarations() {\n/** @type {?} */\nMatHint.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatHint.ctorParameters;\n/** @type {?} */\nMatHint.propDecorators;\n/**\n * Whether to align the hint label at the start or end of the line.\n * @type {?}\n */\nMatHint.prototype.align;\n/**\n * Unique ID for the hint. Used for the aria-describedby on the form field control.\n * @type {?}\n */\nMatHint.prototype.id;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * The floating placeholder for an `MatFormField`.\n */\nexport class MatPlaceholder {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-placeholder'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPlaceholder_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPlaceholder.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPlaceholder.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Prefix to be placed the the front of the form field.\n */\nexport class MatPrefix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matPrefix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPrefix_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive} from '@angular/core';\n/**\n * Suffix to be placed at the end of the form field.\n */\nexport class MatSuffix {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matSuffix]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSuffix_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSuffix.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSuffix.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {first, startWith} from '@angular/cdk/rxjs';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  Input,\n  Optional,\n  QueryList, Renderer2,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  FloatPlaceholderType,\n  MAT_PLACEHOLDER_GLOBAL_OPTIONS,\n  PlaceholderOptions,\n} from '@angular/material/core';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {MatError} from './error';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\nlet /** @type {?} */ nextUniqueId = 0;\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nexport class MatFormField implements AfterViewInit, AfterContentInit, AfterContentChecked {\nprivate _placeholderOptions: PlaceholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n */\ncolor: 'primary' | 'accent' | 'warn' = 'primary';\n/**\n * @deprecated Use `color` instead.\n * @return {?}\n */\nget dividerColor() { return this.color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset dividerColor(value) { this.color = value; }\n/**\n * Whether the required marker should be hidden.\n * @return {?}\n */\nget hideRequiredMarker() { return this._hideRequiredMarker; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hideRequiredMarker(value: any) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\nprivate _hideRequiredMarker: boolean;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n */\nprivate _showAlwaysAnimate = false;\n/**\n * Whether the floating label should always float or not.\n * @return {?}\n */\nget _shouldAlwaysFloat() {\n    return this._floatPlaceholder === 'always' && !this._showAlwaysAnimate;\n  }\n/**\n * Whether the placeholder can float or not.\n * @return {?}\n */\nget _canPlaceholderFloat() { return this._floatPlaceholder !== 'never'; }\n/**\n * State of the mat-hint and mat-error animations.\n */\n_subscriptAnimationState: string = '';\n/**\n * Text for the form field hint.\n * @return {?}\n */\nget hintLabel() { return this._hintLabel; }\n/**\n * @param {?} value\n * @return {?}\n */\nset hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\nprivate _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n/**\n * Whether the placeholder should always float, never float or float as the user types.\n * @return {?}\n */\nget floatPlaceholder() { return this._floatPlaceholder; }\n/**\n * @param {?} value\n * @return {?}\n */\nset floatPlaceholder(value: FloatPlaceholderType) {\n    if (value !== this._floatPlaceholder) {\n      this._floatPlaceholder = value || this._placeholderOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\nprivate _floatPlaceholder: FloatPlaceholderType;\n/**\n * Reference to the form field's underline element.\n */\nunderlineRef: ElementRef;\n   _connectionContainerRef: ElementRef;\nprivate _placeholder: ElementRef;\n   _control: MatFormFieldControl<any>;\n   _placeholderChild: MatPlaceholder;\n   _errorChildren: QueryList<MatError>;\n   _hintChildren: QueryList<MatHint>;\n   _prefixChildren: QueryList<MatPrefix>;\n   _suffixChildren: QueryList<MatSuffix>;\n/**\n * @param {?} _elementRef\n * @param {?} _renderer\n * @param {?} _changeDetectorRef\n * @param {?} placeholderOptions\n */\nconstructor(\npublic _elementRef: ElementRef,\nprivate _renderer: Renderer2,\nprivate _changeDetectorRef: ChangeDetectorRef,\n        placeholderOptions: PlaceholderOptions) {\n    this._placeholderOptions = placeholderOptions ? placeholderOptions : {};\n    this.floatPlaceholder = this._placeholderOptions.float || 'auto';\n  }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._validateControlChild();\n    if (this._control.controlType) {\n      this._renderer.addClass(\n          this._elementRef.nativeElement, `mat-form-field-type-${this._control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    startWith.call(this._control.stateChanges, null).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    let /** @type {?} */ ngControl = this._control.ngControl;\n    if (ngControl && ngControl.valueChanges) {\n      ngControl.valueChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Re-validate when the number of hints changes.\n    startWith.call(this._hintChildren.changes, null).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    startWith.call(this._errorChildren.changes, null).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngAfterContentChecked() {\n    this._validateControlChild();\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n/**\n * Determines whether a class from the NgControl should be forwarded to the host element.\n * @param {?} prop\n * @return {?}\n */\n_shouldForward(prop: string): boolean {\n    let /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ( /** @type {?} */((ngControl as any)))[prop];\n  }\n/**\n * Whether the form field has a placeholder.\n * @return {?}\n */\n_hasPlaceholder() {\n    return !!(this._control.placeholder || this._placeholderChild);\n  }\n/**\n * Determines whether to display hints or errors.\n * @return {?}\n */\n_getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n/**\n * Animates the placeholder up and locks it in position.\n * @return {?}\n */\n_animateAndLockPlaceholder(): void {\n    if (this._placeholder && this._canPlaceholderFloat) {\n      this._showAlwaysAnimate = true;\n      this._floatPlaceholder = 'always';\n\n      first.call(fromEvent(this._placeholder.nativeElement, 'transitionend')).subscribe(() => {\n        this._showAlwaysAnimate = false;\n      });\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n/**\n * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n * or child element with the `mat-placeholder` directive).\n * @return {?}\n */\nprivate _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n/**\n * Does any extra processing that is required when handling the hints.\n * @return {?}\n */\nprivate _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n/**\n * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n * attribute being considered as `align=\"start\"`.\n * @return {?}\n */\nprivate _validateHints() {\n    if (this._hintChildren) {\n      let /** @type {?} */ startHint: MatHint;\n      let /** @type {?} */ endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align == 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align == 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n/**\n * Sets the list of element IDs that describe the child control. This allows the control to update\n * its `aria-describedby` attribute accordingly.\n * @return {?}\n */\nprivate _syncDescribedByIds() {\n    if (this._control) {\n      let /** @type {?} */ ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        let /** @type {?} */ startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        let /** @type {?} */ endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n/**\n * Throws an error if the form field's control is missing.\n * @return {?}\n */\nprotected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  // TODO(mmalerba): the input-container selectors and classes are deprecated and will be removed.\n  selector: 'mat-input-container, mat-form-field',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here.\n  // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n  // aren't using MatInput.\n  styleUrls: ['form-field.css', '../input/input.css'],\n  animations: [\n    // TODO(mmalerba): Use angular animations for placeholder animation as well.\n    trigger('transitionMessages', [\n      state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n      transition('void => enter', [\n        style({ opacity: 0, transform: 'translateY(-100%)' }),\n        animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n      ]),\n    ]),\n  ],\n  host: {\n    'class': 'mat-input-container mat-form-field',\n    '[class.mat-input-invalid]': '_control.errorState',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canPlaceholderFloat',\n    '[class.mat-form-field-should-float]': '_control.shouldPlaceholderFloat || _shouldAlwaysFloat',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-primary]': 'color == \"primary\"',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PLACEHOLDER_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'color': [{ type: Input },],\n'dividerColor': [{ type: Input },],\n'hideRequiredMarker': [{ type: Input },],\n'hintLabel': [{ type: Input },],\n'floatPlaceholder': [{ type: Input },],\n'underlineRef': [{ type: ViewChild, args: ['underline', ] },],\n'_connectionContainerRef': [{ type: ViewChild, args: ['connectionContainer', ] },],\n'_placeholder': [{ type: ViewChild, args: ['placeholder', ] },],\n'_control': [{ type: ContentChild, args: [MatFormFieldControl, ] },],\n'_placeholderChild': [{ type: ContentChild, args: [MatPlaceholder, ] },],\n'_errorChildren': [{ type: ContentChildren, args: [MatError, ] },],\n'_hintChildren': [{ type: ContentChildren, args: [MatHint, ] },],\n'_prefixChildren': [{ type: ContentChildren, args: [MatPrefix, ] },],\n'_suffixChildren': [{ type: ContentChildren, args: [MatSuffix, ] },],\n};\n}\n\nfunction MatFormField_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFormField.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFormField.ctorParameters;\n/** @type {?} */\nMatFormField.propDecorators;\n/** @type {?} */\nMatFormField.prototype._placeholderOptions;\n/**\n * Color of the form field underline, based on the theme.\n * @type {?}\n */\nMatFormField.prototype.color;\n/** @type {?} */\nMatFormField.prototype._hideRequiredMarker;\n/**\n * Override for the logic that disables the placeholder animation in certain cases.\n * @type {?}\n */\nMatFormField.prototype._showAlwaysAnimate;\n/**\n * State of the mat-hint and mat-error animations.\n * @type {?}\n */\nMatFormField.prototype._subscriptAnimationState;\n/** @type {?} */\nMatFormField.prototype._hintLabel;\n/** @type {?} */\nMatFormField.prototype._hintLabelId;\n/** @type {?} */\nMatFormField.prototype._floatPlaceholder;\n/**\n * Reference to the form field's underline element.\n * @type {?}\n */\nMatFormField.prototype.underlineRef;\n/** @type {?} */\nMatFormField.prototype._connectionContainerRef;\n/** @type {?} */\nMatFormField.prototype._placeholder;\n/** @type {?} */\nMatFormField.prototype._control;\n/** @type {?} */\nMatFormField.prototype._placeholderChild;\n/** @type {?} */\nMatFormField.prototype._errorChildren;\n/** @type {?} */\nMatFormField.prototype._hintChildren;\n/** @type {?} */\nMatFormField.prototype._prefixChildren;\n/** @type {?} */\nMatFormField.prototype._suffixChildren;\n/** @type {?} */\nMatFormField.prototype._elementRef;\n/** @type {?} */\nMatFormField.prototype._renderer;\n/** @type {?} */\nMatFormField.prototype._changeDetectorRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nexport class MatFormFieldModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatError,\n    MatHint,\n    MatFormField,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatFormFieldModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatFormFieldModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatFormFieldModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatFormFieldModule,MatError,MatFormField,MatFormFieldControl,getMatFormFieldPlaceholderConflictError,getMatFormFieldDuplicatedHintError,getMatFormFieldMissingControlError,MatHint,MatPlaceholder,MatPrefix,MatSuffix} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  ElementRef,\n  Input,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {MatOption, MatOptgroup} from '@angular/material/core';\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/**\n * Event object that is emitted when an autocomplete option is selected\n */\nexport class MatAutocompleteSelectedEvent {\n/**\n * @param {?} source\n * @param {?} option\n */\nconstructor(public source: MatAutocomplete,\npublic option: MatOption) { }\n}\n\nfunction MatAutocompleteSelectedEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAutocompleteSelectedEvent.prototype.source;\n/** @type {?} */\nMatAutocompleteSelectedEvent.prototype.option;\n}\n\nexport class MatAutocomplete implements AfterContentInit {\n/**\n * Manages active item in option list based on key events.\n */\n_keyManager: ActiveDescendantKeyManager<MatOption>;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n */\nshowPanel = false;\n/**\n * \\@docs-private\n */\ntemplate: TemplateRef<any>;\n/**\n * Element for the panel containing the autocomplete options.\n */\npanel: ElementRef;\n/**\n * \\@docs-private\n */\noptions: QueryList<MatOption>;\n/**\n * \\@docs-private\n */\noptionGroups: QueryList<MatOptgroup>;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n */\ndisplayWith: ((value: any) => string) | null = null;\n/**\n * Event that is emitted whenever an option from the list is selected.\n */\noptionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n */\nid: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n/**\n * @param {?} _changeDetectorRef\n */\nconstructor(private _changeDetectorRef: ChangeDetectorRef) { }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n  }\n/**\n * Sets the panel scrollTop. This allows us to manually scroll to display options\n * above or below the fold, as they are not actually being focused when active.\n * @param {?} scrollTop\n * @return {?}\n */\n_setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n/**\n * Returns the panel's scrollTop.\n * @return {?}\n */\n_getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n/**\n * Panel should hide itself when the option list is empty.\n * @return {?}\n */\n_setVisibility(): void {\n    Promise.resolve().then(() => {\n      this.showPanel = !!this.options.length;\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * Emits the `select` event.\n * @param {?} option\n * @return {?}\n */\n_emitSelectEvent(option: MatOption): void {\n    const /** @type {?} */ event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n/**\n * Sets a class on the panel based on whether it is visible.\n * @return {?}\n */\n_getClassList() {\n    return {\n      'mat-autocomplete-visible': this.showPanel,\n      'mat-autocomplete-hidden': !this.showPanel\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  host: {\n    'class': 'mat-autocomplete'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ViewChild, args: [TemplateRef, ] },],\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'options': [{ type: ContentChildren, args: [MatOption, { descendants: true }, ] },],\n'optionGroups': [{ type: ContentChildren, args: [MatOptgroup, ] },],\n'displayWith': [{ type: Input },],\n'optionSelected': [{ type: Output },],\n};\n}\n\nfunction MatAutocomplete_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAutocomplete.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAutocomplete.ctorParameters;\n/** @type {?} */\nMatAutocomplete.propDecorators;\n/**\n * Manages active item in option list based on key events.\n * @type {?}\n */\nMatAutocomplete.prototype._keyManager;\n/**\n * Whether the autocomplete panel should be visible, depending on option length.\n * @type {?}\n */\nMatAutocomplete.prototype.showPanel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMatAutocomplete.prototype.template;\n/**\n * Element for the panel containing the autocomplete options.\n * @type {?}\n */\nMatAutocomplete.prototype.panel;\n/**\n * \\@docs-private\n * @type {?}\n */\nMatAutocomplete.prototype.options;\n/**\n * \\@docs-private\n * @type {?}\n */\nMatAutocomplete.prototype.optionGroups;\n/**\n * Function that maps an option's control value to its display value in the trigger.\n * @type {?}\n */\nMatAutocomplete.prototype.displayWith;\n/**\n * Event that is emitted whenever an option from the list is selected.\n * @type {?}\n */\nMatAutocomplete.prototype.optionSelected;\n/**\n * Unique ID to be used by autocomplete trigger's \"aria-owns\" property.\n * @type {?}\n */\nMatAutocomplete.prototype.id;\n/** @type {?} */\nMatAutocomplete.prototype._changeDetectorRef;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  ConnectedPositionStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  PositionStrategy,\n  RepositionScrollStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {filter, first, map, RxChain, switchMap} from '@angular/cdk/rxjs';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {MatOption, MatOptionSelectionChange} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {fromEvent} from 'rxjs/observable/fromEvent';\nimport {merge} from 'rxjs/observable/merge';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {Subscription} from 'rxjs/Subscription';\nimport {MatAutocomplete} from './autocomplete';\n/**\n * The height of each autocomplete option.\n */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/**\n * Injection token that determines the scroll handling while the autocomplete panel is open.\n */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * \\@docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @return {?}\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\nprivate _overlayRef: OverlayRef | null;\nprivate _portal: TemplatePortal<any>;\nprivate _panelOpen: boolean = false;\n/**\n * Strategy that is used to position the panel.\n */\nprivate _positionStrategy: ConnectedPositionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n */\nprivate _manuallyFloatingPlaceholder = false;\n/**\n * The subscription for closing actions (some are bound to document).\n */\nprivate _closingActionsSubscription: Subscription;\n/**\n * View -> model callback called when value changes\n */\n_onChange: (value: any) => void = () => {};\n/**\n * View -> model callback called when autocomplete has been touched\n */\n_onTouched = () => {};\n\n  /* The autocomplete panel to be attached to this trigger. */\n   autocomplete: MatAutocomplete;\n/**\n * @param {?} _element\n * @param {?} _overlay\n * @param {?} _viewContainerRef\n * @param {?} _zone\n * @param {?} _changeDetectorRef\n * @param {?} _scrollStrategy\n * @param {?} _dir\n * @param {?} _formField\n * @param {?} _document\n */\nconstructor(private _element: ElementRef,\nprivate _overlay: Overlay,\nprivate _viewContainerRef: ViewContainerRef,\nprivate _zone: NgZone,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _scrollStrategy,\nprivate _dir: Directionality,\nprivate _formField: MatFormField,\nprivate _document: any) {}\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._destroyPanel();\n  }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n    return this._panelOpen && this.autocomplete.showPanel;\n  }\n/**\n * Opens the autocomplete suggestion panel.\n * @return {?}\n */\nopenPanel(): void {\n    this._attachOverlay();\n    this._floatPlaceholder();\n  }\n/**\n * Closes the autocomplete suggestion panel.\n * @return {?}\n */\nclosePanel(): void {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    this._resetPlaceholder();\n\n    if (this._panelOpen) {\n      this._panelOpen = false;\n\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the placeholder is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n/**\n * A stream of actions that should close the autocomplete panel, including\n * when an option is selected, on blur, and when TAB is pressed.\n * @return {?}\n */\nget panelClosingActions(): Observable<MatOptionSelectionChange> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut,\n      this._outsideClickStream\n    );\n  }\n/**\n * Stream of autocomplete option selections.\n * @return {?}\n */\nget optionSelections(): Observable<MatOptionSelectionChange> {\n    return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n  }\n/**\n * The currently active option, coerced to MatOption type.\n * @return {?}\n */\nget activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n/**\n * Stream of clicks outside of the autocomplete panel.\n * @return {?}\n */\nprivate get _outsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return RxChain.from(merge(\n      fromEvent(this._document, 'click'),\n      fromEvent(this._document, 'touchend')\n    )).call(filter, (event: MouseEvent | TouchEvent) => {\n      const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n      const /** @type {?} */ formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._panelOpen &&\n             clickTarget !== this._element.nativeElement &&\n             (!formField || !formField.contains(clickTarget)) &&\n             (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }).result();\n  }\n/**\n * Sets the autocomplete's value. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} value New value to be written to the model.\n * @return {?}\n */\nwriteValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete's value\n * changes from user input. Part of the ControlValueAccessor interface\n * required to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the value changes.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n/**\n * Saves a callback function to be invoked when the autocomplete is blurred\n * by the user. Part of the ControlValueAccessor interface required\n * to integrate with Angular's core forms API.\n * \n * @param {?} fn Callback to be triggered when the component has been touched.\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ESCAPE && this.panelOpen) {\n      this._resetActiveItem();\n      this.closePanel();\n      event.stopPropagation();\n    } else if (this.activeOption && event.keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else {\n      const /** @type {?} */ prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const /** @type {?} */ isArrowKey = event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW;\n\n      if (this.panelOpen) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey) {\n        this.openPanel();\n      }\n\n      Promise.resolve().then(() => {\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption();\n        }\n      });\n    }\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_handleInput(event: KeyboardEvent): void {\n    // We need to ensure that the input is focused, because IE will fire the `input`\n    // event on focus/blur/load if the input has a placeholder. See:\n    // https://connect.microsoft.com/IE/feedback/details/885747/\n    if (document.activeElement === event.target) {\n      this._onChange(( /** @type {?} */((event.target as HTMLInputElement))).value);\n      this.openPanel();\n    }\n  }\n/**\n * @return {?}\n */\n_handleFocus(): void {\n    this._attachOverlay();\n    this._floatPlaceholder(true);\n  }\n/**\n * In \"auto\" mode, the placeholder will animate down as soon as focus is lost.\n * This causes the value to jump when selecting an option with the mouse.\n * This method manually floats the placeholder until the panel can be closed.\n * @param {?=} shouldAnimate Whether the placeholder should be animated when it is floated.\n * @return {?}\n */\nprivate _floatPlaceholder(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatPlaceholder === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockPlaceholder();\n      } else {\n        this._formField.floatPlaceholder = 'always';\n      }\n\n      this._manuallyFloatingPlaceholder = true;\n    }\n  }\n/**\n * If the placeholder has been manually elevated, return it to its normal state.\n * @return {?}\n */\nprivate _resetPlaceholder(): void  {\n    if (this._manuallyFloatingPlaceholder) {\n      this._formField.floatPlaceholder = 'auto';\n      this._manuallyFloatingPlaceholder = false;\n    }\n  }\n/**\n * Given that we are not actually focusing active options, we must manually adjust scroll\n * to reveal options below the fold. First, we find the offset of the option from the top\n * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n * the panel height + the option height, so the active option will be just visible at the\n * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n * will become the offset. If that offset is visible within the panel already, the scrollTop is\n * not adjusted.\n * @return {?}\n */\nprivate _scrollToOption(): void {\n    const /** @type {?} */ activeOptionIndex = this.autocomplete._keyManager.activeItemIndex || 0;\n    const /** @type {?} */ labelCount = MatOption.countGroupLabelsBeforeOption(activeOptionIndex,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n    const /** @type {?} */ optionOffset = (activeOptionIndex + labelCount) * AUTOCOMPLETE_OPTION_HEIGHT;\n    const /** @type {?} */ panelTop = this.autocomplete._getScrollTop();\n\n    if (optionOffset < panelTop) {\n      // Scroll up to reveal selected option scrolled above the panel top\n      this.autocomplete._setScrollTop(optionOffset);\n    } else if (optionOffset + AUTOCOMPLETE_OPTION_HEIGHT > panelTop + AUTOCOMPLETE_PANEL_HEIGHT) {\n      // Scroll down to reveal selected option scrolled below the panel bottom\n      const /** @type {?} */ newScrollTop =\n          Math.max(0, optionOffset - AUTOCOMPLETE_PANEL_HEIGHT + AUTOCOMPLETE_OPTION_HEIGHT);\n      this.autocomplete._setScrollTop(newScrollTop);\n    }\n  }\n/**\n * This method listens to a stream of panel closing actions and resets the\n * stream every time the option list changes.\n * @return {?}\n */\nprivate _subscribeToClosingActions(): Subscription {\n    const /** @type {?} */ firstStable = first.call(this._zone.onStable.asObservable());\n    const /** @type {?} */ optionChanges = map.call(this.autocomplete.options.changes, () =>\n      this._positionStrategy.recalculateLastPosition());\n\n    // When the zone is stable initially, and when the option list changes...\n    return RxChain.from(merge(firstStable, optionChanges))\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      .call(switchMap, () => {\n        this._resetActiveItem();\n        this.autocomplete._setVisibility();\n        return this.panelClosingActions;\n      })\n      // when the first closing event occurs...\n      .call(first)\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n/**\n * Destroys the autocomplete suggestion panel.\n * @return {?}\n */\nprivate _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate _setTriggerValue(value: any): void {\n    const /** @type {?} */ toDisplay = this.autocomplete.displayWith ? this.autocomplete.displayWith(value) : value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n  }\n/**\n * This method closes the panel, and if a value is specified, also sets the associated\n * control to that value. It will also mark the control as dirty if this interaction\n * stemmed from the user.\n * @param {?} event\n * @return {?}\n */\nprivate _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n/**\n * Clear any previous selected option and emit a selection change event for this option\n * @param {?} skip\n * @return {?}\n */\nprivate _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n/**\n * @return {?}\n */\nprivate _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n    } else {\n      /** Update the panel width, in case the host width has changed */\n      this._overlayRef.getState().width = this._getHostWidth();\n      this._overlayRef.updateSize();\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    this.autocomplete._setVisibility();\n    this._panelOpen = true;\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getHostWidth(),\n      direction: this._dir ? this._dir.value : 'ltr'\n    });\n  }\n/**\n * @return {?}\n */\nprivate _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy =  this._overlay.position().connectedTo(\n        this._getConnectedElement(),\n        {originX: 'start', originY: 'bottom'}, {overlayX: 'start', overlayY: 'top'})\n        .withFallbackPosition(\n            {originX: 'start', originY: 'top'}, {overlayX: 'start', overlayY: 'bottom'}\n        );\n    return this._positionStrategy;\n  }\n/**\n * @return {?}\n */\nprivate _getConnectedElement(): ElementRef {\n    return this._formField ? this._formField._connectionContainerRef : this._element;\n  }\n/**\n * Returns the width of the input element, so the panel width can match it.\n * @return {?}\n */\nprivate _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n/**\n * Reset active item to -1 so arrow events will activate the correct options.\n * @return {?}\n */\nprivate _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(-1);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    'role': 'combobox',\n    'autocomplete': 'off',\n    'aria-autocomplete': 'list',\n    'aria-multiline': 'false',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'panelOpen.toString()',\n    '[attr.aria-owns]': 'autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Overlay, },\n{type: ViewContainerRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY, ] }, ]},\n{type: Directionality, decorators: [{ type: Optional }, ]},\n{type: MatFormField, decorators: [{ type: Optional }, { type: Host }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'autocomplete': [{ type: Input, args: ['matAutocomplete', ] },],\n};\n}\n\nfunction MatAutocompleteTrigger_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAutocompleteTrigger.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAutocompleteTrigger.ctorParameters;\n/** @type {?} */\nMatAutocompleteTrigger.propDecorators;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._overlayRef;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._portal;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._panelOpen;\n/**\n * Strategy that is used to position the panel.\n * @type {?}\n */\nMatAutocompleteTrigger.prototype._positionStrategy;\n/**\n * Whether or not the placeholder state is being overridden.\n * @type {?}\n */\nMatAutocompleteTrigger.prototype._manuallyFloatingPlaceholder;\n/**\n * The subscription for closing actions (some are bound to document).\n * @type {?}\n */\nMatAutocompleteTrigger.prototype._closingActionsSubscription;\n/**\n * View -> model callback called when value changes\n * @type {?}\n */\nMatAutocompleteTrigger.prototype._onChange;\n/**\n * View -> model callback called when autocomplete has been touched\n * @type {?}\n */\nMatAutocompleteTrigger.prototype._onTouched;\n/** @type {?} */\nMatAutocompleteTrigger.prototype.autocomplete;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._element;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._overlay;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._viewContainerRef;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._zone;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._changeDetectorRef;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._scrollStrategy;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._dir;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._formField;\n/** @type {?} */\nMatAutocompleteTrigger.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,\n} from './autocomplete-trigger';\nexport class MatAutocompleteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [MatAutocomplete, MatOptionModule, MatAutocompleteTrigger, MatCommonModule],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatAutocompleteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatAutocompleteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatAutocompleteModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatAutocompleteSelectedEvent,MatAutocomplete,MatAutocompleteModule,AUTOCOMPLETE_OPTION_HEIGHT,AUTOCOMPLETE_PANEL_HEIGHT,MAT_AUTOCOMPLETE_SCROLL_STRATEGY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER,MAT_AUTOCOMPLETE_VALUE_ACCESSOR,getMatAutocompleteMissingPanelError,MatAutocompleteTrigger} from './public_api';\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, InjectionToken, NgModule} from '@angular/core';\n\nexport const /** @type {?} */ MATERIAL_COMPATIBILITY_MODE = new InjectionToken<boolean>('md-compatibility-mode');\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MAT_ELEMENTS_SELECTOR = `\n  [mat-button],\n  [mat-fab],\n  [mat-icon-button],\n  [mat-mini-fab],\n  [mat-raised-button],\n  [matCardSubtitle],\n  [matCardTitle],\n  [matCellDef],\n  [matColumnDef],\n  [matDialogActions],\n  [matDialogClose],\n  [matDialogContent],\n  [matDialogTitle],\n  [matHeaderCellDef],\n  [matHeaderRowDef],\n  [matLine],\n  [matRowDef],\n  [matStepLabel],\n  [matStepperNext],\n  [matStepperPrevious],\n  [matTabLabel],\n  [matTabLink],\n  [matTabNav],\n  [matTooltip],\n  [matInput],\n  [matPrefix],\n  [matSuffix],\n  mat-autocomplete,\n  mat-button-toggle,\n  mat-button-toggle,\n  mat-button-toggle-group,\n  mat-card,\n  mat-card-actions,\n  mat-card-content,\n  mat-card-footer,\n  mat-card-header,\n  mat-card-subtitle,\n  mat-card-title,\n  mat-card-title-group,\n  mat-cell,\n  mat-checkbox,\n  mat-chip,\n  mat-dialog-actions,\n  mat-dialog-container,\n  mat-dialog-content,\n  mat-divider,\n  mat-error,\n  mat-grid-list,\n  mat-grid-tile,\n  mat-grid-tile-footer,\n  mat-grid-tile-header,\n  mat-header-cell,\n  mat-header-row,\n  mat-hint,\n  mat-horizontal-stepper,\n  mat-icon,\n  mat-input-container,\n  mat-form-field,\n  mat-list,\n  mat-list-item,\n  mat-menu,\n  mat-nav-list,\n  mat-option,\n  mat-placeholder,\n  mat-progress-bar,\n  mat-pseudo-checkbox,\n  mat-radio-button,\n  mat-radio-group,\n  mat-row,\n  mat-select,\n  mat-sidenav,\n  mat-sidenav-container,\n  mat-slider,\n  mat-spinner,\n  mat-step,\n  mat-tab,\n  mat-table,\n  mat-tab-group,\n  mat-toolbar,\n  mat-vertical-stepper`;\n/**\n * Selector that matches all elements that may have style collisions with AngularJS Material.\n */\nexport const MD_ELEMENTS_SELECTOR = `\n  [md-button],\n  [md-fab],\n  [md-icon-button],\n  [md-mini-fab],\n  [md-raised-button],\n  [mdCardSubtitle],\n  [mdCardTitle],\n  [mdCellDef],\n  [mdColumnDef],\n  [mdDialogActions],\n  [mdDialogClose],\n  [mdDialogContent],\n  [mdDialogTitle],\n  [mdHeaderCellDef],\n  [mdHeaderRowDef],\n  [mdLine],\n  [mdRowDef],\n  [mdStepLabel],\n  [mdStepperNext],\n  [mdStepperPrevious],\n  [mdTabLabel],\n  [mdTabLink],\n  [mdTabNav],\n  [mdTooltip],\n  [mdInput],\n  [mdPrefix],\n  [mdSuffix],\n  md-autocomplete,\n  md-button-toggle,\n  md-button-toggle,\n  md-button-toggle-group,\n  md-card,\n  md-card-actions,\n  md-card-content,\n  md-card-footer,\n  md-card-header,\n  md-card-subtitle,\n  md-card-title,\n  md-card-title-group,\n  md-cell,\n  md-checkbox,\n  md-chip,\n  md-dialog-actions,\n  md-dialog-container,\n  md-dialog-content,\n  md-divider,\n  md-error,\n  md-grid-list,\n  md-grid-tile,\n  md-grid-tile-footer,\n  md-grid-tile-header,\n  md-header-cell,\n  md-header-row,\n  md-hint,\n  md-horizontal-stepper,\n  md-icon,\n  md-input-container,\n  md-form-field,\n  md-list,\n  md-list-item,\n  md-menu,\n  md-nav-list,\n  md-option,\n  md-placeholder,\n  md-progress-bar,\n  md-pseudo-checkbox,\n  md-radio-button,\n  md-radio-group,\n  md-row,\n  md-select,\n  md-sidenav,\n  md-sidenav-container,\n  md-slider,\n  md-spinner,\n  md-step,\n  md-tab,\n  md-table,\n  md-tab-group,\n  md-toolbar,\n  md-vertical-stepper`;\n/**\n * Directive that enforces that the `mat-` prefix cannot be used.\n */\nexport class MatPrefixRejector {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MAT_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPrefixRejector.ctorParameters;\n}\n\n/**\n * Directive that enforces that the `md-` prefix cannot be used.\n */\nexport class MdPrefixRejector {static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: MD_ELEMENTS_SELECTOR}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MdPrefixRejector_tsickle_Closure_declarations() {\n/** @type {?} */\nMdPrefixRejector.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMdPrefixRejector.ctorParameters;\n}\n\n/**\n * Module that enforces the default compatibility mode settings. When this module is loaded\n * without NoConflictStyleCompatibilityMode also being imported, it will throw an error if\n * there are any uses of the `mat-` prefix.\n */\nexport class CompatibilityModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [MatPrefixRejector, MdPrefixRejector],\n  exports: [MatPrefixRejector, MdPrefixRejector],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CompatibilityModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCompatibilityModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompatibilityModule.ctorParameters;\n}\n\n/**\n * Module that enforces \"no-conflict\" compatibility mode settings. When this module is loaded,\n * it will throw an error if there are any uses of the `md-` prefix.\n */\nexport class NoConflictStyleCompatibilityMode {static decorators: DecoratorInvocation[] = [\n{ type: NgModule },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NoConflictStyleCompatibilityMode_tsickle_Closure_declarations() {\n/** @type {?} */\nNoConflictStyleCompatibilityMode.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoConflictStyleCompatibilityMode.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\nimport {CompatibilityModule} from '../compatibility/compatibility';\n/**\n * Injection token that configures whether the Material sanity checks are enabled.\n */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks');\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, compatibility mode, etc.\n * \n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\nexport class MatCommonModule {\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n */\nprivate _hasDoneGlobalChecks = false;\n/**\n * @param {?} _document\n * @param {?} _sanityChecksEnabled\n */\nconstructor(\nprivate _document: any,\n      _sanityChecksEnabled: boolean) {\n\n    if (_sanityChecksEnabled && !this._hasDoneGlobalChecks && _document && isDevMode()) {\n      this._checkDoctype();\n      this._checkTheme();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkDoctype(): void {\n    if (!this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n/**\n * @return {?}\n */\nprivate _checkTheme(): void {\n    if (typeof getComputedStyle === 'function') {\n      const /** @type {?} */ testElement = this._document.createElement('div');\n\n      testElement.classList.add('mat-theme-loaded-marker');\n      this._document.body.appendChild(testElement);\n\n      if (getComputedStyle(testElement).display !== 'none') {\n        console.warn(\n          'Could not find Angular Material core theme. Most Material ' +\n          'components may not work as expected. For more info refer ' +\n          'to the theming guide: https://material.angular.io/guide/theming'\n        );\n      }\n\n      this._document.body.removeChild(testElement);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CompatibilityModule, BidiModule],\n  exports: [CompatibilityModule, BidiModule],\n  providers: [{\n    provide: MATERIAL_SANITY_CHECKS, useValue: true,\n  }],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS, ] }, ]},\n];\n}\n\nfunction MatCommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatCommonModule.ctorParameters;\n/**\n * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n * @type {?}\n */\nMatCommonModule.prototype._hasDoneGlobalChecks;\n/** @type {?} */\nMatCommonModule.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  disabled: boolean;\n}\n/**\n * Mixin to augment a directive with a `disabled` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n  return class extends base {\nprivate _disabled: boolean = false;\n/**\n * @return {?}\n */\nget disabled() { return this._disabled; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  disableRipple: boolean;\n}\n/**\n * Mixin to augment a directive with a `disableRipple` property.\n * @template T\n * @param {?} base\n * @return {?}\n */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T)\n    : Constructor<CanDisableRipple> & T {\n  return class extends base {\nprivate _disableRipple: boolean = false;\n/**\n * Whether the ripple effect is disabled or not.\n * @return {?}\n */\nget disableRipple() { return this._disableRipple; }\n/**\n * @param {?} value\n * @return {?}\n */\nset disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\n/**\n * InjectionToken for datepicker that can be used to override default locale code.\n */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE');\n/**\n * Provider for MAT_DATE_LOCALE injection token.\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n/**\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\n * @abstract\n */\nexport abstract class DateAdapter<D> {\n/**\n * The locale to use for all dates.\n */\nprotected locale: any;\n/**\n * A stream that emits when the locale changes.\n * @return {?}\n */\nget localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges= new Subject<void>();\n/**\n * Gets the year component of the given date.\n * @abstract\n * @param {?} date The date to extract the year from.\n * @return {?} The year component.\n */\ngetYear(date: D) {}\n/**\n * Gets the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the month from.\n * @return {?} The month component (0-indexed, 0 = January).\n */\ngetMonth(date: D) {}\n/**\n * Gets the date of the month component of the given date.\n * @abstract\n * @param {?} date The date to extract the date of the month from.\n * @return {?} The month component (1-indexed, 1 = first of month).\n */\ngetDate(date: D) {}\n/**\n * Gets the day of the week component of the given date.\n * @abstract\n * @param {?} date The date to extract the day of the week from.\n * @return {?} The month component (0-indexed, 0 = Sunday).\n */\ngetDayOfWeek(date: D) {}\n/**\n * Gets a list of names for the months.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n * @return {?} An ordered list of all month names, starting with January.\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets a list of names for the dates of the month.\n * @abstract\n * @return {?} An ordered list of all date of the month names, starting with '1'.\n */\ngetDateNames() {}\n/**\n * Gets a list of names for the days of the week.\n * @abstract\n * @param {?} style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n * @return {?} An ordered list of all weekday names, starting with Sunday.\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow') {}\n/**\n * Gets the name for the year of the given date.\n * @abstract\n * @param {?} date The date to get the year name for.\n * @return {?} The name of the given year (e.g. '2017').\n */\ngetYearName(date: D) {}\n/**\n * Gets the first day of the week.\n * @abstract\n * @return {?} The first day of the week (0-indexed, 0 = Sunday).\n */\ngetFirstDayOfWeek() {}\n/**\n * Gets the number of days in the month of the given date.\n * @abstract\n * @param {?} date The date whose month should be checked.\n * @return {?} The number of days in the month of the given date.\n */\ngetNumDaysInMonth(date: D) {}\n/**\n * Clones the given date.\n * @abstract\n * @param {?} date The date to clone\n * @return {?} A new date equal to the given date.\n */\nclone(date: D) {}\n/**\n * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n * month and date.\n * @abstract\n * @param {?} year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n * @param {?} month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n * @param {?} date The date of month of the date. Must be an integer 1 - length of the given month.\n * @return {?} The new date, or null if invalid.\n */\ncreateDate(year: number, month: number, date: number) {}\n/**\n * Gets today's date.\n * @abstract\n * @return {?} Today's date.\n */\ntoday() {}\n/**\n * Parses a date from a value.\n * @abstract\n * @param {?} value The value to parse.\n * @param {?} parseFormat The expected format of the value being parsed\n *     (type is implementation-dependent).\n * @return {?} The parsed date.\n */\nparse(value: any, parseFormat: any) {}\n/**\n * Formats a date as a string.\n * @abstract\n * @param {?} date The value to format.\n * @param {?} displayFormat The format to use to display the date as a string.\n * @return {?} The formatted date string.\n */\nformat(date: D, displayFormat: any) {}\n/**\n * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n * calendar for each year and then finding the closest date in the new month. For example when\n * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add years to.\n * @param {?} years The number of years to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of years added.\n */\naddCalendarYears(date: D, years: number) {}\n/**\n * Adds the given number of months to the date. Months are counted as if flipping a page on the\n * calendar for each month and then finding the closest date in the new month. For example when\n * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n * @abstract\n * @param {?} date The date to add months to.\n * @param {?} months The number of months to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of months added.\n */\naddCalendarMonths(date: D, months: number) {}\n/**\n * Adds the given number of days to the date. Days are counted as if moving one cell on the\n * calendar for each day.\n * @abstract\n * @param {?} date The date to add days to.\n * @param {?} days The number of days to add (may be negative).\n * @return {?} A new date equal to the given one with the specified number of days added.\n */\naddCalendarDays(date: D, days: number) {}\n/**\n * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n * @abstract\n * @param {?} date The date to get the ISO date string for.\n * @return {?} The ISO date string date string.\n */\ntoIso8601(date: D) {}\n/**\n * Creates a date from an RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339).\n * @abstract\n * @param {?} iso8601String The ISO date string to create a date from\n * @return {?} The date created from the ISO date string.\n */\nfromIso8601(iso8601String: string) {}\n/**\n * Checks whether the given object is considered a date instance by this DateAdapter.\n * @abstract\n * @param {?} obj The object to check\n * @return {?} Whether the object is a date instance.\n */\nisDateInstance(obj: any) {}\n/**\n * Checks whether the given date is valid.\n * @abstract\n * @param {?} date The date to check.\n * @return {?} Whether the date is valid.\n */\nisValid(date: D) {}\n/**\n * Sets the locale used for all dates.\n * @param {?} locale The new locale.\n * @return {?}\n */\nsetLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n/**\n * Compares two dates.\n * @param {?} first The first date to compare.\n * @param {?} second The second date to compare.\n * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\n *     a number greater than 0 if the first date is later.\n */\ncompareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n/**\n * Checks if two dates are equal.\n * @param {?} first The first date to check.\n * @param {?} second The second date to check.\n *     Null dates are considered equal to other null dates.\n * @return {?}\n */\nsameDate(first: D | null, second: D | null): boolean {\n    return first && second ? !this.compareDate(first, second) : first == second;\n  }\n/**\n * Clamp the given date between min and max dates.\n * @param {?} date The date to clamp.\n * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\n * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\n * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\n *     otherwise `date`.\n */\nclampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n\nfunction DateAdapter_tsickle_Closure_declarations() {\n/**\n * The locale to use for all dates.\n * @type {?}\n */\nDateAdapter.prototype.locale;\n/** @type {?} */\nDateAdapter.prototype._localeChanges;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\nimport {extendObject} from '../util/object-extend';\n/**\n * Whether the browser supports the Intl API.\n */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n/**\n * The default month names to use if Intl API is not available.\n */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n/**\n * The default date names to use if Intl API is not available.\n */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n/**\n * The default day of the week names to use if Intl API is not available.\n */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const /** @type {?} */ valuesArray = Array(length);\n  for (let /** @type {?} */ i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/**\n * Adapts the native JS Date for use with cdk-based components that work with dates.\n */\nexport class NativeDateAdapter extends DateAdapter<Date> {\n/**\n * @param {?} matDateLocale\n */\nconstructor(  matDateLocale: string) {\n    super();\n    super.setLocale(matDateLocale);\n  }\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n */\nuseUtcForDisplay = true;\n/**\n * @param {?} date\n * @return {?}\n */\ngetYear(date: Date): number {\n    return date.getFullYear();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetMonth(date: Date): number {\n    return date.getMonth();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDate(date: Date): number {\n    return date.getDate();\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {month: style});\n      return range(12, i => this._stripDirectionalityCharacters(dtf.format(new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n/**\n * @return {?}\n */\ngetDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n/**\n * @param {?} style\n * @return {?}\n */\ngetDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {weekday: style});\n      return range(7, i => this._stripDirectionalityCharacters(\n          dtf.format(new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric'});\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return String(this.getYear(date));\n  }\n/**\n * @return {?}\n */\ngetFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ngetNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nclone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n/**\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\ncreateDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let /** @type {?} */ result = this._createDateWithOverflow(year, month, date);\n\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n/**\n * @return {?}\n */\ntoday(): Date {\n    return new Date();\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nparse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n/**\n * @param {?} date\n * @param {?} displayFormat\n * @return {?}\n */\nformat(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n    if (SUPPORTS_INTL_API) {\n      if (this.useUtcForDisplay) {\n        date = new Date(Date.UTC(\n            date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n            date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n        displayFormat = extendObject({}, displayFormat, {timeZone: 'utc'});\n      }\n      let /** @type {?} */ dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(dtf.format(date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n/**\n * @param {?} date\n * @param {?} years\n * @return {?}\n */\naddCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n/**\n * @param {?} date\n * @param {?} months\n * @return {?}\n */\naddCalendarMonths(date: Date, months: number): Date {\n    let /** @type {?} */ newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n/**\n * @param {?} date\n * @param {?} days\n * @return {?}\n */\naddCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n/**\n * @param {?} date\n * @return {?}\n */\ntoIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n/**\n * @param {?} iso8601String\n * @return {?}\n */\nfromIso8601(iso8601String: string): Date | null {\n    // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n    // string is the right format first.\n    if (ISO_8601_REGEX.test(iso8601String)) {\n      let /** @type {?} */ d = new Date(iso8601String);\n      if (this.isValid(d)) {\n        return d;\n      }\n    }\n    return null;\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nisDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n/**\n * @param {?} date\n * @return {?}\n */\nisValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n/**\n * Creates a date but allows the month and date to overflow.\n * @param {?} year\n * @param {?} month\n * @param {?} date\n * @return {?}\n */\nprivate _createDateWithOverflow(year: number, month: number, date: number) {\n    let /** @type {?} */ result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n/**\n * Pads a number to make it two digits.\n * @param {?} n The number to pad.\n * @return {?} The padded number.\n */\nprivate _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n/**\n * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n * other browsers do not. We remove them to make output consistent and because they interfere with\n * date parsing.\n * @param {?} str The string to strip direction characters from.\n * @return {?} The stripped string.\n */\nprivate _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE, ] }, ]},\n];\n}\n\nfunction NativeDateAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateAdapter.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateAdapter.ctorParameters;\n/**\n * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n * will produce `'8/13/1800'`.\n * @type {?}\n */\nNativeDateAdapter.prototype.useUtcForDisplay;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {RippleRef, RippleState} from './ripple-ref';\n/**\n * Fade-in duration for the ripples. Can be modified with the speedFactor option.\n */\nexport const RIPPLE_FADE_IN_DURATION = 450;\n/**\n * Fade-out duration for the ripples in milliseconds. This can't be modified by the speedFactor.\n */\nexport const RIPPLE_FADE_OUT_DURATION = 400;\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  speedFactor?: number;\n  persistent?: boolean;\n};\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * \\@docs-private\n */\nexport class RippleRenderer {\n/**\n * Element where the ripples are being added to.\n */\nprivate _containerElement: HTMLElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n */\nprivate _triggerElement: HTMLElement | null;\n/**\n * Whether the mouse is currently down or not.\n */\nprivate _isMousedown: boolean = false;\n/**\n * Events to be registered on the trigger element.\n */\nprivate _triggerEvents = new Map<string, any>();\n/**\n * Set of currently active ripple references.\n */\nprivate _activeRipples = new Set<RippleRef>();\n/**\n * Ripple config for all ripples created by events.\n */\nrippleConfig: RippleConfig = {};\n/**\n * Whether mouse ripples should be created or not.\n */\nrippleDisabled: boolean = false;\n/**\n * @param {?} elementRef\n * @param {?} _ngZone\n * @param {?} _ruler\n * @param {?} platform\n */\nconstructor(\n      elementRef: ElementRef,\nprivate _ngZone: NgZone,\nprivate _ruler: ViewportRuler,\n      platform: Platform) {\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents.set('mousedown', this.onMousedown.bind(this));\n      this._triggerEvents.set('mouseup', this.onMouseup.bind(this));\n      this._triggerEvents.set('mouseleave', this.onMouseLeave.bind(this));\n\n      // By default use the host element as trigger element.\n      this.setTriggerElement(this._containerElement);\n    }\n  }\n/**\n * Fades in a ripple at the given coordinates.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nfadeInRipple(pageX: number, pageY: number, config: RippleConfig = {}): RippleRef {\n    let /** @type {?} */ containerRect = this._containerElement.getBoundingClientRect();\n\n    if (config.centered) {\n      pageX = containerRect.left + containerRect.width / 2;\n      pageY = containerRect.top + containerRect.height / 2;\n    } else {\n      // Subtract scroll values from the coordinates because calculations below\n      // are always relative to the viewport rectangle.\n      let /** @type {?} */ scrollPosition = this._ruler.getViewportScrollPosition();\n      pageX -= scrollPosition.left;\n      pageY -= scrollPosition.top;\n    }\n\n    let /** @type {?} */ radius = config.radius || distanceToFurthestCorner(pageX, pageY, containerRect);\n    let /** @type {?} */ duration = RIPPLE_FADE_IN_DURATION * (1 / (config.speedFactor || 1));\n    let /** @type {?} */ offsetX = pageX - containerRect.left;\n    let /** @type {?} */ offsetY = pageY - containerRect.top;\n\n    let /** @type {?} */ ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    let /** @type {?} */ rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.VISIBLE;\n\n      if (!config.persistent && !this._isMousedown) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n/**\n * Fades out a ripple reference.\n * @param {?} rippleRef\n * @return {?}\n */\nfadeOutRipple(rippleRef: RippleRef) {\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!this._activeRipples.delete(rippleRef)) {\n      return;\n    }\n\n    let /** @type {?} */ rippleEl = rippleRef.element;\n\n    rippleEl.style.transitionDuration = `${RIPPLE_FADE_OUT_DURATION}ms`;\n    rippleEl.style.opacity = '0';\n\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN; /** @type {?} */((\n      rippleEl.parentNode)).removeChild(rippleEl);\n    }, RIPPLE_FADE_OUT_DURATION);\n  }\n/**\n * Fades out all currently active ripples.\n * @return {?}\n */\nfadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n/**\n * Sets the trigger element and registers the mouse events.\n * @param {?} element\n * @return {?}\n */\nsetTriggerElement(element: HTMLElement | null) {\n    // Remove all previously register event listeners from the trigger element.\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => { /** @type {?} */((\n        this._triggerElement)).removeEventListener(type, fn);\n      });\n    }\n\n    if (element) {\n      // If the element is not null, register all event listeners on the trigger element.\n      this._ngZone.runOutsideAngular(() => {\n        this._triggerEvents.forEach((fn, type) => element.addEventListener(type, fn));\n      });\n    }\n\n    this._triggerElement = element;\n  }\n/**\n * Listener being called on mousedown event.\n * @param {?} event\n * @return {?}\n */\nprivate onMousedown(event: MouseEvent) {\n    if (!this.rippleDisabled) {\n      this._isMousedown = true;\n      this.fadeInRipple(event.pageX, event.pageY, this.rippleConfig);\n    }\n  }\n/**\n * Listener being called on mouseup event.\n * @return {?}\n */\nprivate onMouseup() {\n    this._isMousedown = false;\n\n    // Fade-out all ripples that are completely visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      if (!ripple.config.persistent && ripple.state === RippleState.VISIBLE) {\n        ripple.fadeOut();\n      }\n    });\n  }\n/**\n * Listener being called on mouseleave event.\n * @return {?}\n */\nprivate onMouseLeave() {\n    if (this._isMousedown) {\n      this.onMouseup();\n    }\n  }\n/**\n * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\n * @param {?} fn\n * @param {?=} delay\n * @return {?}\n */\nprivate runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n}\n\nfunction RippleRenderer_tsickle_Closure_declarations() {\n/**\n * Element where the ripples are being added to.\n * @type {?}\n */\nRippleRenderer.prototype._containerElement;\n/**\n * Element which triggers the ripple elements on mouse events.\n * @type {?}\n */\nRippleRenderer.prototype._triggerElement;\n/**\n * Whether the mouse is currently down or not.\n * @type {?}\n */\nRippleRenderer.prototype._isMousedown;\n/**\n * Events to be registered on the trigger element.\n * @type {?}\n */\nRippleRenderer.prototype._triggerEvents;\n/**\n * Set of currently active ripple references.\n * @type {?}\n */\nRippleRenderer.prototype._activeRipples;\n/**\n * Ripple config for all ripples created by events.\n * @type {?}\n */\nRippleRenderer.prototype.rippleConfig;\n/**\n * Whether mouse ripples should be created or not.\n * @type {?}\n */\nRippleRenderer.prototype.rippleDisabled;\n/** @type {?} */\nRippleRenderer.prototype._ngZone;\n/** @type {?} */\nRippleRenderer.prototype._ruler;\n}\n\n/**\n * @param {?} element\n * @return {?}\n */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n * @param {?} x\n * @param {?} y\n * @param {?} rect\n * @return {?}\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const /** @type {?} */ distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const /** @type {?} */ distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\nexport class MatOptionModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatOptionModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptionModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOptionModule.ctorParameters;\n}\n\n\n\nexport {MatOptionSelectionChange,MatOption} from './option';\nexport {MatOptgroupBase,_MatOptgroupMixinBase,MatOptgroup} from './optgroup';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl. ' +\n      'Did you forget to add matInput to the native input or textarea element?');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DateAdapter} from '@angular/material/core';\n/**\n * Function that attempts to coerce a value to a date using a DateAdapter. Date instances, null,\n * and undefined will be passed through. Empty strings will be coerced to null. Valid ISO 8601\n * strings (https://www.ietf.org/rfc/rfc3339.txt) will be coerced to dates. All other values will\n * result in an error being thrown.\n * @throws Throws when the value cannot be coerced.\n * @template D\n * @param {?} adapter The date adapter to use for coercion\n * @param {?} value The value to coerce.\n * @return {?} A date object coerced from the value.\n */\nexport function coerceDateProperty<D>(adapter: DateAdapter<D>, value: any): D | null {\n  if (typeof value === 'string') {\n    if (value == '') {\n      value = null;\n    } else {\n      value = adapter.fromIso8601(value) || value;\n    }\n  }\n  if (value == null || adapter.isDateInstance(value)) {\n    return value;\n  }\n  throw Error(`Datepicker: Value must be either a date object recognized by the DateAdapter or ` +\n              `an ISO 8601 string. Instead got: ${value}`);\n}\n","\n/**\n * Converts values into strings. Falsy values become empty strings.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToString(value: string | number): string {\n  return `${value || ''}`;\n}\n/**\n * Converts a value that might be a string into a number.\n * \\@docs-private\n * @param {?} value\n * @return {?}\n */\nexport function coerceToNumber(value: string | number): number {\n  return typeof value === 'string' ? parseInt(value, 10) : value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatProgressSpinner,\n  MatSpinner,\n  MatProgressSpinnerCssMatStyler,\n} from './progress-spinner';\nexport class MatProgressSpinnerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule,\n    MatProgressSpinnerCssMatStyler\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatProgressSpinnerCssMatStyler\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatProgressSpinnerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatProgressSpinnerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatProgressSpinnerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatProgressSpinnerModule,PROGRESS_SPINNER_STROKE_WIDTH,ProgressSpinnerMode,MatProgressSpinnerCssMatStyler,MatProgressSpinnerBase,_MatProgressSpinnerMixinBase,MatProgressSpinner,MatSpinner} from './public_api';\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n","\n/**\n * \\@docs-private\n */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\nfunction AnimationCurves_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationCurves.STANDARD_CURVE;\n/** @type {?} */\nAnimationCurves.DECELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.ACCELERATION_CURVE;\n/** @type {?} */\nAnimationCurves.SHARP_CURVE;\n}\n\n/**\n * \\@docs-private\n */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n\nfunction AnimationDurations_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationDurations.COMPLEX;\n/** @type {?} */\nAnimationDurations.ENTERING;\n/** @type {?} */\nAnimationDurations.EXITING;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {ElementRef, Renderer2} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport interface HasRenderer {\n  _renderer: Renderer2;\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values.  */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n/**\n * Mixin to augment a directive with a `color` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultColor\n * @return {?}\n */\nexport function mixinColor<T extends Constructor<HasRenderer>>(base: T, defaultColor?: ThemePalette)\n    : Constructor<CanColor> & T {\n  return class extends base {\nprivate _color: ThemePalette;\n/**\n * @return {?}\n */\nget color(): ThemePalette { return this._color; }\n/**\n * @param {?} value\n * @return {?}\n */\nset color(value: ThemePalette) {\n      const /** @type {?} */ colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._renderer.removeClass(this._elementRef.nativeElement, `mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._renderer.addClass(this._elementRef.nativeElement, `mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n/** @docs-private */\nexport interface HasTabIndex {\n  tabIndex: number;\n}\n/**\n * Mixin to augment a directive with a `tabIndex` property.\n * @template T\n * @param {?} base\n * @param {?=} defaultTabIndex\n * @return {?}\n */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : Constructor<HasTabIndex> & T {\n  return class extends base {\nprivate _tabIndex: number = defaultTabIndex;\n/**\n * @return {?}\n */\nget tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n/**\n * @param {?} value\n * @return {?}\n */\nset tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n/**\n * @param {...?} args\n */\nconstructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\n\n\n// Users of the Dispatcher never need to see this type, but TypeScript requires it to be exported.\nexport type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n * \n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport class UniqueSelectionDispatcher {\nprivate _listeners: UniqueSelectionDispatcherListener[] = [];\n/**\n * Notify other items that selection for the given name has been set.\n * @param {?} id ID of the item.\n * @param {?} name Name of the item.\n * @return {?}\n */\nnotify(id: string, name: string) {\n    for (let /** @type {?} */ listener of this._listeners) {\n      listener(id, name);\n    }\n  }\n/**\n * Listen for future changes to item selection.\n * @param {?} listener\n * @return {?} Function used to deregister listener\n * \n */\nlisten(listener: UniqueSelectionDispatcherListener): () => void {\n    this._listeners.push(listener);\n    return () => {\n      this._listeners = this._listeners.filter((registered: UniqueSelectionDispatcherListener) => {\n        return listener !== registered;\n      });\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UniqueSelectionDispatcher_tsickle_Closure_declarations() {\n/** @type {?} */\nUniqueSelectionDispatcher.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUniqueSelectionDispatcher.ctorParameters;\n/** @type {?} */\nUniqueSelectionDispatcher.prototype._listeners;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentDispatcher\n * @return {?}\n */\nexport function UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(\n    parentDispatcher: UniqueSelectionDispatcher) {\n  return parentDispatcher || new UniqueSelectionDispatcher();\n}\n/**\n * \\@docs-private\n */\nexport const UNIQUE_SELECTION_DISPATCHER_PROVIDER = {\n  // If there is already a dispatcher available, use that. Otherwise, provide a new one.\n  provide: UniqueSelectionDispatcher,\n  deps: [[new Optional(), new SkipSelf(), UniqueSelectionDispatcher]],\n  useFactory: UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY\n};\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * Extends an object with the *enumerable* and *own* properties of one or more source objects,\n * similar to Object.assign.\n * \n * @param {?} dest The object which will have properties copied to it.\n * @param {...?} sources The source objects from which properties will be copied.\n * @return {?}\n */\nexport function extendObject(dest: any, ...sources: any[]): any {\n  if (dest == null) {\n    throw TypeError('Cannot convert undefined or null to object');\n  }\n\n  for (let /** @type {?} */ source of sources) {\n    if (source != null) {\n      for (let /** @type {?} */ key in source) {\n        if (source.hasOwnProperty(key)) {\n          dest[key] = source[key];\n        }\n      }\n    }\n  }\n\n  return dest;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE_PROVIDER} from './date-adapter';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport {MAT_DATE_LOCALE,MAT_DATE_LOCALE_PROVIDER,DateAdapter} from './date-adapter';\nexport {MatDateFormats,MAT_DATE_FORMATS} from './date-formats';\nexport {NativeDateAdapter} from './native-date-adapter';\nexport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\nexport class NativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n    MAT_DATE_LOCALE_PROVIDER\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNativeDateModule.ctorParameters;\n}\n\nexport class MatNativeDateModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatNativeDateModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatNativeDateModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatNativeDateModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\n/**\n * Injection token that can be used to specify the global error options.\n */\nexport const MAT_ERROR_GLOBAL_OPTIONS =\n    new InjectionToken<ErrorOptions>('mat-error-global-options');\n\nexport type ErrorStateMatcher =\n    (control: FormControl, form: FormGroupDirective | NgForm) => boolean;\n\nexport interface ErrorOptions {\n  errorStateMatcher?: ErrorStateMatcher;\n}\n/**\n * Returns whether control is invalid and is either touched or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function defaultErrorStateMatcher(control: FormControl, form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.touched || isSubmitted));\n}\n/**\n * Returns whether control is invalid and is either dirty or is a part of a submitted form.\n * @param {?} control\n * @param {?} form\n * @return {?}\n */\nexport function showOnDirtyErrorStateMatcher(control: FormControl,\n    form: FormGroupDirective | NgForm) {\n  const /** @type {?} */ isSubmitted = form && form.submitted;\n  return !!(control.invalid && (control.dirty || isSubmitted));\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, isDevMode} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {HammerStatic, HammerInstance, Recognizer, RecognizerStatic} from './gesture-annotations';\nexport class GestureConfig extends HammerGestureConfig {\nprivate _hammer: HammerStatic = typeof window !== 'undefined' ? ( /** @type {?} */((window as any))).Hammer : null;\n\n  /* List of new event names to add to the gesture support list */\n  events: string[] = this._hammer ? [\n    'longpress',\n    'slide',\n    'slidestart',\n    'slideend',\n    'slideright',\n    'slideleft'\n  ] : [];\nconstructor() {\n    super();\n\n    if (!this._hammer && isDevMode()) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material ' +\n        'components may not work correctly.'\n      );\n    }\n  }\n/**\n * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n * \n * Our gesture names come from the Material Design gestures spec:\n * https://www.google.com/design/spec/patterns/gestures.html#gestures-touch-mechanics\n * \n * More information on default recognizers can be found in Hammer docs:\n * http://hammerjs.github.io/recognizer-pan/\n * http://hammerjs.github.io/recognizer-press/\n * \n * @param {?} element Element to which to assign the new HammerJS gestures.\n * @return {?} Newly-created HammerJS instance.\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new this._hammer(element);\n\n    // Default Hammer Recognizers.\n    let /** @type {?} */ pan = new this._hammer.Pan();\n    let /** @type {?} */ swipe = new this._hammer.Swipe();\n    let /** @type {?} */ press = new this._hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    let /** @type {?} */ slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    let /** @type {?} */ longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return /** @type {?} */(( mc as HammerInstance));\n  }\n/**\n * Creates a new recognizer, without affecting the default recognizers of HammerJS\n * @param {?} base\n * @param {?} options\n * @param {...?} inheritances\n * @return {?}\n */\nprivate _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let /** @type {?} */ recognizer = new ( /** @type {?} */((base.constructor as RecognizerStatic)))(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction GestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGestureConfig.ctorParameters;\n/** @type {?} */\nGestureConfig.prototype._hammer;\n/** @type {?} */\nGestureConfig.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nexport type RippleState = number;\nexport let RippleState: any = {};\nRippleState.FADING_IN = 0;\nRippleState.VISIBLE = 1;\nRippleState.FADING_OUT = 2;\nRippleState.HIDDEN = 3;\nRippleState[RippleState.FADING_IN] = \"FADING_IN\";\nRippleState[RippleState.VISIBLE] = \"VISIBLE\";\nRippleState[RippleState.FADING_OUT] = \"FADING_OUT\";\nRippleState[RippleState.HIDDEN] = \"HIDDEN\";\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n/**\n * Current state of the ripple reference.\n */\nstate: RippleState = RippleState.HIDDEN;\n/**\n * @param {?} _renderer\n * @param {?} element\n * @param {?} config\n */\nconstructor(\nprivate _renderer: RippleRenderer,\npublic element: HTMLElement,\npublic config: RippleConfig) {\n  }\n/**\n * Fades out the ripple element.\n * @return {?}\n */\nfadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n\nfunction RippleRef_tsickle_Closure_declarations() {\n/**\n * Current state of the ripple reference.\n * @type {?}\n */\nRippleRef.prototype.state;\n/** @type {?} */\nRippleRef.prototype._renderer;\n/** @type {?} */\nRippleRef.prototype.element;\n/** @type {?} */\nRippleRef.prototype.config;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  Inject,\n  NgZone,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\nimport {RippleRef} from './ripple-ref';\n\nexport interface RippleGlobalOptions {\n  disabled?: boolean;\n  baseSpeedFactor?: number;\n}\n/**\n * Injection token that can be used to specify the global ripple options.\n */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\nexport class MatRipple implements OnChanges, OnDestroy {\n\n  /**\n   * The element that triggers the ripple when click events are received. Defaults to the\n   * directive's host element.\n   */\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\n   trigger: HTMLElement|HTMLElement;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n */\ncentered: boolean;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n */\ndisabled: boolean;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n */\nradius: number = 0;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n */\nspeedFactor: number = 1;\n/**\n * Custom color for ripples.\n */\ncolor: string;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n */\nunbounded: boolean;\n/**\n * Renderer for the ripple DOM manipulations.\n */\nprivate _rippleRenderer: RippleRenderer;\n/**\n * Options that are set globally for all ripples.\n */\nprivate _globalOptions: RippleGlobalOptions;\n/**\n * @param {?} elementRef\n * @param {?} ngZone\n * @param {?} ruler\n * @param {?} platform\n * @param {?} globalOptions\n */\nconstructor(\n    elementRef: ElementRef,\n    ngZone: NgZone,\n    ruler: ViewportRuler,\n    platform: Platform,\n      globalOptions: RippleGlobalOptions\n  ) {\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\n    this._globalOptions = globalOptions ? globalOptions : {};\n\n    this._updateRippleRenderer();\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if ((changes['trigger'] || changes['_matRippleTrigger']) && this.trigger) {\n      this._rippleRenderer.setTriggerElement(this.trigger);\n    }\n\n    this._updateRippleRenderer();\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // Set the trigger element to null to cleanup all listeners.\n    this._rippleRenderer.setTriggerElement(null);\n  }\n/**\n * Launches a manual ripple at the specified position.\n * @param {?} pageX\n * @param {?} pageY\n * @param {?=} config\n * @return {?}\n */\nlaunch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\n  }\n/**\n * Fades out all currently showing ripple elements.\n * @return {?}\n */\nfadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n/**\n * Ripple configuration from the directive's input values.\n * @return {?}\n */\nget rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\n      radius: this.radius,\n      color: this.color\n    };\n  }\n/**\n * Updates the ripple renderer with the latest ripple configuration.\n * @return {?}\n */\n_updateRippleRenderer() {\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ViewportRuler, },\n{type: Platform, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'trigger': [{ type: Input, args: ['matRippleTrigger', ] },],\n'centered': [{ type: Input, args: ['matRippleCentered', ] },],\n'disabled': [{ type: Input, args: ['matRippleDisabled', ] },],\n'radius': [{ type: Input, args: ['matRippleRadius', ] },],\n'speedFactor': [{ type: Input, args: ['matRippleSpeedFactor', ] },],\n'color': [{ type: Input, args: ['matRippleColor', ] },],\n'unbounded': [{ type: Input, args: ['matRippleUnbounded', ] },],\n};\n}\n\nfunction MatRipple_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRipple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRipple.ctorParameters;\n/** @type {?} */\nMatRipple.propDecorators;\n/** @type {?} */\nMatRipple.prototype.trigger;\n/**\n * Whether the ripple always originates from the center of the host element's bounds, rather\n * than originating from the location of the click event.\n * @type {?}\n */\nMatRipple.prototype.centered;\n/**\n * Whether click events will not trigger the ripple. Ripples can be still launched manually\n * by using the `launch()` method.\n * @type {?}\n */\nMatRipple.prototype.disabled;\n/**\n * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n * will be the distance from the center of the ripple to the furthest corner of the host element's\n * bounding rectangle.\n * @type {?}\n */\nMatRipple.prototype.radius;\n/**\n * If set, the normal duration of ripple animations is divided by this value. For example,\n * setting it to 0.5 will cause the animations to take twice as long.\n * A changed speedFactor will not modify the fade-out duration of the ripples.\n * @type {?}\n */\nMatRipple.prototype.speedFactor;\n/**\n * Custom color for ripples.\n * @type {?}\n */\nMatRipple.prototype.color;\n/**\n * Whether foreground ripples should be visible outside the component's bounds.\n * @type {?}\n */\nMatRipple.prototype.unbounded;\n/**\n * Renderer for the ripple DOM manipulations.\n * @type {?}\n */\nMatRipple.prototype._rippleRenderer;\n/**\n * Options that are set globally for all ripples.\n * @type {?}\n */\nMatRipple.prototype._globalOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {ScrollDispatchModule, VIEWPORT_RULER_PROVIDER} from '@angular/cdk/scrolling';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport {MatRipple, RippleGlobalOptions, MAT_RIPPLE_GLOBAL_OPTIONS} from './ripple';\nexport {RippleRef, RippleState} from './ripple-ref';\nexport {RippleConfig, RIPPLE_FADE_IN_DURATION, RIPPLE_FADE_OUT_DURATION} from './ripple-renderer';\nexport class MatRippleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule, PlatformModule, ScrollDispatchModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n  providers: [VIEWPORT_RULER_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatRippleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatRippleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatRippleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\n\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n * \n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with <mat-checkbox> and should *not* be used if the user would directly interact\n * with the checkbox. The pseudo-checkbox should only be used as an implementation detail of\n * more complex components that appropriately handle selected / checked state.\n * \\@docs-private\n */\nexport class MatPseudoCheckbox {\n/**\n * Display state of the checkbox.\n */\nstate: MatPseudoCheckboxState = 'unchecked';\n/**\n * Whether the checkbox is disabled.\n */\ndisabled: boolean = false;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input },],\n'disabled': [{ type: Input },],\n};\n}\n\nfunction MatPseudoCheckbox_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPseudoCheckbox.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPseudoCheckbox.ctorParameters;\n/** @type {?} */\nMatPseudoCheckbox.propDecorators;\n/**\n * Display state of the checkbox.\n * @type {?}\n */\nMatPseudoCheckbox.prototype.state;\n/**\n * Whether the checkbox is disabled.\n * @type {?}\n */\nMatPseudoCheckbox.prototype.disabled;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\nexport class MatPseudoCheckboxModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatPseudoCheckboxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatPseudoCheckboxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatPseudoCheckboxModule.ctorParameters;\n}\n\n\n\nexport {MatPseudoCheckboxState,MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Component, ViewEncapsulation, Input, ChangeDetectionStrategy} from '@angular/core';\nimport {mixinDisabled, CanDisable} from '../common-behaviors/disabled';\n/**\n * \\@docs-private\n */\nexport class MatOptgroupBase { }\nexport const /** @type {?} */ _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet /** @type {?} */ _uniqueOptgroupIdCounter = 0;\n/**\n * Component that is used to group instances of `mat-option`.\n */\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n/**\n * Label for the option group.\n */\nlabel: string;\n/**\n * Unique id for the underlying label.\n */\n_labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'label': [{ type: Input },],\n};\n}\n\nfunction MatOptgroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatOptgroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatOptgroup.ctorParameters;\n/** @type {?} */\nMatOptgroup.propDecorators;\n/**\n * Label for the option group.\n * @type {?}\n */\nMatOptgroup.prototype.label;\n/**\n * Unique id for the underlying label.\n * @type {?}\n */\nMatOptgroup.prototype._labelId;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["type","Component","args","selector","inputs","template","styles","NgZone","ChangeDetectorRef","MatTabNav","propDecorators","_tabLinks","ContentChildren","forwardRef","MatTabLink","descendants","backgroundColor","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinDisabled","_tabNavBar","_elementRef","ngZone","ruler","platform","globalOptions","_this","_super","call","this","_isActive","_disableRipple","_tabLinkRipple","MatRipple","Object","defineProperty","prototype","get","set","value","updateActiveLink","enumerable","configurable","MatToolbarRow","decorators","Directive","MatToolbarBase","_renderer","MatToolbar","renderer","elementRef","tslib_1.__extends","_MatToolbarMixinBase","host","class","role","Renderer2","ElementRef","MatToolbarModule","imports","MatCommonModule","declarations","VERSION","_angular_core","Version","trigger","state","style","height","visibility","transition","animate","providers","provide","MatStepper","useExisting","MatVerticalStepper","encapsulation","ViewEncapsulation","None","preserveWhitespaces","_MatStepperPrevious","CdkStepperPrevious","MatStepperNext","apply","arguments","_MatStepperNext","(click)","CdkStepper","ctorParameters","MatStepperPrevious","_MatTable","CdkTable","MatTable","CDK_TABLE_TEMPLATE","_MatCellDef","CdkCellDef","MatCellDef","MatHeaderCellDef","CdkHeaderCellDef","MatColumnDef","CdkColumnDef","name","MatHeaderCell","columnDef","addClass","nativeElement","cssClassFriendlyName","MatCell","_MatCell","_MatCdkRowDef","CdkRowDef","_MatRow","CdkRow","MatHeaderRowDef","_MatHeaderRowDef","MatRowDef","MatHeaderRow","_MatHeaderRow","CDK_ROW_TEMPLATE","changeDetection","ChangeDetectionStrategy","OnPush","MatRow","MatInkBar","_ngZone","alignToElement","element","show","requestAnimationFrame","runOutsideAngular","_setStyles","setStyle","hide","left","offsetLeft","width","offsetWidth","MatTabLabel","templateRef","viewContainerRef","_MatTabLabelBaseClass","ViewContainerRef","MatTabBase","_MatTabMixinBase","MatTab","_viewContainerRef","_contentPortal","ngOnChanges","changes","hasOwnProperty","_labelChange","next","ngOnDestroy","_disableChange","complete","ngOnInit","TemplatePortal","_content","exportAs","textLabel","MatTabBody","_dir","onCentering","EventEmitter","onCentered","position","_getLayoutDirection","origin","dir","_position","_origin","_isCenterPosition","_portalHost","hasAttached","attach","detach","e","toState","emit","animations","transform","Directionality","Optional","ViewChild","PortalHostDirective","nextId","MatTabGroupBase","MatTabGroup","_changeDetectorRef","_tabsSubscription","Subscription","EMPTY","_dynamicHeight","headerPosition","_indexToSelect","_backgroundColor","removeClass","ngAfterContentChecked","indexToSelect","Math","min","_tabs","length","max","Promise","resolve","then","selectedIndexChange","_selectedIndex","tab","markForCheck","ngAfterContentInit","unsubscribe","_tabLabelSubscription","ngAfterViewChecked","_isInitialized","_focusChanged","index","focusChange","_createChangeEvent","event","toArray","merge","map","concat","subscribe","_getTabLabelId","i","_groupId","_setTabBodyWrapperHeight","tabHeight","_tabBodyWrapperHeight","_tabBodyWrapper","offsetHeight","_removeTabBodyWrapperHeight","clientHeight","dynamicHeight","_dynamicHeightDeprecated","Output","selectChange","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","MatTabLabelWrapper","focus","getOffsetWidth","MatTabHeaderBase","MatTabHeader","_scrollDistance","_selectedIndexChanged","_realignInkBar","_disableScrollAfter","selectFocusedIndex","indexFocused","_focusIndex","_tabLabelCount","_labelWrappers","_updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","RIGHT_ARROW","_focusNextTab","LEFT_ARROW","_focusPreviousTab","dirChange","change","of","resize","window","auditTime","fromEvent","startWith","_checkPaginationEnabled","_isValidIndex","disabled","_setTabFocus","tabIndex","_showPaginationControls","containerEl","_tabListContainer","scrollLeft","focusIndex","_moveFocus","scrollDistance","translateX","_tabList","labelBeforePos","labelAfterPos","viewLength","selectedLabel","getOffsetLeft","beforeVisiblePos","afterVisiblePos","isEnabled","scrollWidth","selectedLabelWrapper","selectedIndex","_inkBar","MatTabNavBase","_onDestroy","Subject","observableOf","coerceBooleanProperty","_setLinkDisableRipple","_activeLinkChanged","_activeLinkElement","MatSnackBarRef","containerInstance","_overlayRef","_onAction","onAction","dismiss","_onExit","_finishDismiss","_afterClosed","closed","exit","clearTimeout","_durationTimeoutId","closeWithAction","_dismissAfter","duration","_open","_afterOpened","dispose","afterDismissed","afterOpened","asObservable","verticalPosition","MatSnackBarConfig","SimpleSnackBar","snackBarRef","data","action","SHOW_ANIMATION","_onEnter","MatSnackBarContainer","_animationState","snackBarConfig","attachComponentPortal","portal","Error","extraClasses","_i","_a","cssClass","attachTemplatePortal","onAnimationEnd","startsWith","_completeExit","onEnter_1","_destroyed","detectChanges","first","onMicrotaskEmpty","BasePortalHost","[@state]","(@state.done)","HIDE_ANIMATION","MatSnackBar","_overlay","_live","_injector","_parentSnackBar","parent","_openedSnackBarRef","_snackBarRefAtThisLevel","openFromComponent","component","config","_config","_applyConfigDefaults","_attach","enter","open","message","_attachSnackBarContainer","overlayRef","containerPortal","ComponentPortal","containerRef","instance","_createOverlay","container","undefined","injector","contentRef","state$$1","OverlayConfig","direction","isRtl","isLeft","horizontalPosition","isRight","positionStrategy","top","bottom","_createInjector","userInjector","injectionTokens","WeakMap","MAT_SNACK_BAR_DATA","Injectable","Overlay","LiveAnnouncer","Injector","SkipSelf","MatSnackBarModule","MatSort","register","sortable","id","getSortHeaderMissingIdError","sortables","has","getSortDuplicateSortableIdError","deregister","sort","active","start","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","disableClear","nextDirectionIndex","indexOf","sortButtonLabel","sortDescriptionLabel","MatSortHeaderIntl","MatSortHeader","_intl","changeDetectorRef","_sort","_cdkColumnDef","arrowPosition","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","sortChange","v","_isSorted","[class.mat-sort-header-sorted]","SORT_ANIMATION_TRANSITION","_id","MatSortModule","CommonModule","_MatStepLabel","CdkStepLabel","MatStepLabel","MatStepHeader","_active","_stringLabel","label","selected","_MatStep","CdkStep","_MatStepper","MatStep","stepper","errorStateMatcher","control","form","originalErrorState","_originalErrorStateMatcher","errorOptions","defaultErrorStateMatcher","Inject","MAT_ERROR_GLOBAL_OPTIONS","stepLabel","ContentChild","MatHorizontalStepper","MatDrawer","toggle","isOpen","opened","_isAnimating","handleKeydown","ESCAPE","disableClose","close","_onAnimationStart","_onAnimationEnd","fromState","onOpen","MatDrawerToggleResult","onClose","_currentTogglePromise","[@transform]","DOCUMENT","align","mode","onPositionChanged","onAlignChanged","_element","MatDrawerContainer","_drawers","_validateDrawers","_updateContentMargins","drawer","_watchDrawerPosition","takeUntil","_watchDrawerMode","_modeChanged","isAdd","_end","_left","_start","_right","_onBackdropClicked","backdropClick","_closeModalDrawer","filter","forEach","_isShowingBackdrop","_isDrawerOpen","right","_width","_contentMargins","MatSidenavContent","MatSidenavContainer","MatSidenav","_fixedInViewport","_fixedTopGap","_fixedBottomGap","coerceNumberProperty","(@transform.start)","(@transform.done)","(keydown)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[style.top.px]","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","MatSlideToggleBase","_MatSlideToggleMixinBase","mixinTabIndex","mixinColor","mixinDisableRipple","_platform","_focusMonitor","_required","ariaLabelledby","_checked","_uniqueId","focusOrigin","_onInputFocusChange","_slideRenderer","dragging","registerOnChange","fn","focusVia","_inputElement","checked","_focusRipple","fadeOut","_ripple","launch","persistent","centered","_emitChangeEvent","source","_onDragStart","startThumbDrag","_onDrag","dragPercentage","_previousChecked","setTimeout","stopThumbDrag","_onLabelTextChange","[id]","[class.mat-checked]","[class.mat-disabled]","[class.mat-slide-toggle-label-before]","required","SlideToggleRenderer","updateThumbPosition","distance","dragX","_thumbBarWidth","applyCssTransform","_thumbEl","_getDragPercentage","percentage","MAT_SLIDER_VALUE_ACCESSOR","MatSlider","MatSliderChange","MatSliderBase","_invert","_max","_min","_value","input","_percent","_isSliding","_tickIntervalPercent","_sliderDimensions","_controlValueAccessorChangeFn","_calculatePercentage","_roundLabelTo","_step","toString","split","pop","_thumbLabel","tickInterval","_vertical","toFixed","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","_invertMouseCoords","_direction","backgroundSize","sign","tickSize","rotate","_thumbGap","_invertAxis","monitor","_dirChangeSubscription","stopMonitoring","_getSliderDimensions","_updateTickIntervalPercent","_onClick","oldValue","_focusHostElement","_onSlide","_onSlideStart","_updateValueFromPosition","x","center","y","_emitInputEvent","preventDefault","_onSlideEnd","_valueOnSlideStart","_onFocus","_onKeydown","PAGE_UP","_increment","END","HOME","DOWN_ARROW","_onKeyup","numSteps","step","closestValue","pixelsPerStep","trackSize","stepsPerTick","ceil","pixelsPerTick","_calculateValue","_sliderWrapper","getBoundingClientRect","writeValue","[style.zoom]","MatPaginatorIntl","pageSize","startIndex","page","PageEvent","MatPaginator","_length","_pageSize","_updateDisplayedPageSizeOptions","pageSizeOptions","_initialized","_intlChanges","pageIndex","_emitPageEvent","previousPage","hasPreviousPage","hasNextPage","numberOfPages","_changePageSize","floor","_displayedPageSizeOptions","push","a","b","MatPaginatorModule","MatProgressBar","_bufferValue","clamp","_bufferTransform","bufferValue","aria-valuemin","aria-valuemax","[attr.aria-valuenow]","[attr.mode]","[class.mat-primary]","[class.mat-accent]","[class.mat-warn]","MatProgressBarModule","DEGREE_IN_RADIANS","PI","MAX_ANGLE","HAS_RAF","PROGRESS_SPINNER_STROKE_WIDTH","MatProgressSpinnerCssMatStyler","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","_lastAnimationId","_mode","MatProgressSpinner","clearInterval","_interdeterminateInterval","interval","_cleanupIndeterminateAnimation","newValue","_animateCircle","_startIndeterminateAnimation","rotation","startTime","Date","now","changeInValue","animateTo","animateFrom","_renderArc","animation_1","elapsedTime","ease","end","materialEase","rotationStartPoint","temp","interdeterminateInterval","setInterval","currentValue","_path","svgArc","getSvgArc","strokeWidth","setAttribute","MatSpinner","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_changeDetector","onTouched","labelPosition","_labelPosition","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_selected","_markForCheck","registerOnTouched","_MatRadioGroupMixinBase","MatRadioButton","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_removeUniqueSelectionListener","_radioDispatcher","listen","ngAfterViewInit","_onInputClick","stopPropagation","_onInputChange","groupValueChanged","animationFinished","MatDrawerContent","_container","_margins","margins","[style.marginLeft.px]","[style.marginRight.px]","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","activeElement","isFocusTrapEnabled","_focusTrap","focusInitialElementWhenReady","_disableClose","_restoreFocus","activeEl","contains","HTMLElement","create","parentMenu","menu","depth","setElevation","MatMenuTrigger","_resetMenu","_setIsMenuOpen","_menuOpen","onMenuOpen","onMenuClose","triggersSubmenu","_menuItemInstance","_highlighted","_checkMenu","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","_getPosition","hasBackdrop","backdropClass","scrollStrategy","_scrollStrategy","_positionSubscription","onPositionChange","posX","connectionPair","overlayX","posY","overlayY","setPositionClasses","_d","originX","originFallbackX","overlayFallbackX","offsetY","overlapTrigger","originY","originFallbackY","overlayFallbackY","connectedTo","withDirection","_hoverSubscription","parentClose","_parentMenu","hover","RxChain","from","result","backdrop","_handleMousedown","isFakeMousedownFromScreenReader","openMenu","_handleClick","toggleMenu","aria-haspopup","(mousedown)","MAT_MENU_SCROLL_STRATEGY","MatMenu","MatMenuItem","Self","_deprecatedMatMenuTriggerFor","MatMenuModule","transformPanel","opacity","minWidth","fadeInContent","deps","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_MatSelectMixinBase","MatSelectTrigger","MatSelect","_viewportRuler","_parentForm","_parentFormGroup","ngControl","_scrollStrategyFactory","_panelOpen","_optionSubscription","_changeSubscription","_tabSubscription","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_triggerFontSize","_onChange","_onTouched","_optionIds","_transformOrigin","_panelDoneAnimating","_positions","stateChanges","focused","ariaLabel","valueChange","valueAccessor","_placeholder","getMatSelectNonFunctionValueError","_setOptionDisableRipple","_initKeyManager","options","_resetOptions","_initializeSelection","_dropSubscriptions","onStable","overlayDir","_selectionModel","isEmpty","selectedOptions","join","viewValue","_handleClosedKeydown","UP_ARROW","_handleArrowKey","_handlePanelKeydown","_keyManager","setFirstItemActive","setLastItemActive","_onFadeInDone","_onBlur","panelOpen","_onAttached","_calculateOverlayOffsetX","_setScrollTop","submitted","isInvalid","isTouched","isSubmitted","overlayElement","querySelector","scrollTop","_setSelectionByValue","isUserInput","getMatSelectNonArrayValueError","_clearSelection","isArray","correspondingOption","_selectValue","setActiveItem","find","option","isDevMode","_selectViaInteraction","select","skip","clear","FocusKeyManager","withTypeAhead","tabOut","_listenToOptions","_setOptionIds","_setOptionMultiple","optionSelectionChanges","_onSelect","multiple","_propagateChanges","fallbackValue","valueToEmit","Array","_getOptionIndex","reduce","current","_calculateOverlayPosition","itemHeight","panelHeight","items","scrollContainerHeight","selectedOptionOffset","empty","MatOption","countGroupLabelsBeforeOption","optionGroups","scrollBuffer","_calculateOverlayScroll","maxScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","clampValue","overlayRect","offsetX","group","leftOverflow","paddingWidth","rightOverflow","viewportRect","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","getViewportRect","panelHeightBottom","bottomSpaceAvailable","_adjustPanelUp","panelHeightTop","topSpaceAvailable","_adjustPanelDown","distanceBelowViewport","round","distanceAboveViewport","_getOriginBasedOnOption","abs","prevActiveItem","activeItem","onKeydown","currentActiveItem","_getItemCount","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","[attr.id]","[attr.tabindex]","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-disabled]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[class.mat-select-disabled]","(blur)","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_PROVIDER_FACTORY","_scrollDispatcher","_ariaDescriber","_disabled","showDelay","hideDelay","_message","IOS","_enterListener","_leaveListener","_tooltipInstance","_disposeTooltip","MatTooltip","trim","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","delay","_createTooltip","_isTooltipVisible","TooltipComponent","afterHidden","strategy","withScrollableContainers","getScrollContainers","scrollableViewProperties","isOverlayClipped","panelClass","_getOrigin","isDirectionLtr","getMatTooltipInvalidPositionError","_getOverlayPosition","isLtr","updatePosition","tooltipClass","(longpress)","(focus)","(touchend)","ScrollDispatcher","_visibility","_closeOnInteraction","_onHide","_hideTimeoutId","_showTimeoutId","isVisible","_setTransformOrigin","_animationStart","_handleBodyInteraction","MatListItem","_handleBlur","_getHostElement","_MatListItemMixinBase","MatList","MatNavListCssMatStyler","_hasAvatar","MatListAvatarCssMatStyler","MatSelectionListBase","MatListOption","_hasFocus","checkboxPosition","deselected","destroyed","selectionList","_lineSetter","MatLineSetter","_lines","onFocus","_handleFocus","[class.mat-list-item-disabled]","MatSelectionList","_tabIndex","_optionFocusSubscription","SelectionModel","withWrap","_onFocusSubscription","_optionDestroyStream","_onDestroySubscription","deselectAll","switchMap","optionIndex","updateActiveItemIndex","_keydown","_toggleSelectOnFocusedOption","focusedIndex","activeItemIndex","focusedOption","_MatSelectionListMixinBase","transformMenu","fadeInItems","MatMenuItemBase","_MatMenuItemMixinBase","_triggersSubmenu","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","(mouseenter)","MAT_MENU_DEFAULT_OPTIONS","InjectionToken","_xPosition","_defaultOptions","xPosition","_yPosition","yPosition","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","classes","_classList","obj","className","item","focusFirstItem","customElevation","_previousElevation","_resetAnimation","_panelAnimationState","_onAnimationDone","classList","_closeSubscription","_openedByMouse","reason","closeMenu","_menuClosingActions","_initMenu","menuOpen","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","TileCoordinator","numColumns","tiles","tracker","fill","rowIndex","lastRowMax","rowCount","_trackTile","tile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","columnIndex","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","_rows","_gutterSize","normalizeUnits","gutterSize","_cols","cols","TileStyler","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","offset","getTileSize","span","gutterWidthFractionPerTile","setRowStyles","percentWidth","gutterWidth","FixedTileStyler","fixedRowHeight","init","reset","list","_setStyle","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","calc","getTileSpan","getGutterSpan","_setListStyle","ratioParts","parseFloat","_rowspan","_tiles","MatGridList","_gutter","coerceToString","_rowHeight","_setTileStyler","_layoutTiles","_checkRowHeight","rowHeight","_tileStyler","FitTileStyler","pos","positions","getComputedHeight","MatTextareaAutosize","_minRows","_setMinHeight","_setTextareaStyle","minHeight","maxHeight","textarea","textareaClone","cloneNode","rows","overflow","_setMaxHeight","ngDoCheck","resizeToFitContent","scrollHeight","_previousValue","maxRows","MAT_INPUT_INVALID_TYPES","MatInput","controlType","placeholder","_neverEmptyInputTypes","_errorOptions","el","target","selectionStart","selectionEnd","_type","_validateType","_updateErrorState","isFocused","oldState","errorState","_previousNativeValue","_isBadInput","nodeName","isBrowser","[disabled]","[required]","(input)","MatFormFieldControl","Platform","NgControl","NgForm","MatListBase","MatListItemBase","MatListDivider","MatListCssMatStyler","MatDividerCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","_list","_isNavList","MatDatepicker","_validSelected","_datepickerInput","_dateFilter","_inputSubscription","_disabledChange","_popupRef","_select","date","_dateAdapter","sameDate","selectedChanged","_registerInput","_valueChange","_focusedElementBeforeOpen","_document","touchUi","_openAsDialog","_openAsPopup","_dialogRef","_calendarPortal","isAttached","_dialog","MatDatepickerContent","afterClosed","componentInstance","datepicker","_createPopup","first$1","overlayState","_createPopupPositionStrategy","withFallbackPosition","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","MAT_DATEPICKER_VALUE_ACCESSOR","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInput","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateInput","_cvaOnChange","_validatorOnChange","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","coerceDateProperty","_maxValidator","compareDate","matDatepickerMax","actual","createMissingDateImplError","registerDatepicker","isValid","oldDate","_datepicker","dateChange","_datepickerSubscription","_localeSubscription","registerOnValidatorChange","validate","c","_validator","getPopupConnectionElementRef","underlineRef","_onInput","parse","_getValidDateOrNull","isDateInstance","[attr.aria-haspopup]","[attr.min]","[attr.max]","MatFormField","MatDatepickerToggle","_stateChanges","MatDatepickerIntl","MatMonthView","selectedChange","userSelection","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","_activeDate","oldActiveDate","today","_selectedDate","_getDateInCurrentMonth","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","_init","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","createDate","_createWeekCells","daysInMonth","getNumDaysInMonth","dateNames","getDateNames","_weeks","cell","_hasSameMonthAndYear","getDate","dateFilter","MatYearView","_selectedMonth","_getMonthInCurrentYear","CdkAccordion","_multi","_hideToggle","displayMode","hideToggle","MatAccordion","nextId$1","AccordionItem","accordion","accordionId","_expanded","expanded","_expansionDispatcher","notify","UniqueSelectionDispatcher","_MatExpansionPanelMixinBase","MatExpansionPanelBase","MatExpansionPanel","_uniqueSelectionDispatcher","_inputChanges","_getHideToggle","_getExpandedState","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","panel","_parentChangeSubscription","_getPanelId","_showToggle","_keyup","SPACE","ENTER","_toggle","[attr.aria-controls]","[attr.aria-expanded]","(keyup)","[@expansionHeight]","params","collapsedHeight","expandedHeight","Host","FocusMonitor","MatExpansionPanelDescription","MatExpansionPanelTitle","MatExpansionModule","A11yModule","_colspan","MatGridTile","coerceToNumber","property","MatGridTileText","MatLine","_beforeClose","_containerInstance","_animationStateChanged","phaseName","_afterOpen","MatDialogRef","dialogResult","_result","_startExitAnimation","_getPositionStrategy","centerHorizontally","getState","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","location","_parentDialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","afterAllClosed","defer","openDialogs","closeAll","_afterAllClosed","inProgressDialog","dialogContainer","_attachDialogContainer","dialogRef","_attachDialogContent","componentOrTemplateRef","afterOpen","getDialogById","dialog","_getOverlayState","dialogConfig","global","overlay","MatDialogContainer","TemplateRef","$implicit","_removeOpenDialog","splice","topDialog","dialogElementUid","MatDialogClose","proxiedChange","_matDialogClose","_matDialogCloseResult","MatDialogTitle","MatDialogContent","MatDialogActions","MatDialogModule","NgModule","PortalModule","SvgIconConfig","url","svgElement","MatIconRegistry","_http","_sanitizer","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","namespace","key","iconKey","_svgIconConfigs","addSvgIconSet","addSvgIconSetInNamespace","configNamespace","_iconSetConfigs","registerFontClassAlias","alias","_fontCssClassesByAlias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","sanitize","SecurityContext","RESOURCE_URL","getMatIconFailedToSanitizeError","cachedIcon","_cachedIconsByUrl","cloneSvg","_loadSvgIconFromConfig","doOperator","svg","getNamedSvgIcon","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","_loadSvgIconSetFromConfig","iconSetConfig","catchOperator","err","console","log","forkJoin","Observable","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","_svgElementFromString","iconSet","iconNode","tagName","toLowerCase","_setSvgAttributes","_toSvgElement","str","div","document","createElement","getAttribute","inProgressFetch","_inProgressUrlFetches","response","finallyOperator","delete","share","DomSanitizer","Http","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","MatIcon","parts","svgIcon","_usingFontIcon","_updateFontIconClasses","_setSvgElement","_clearSvgElement","appendChild","layoutElement","childCount","childNodes","removeChild","elem","fontSetClass","fontSet","_iconRegistry","_previousFontSetClass","fontIcon","_previousFontIconClass","_MatIconMixinBase","Attribute","MatIconModule","minDate","maxDate","MatCalendar","_maxDate","_clampedActiveDate","clampDate","getYearName","_monthView","switchToYearViewLabel","switchToMonthViewLabel","nextMonthLabel","nextYearLabel","startAt","_userSelected","_monthSelected","month","addCalendarMonths","_nextClicked","addCalendarYears","_previousEnabled","_isSameView","_handleCalendarBodyKeydownInMonthView","_handleCalendarBodyKeydownInYearView","_focusActiveCell","date1","date2","addCalendarDays","altKey","PAGE_DOWN","_dateFilterForViews","increment","_nextMonthInSameCol","MAT_DATE_FORMATS","startView","enabled","MatCalendarCell","numCols","cellAspectRatio","selectedValueChange","MatCalendarBody","_cellClicked","allowDisabledSelection","cellNumber","colIndex","todayValue","activeCell","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER","MAT_DATEPICKER_SCROLL_STRATEGY_PROVIDER_FACTORY","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MatCheckbox","indeterminate","_MatCheckboxRequiredValidator","CheckboxRequiredValidator","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","MatChipSelectionChange","MatChipBase","MatBasicChip","MatChip","onRemove","removed","_removable","selectable","selectionChange","deselect","selectViaInteraction","toggleSelected","remove","removable","DELETE","BACKSPACE","_blur","chip","_MatChipMixinBase","tabindex","destroy","MatChipRemove","_parentChip","MatChipListChange","MatChipList","ariaOrientation","chips","some","_chipInput","_selectable","_resetChips","_tabOutSubscription","registerInput","inputElement","setDisabledState","setProperty","_focusInput","code","isInputEmpty","isBackKey","isNextKey","setNextItemActive","_updateTabIndex","_userTabIndex","_updateKeyManager","chipIndex","_lastDestroyedIndex","chipsArray","newFocusIndex","focusChip","_sortValues","correspondingChip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","chipFocusChanges","[attr.aria-orientation]","FormGroupDirective","MatChipInput","separatorKeyCodes","chipEnd","_chipList","_addOnBlur","MatDialogConfig","ariaDescribedBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","_trapFocus","hasMovedFocus","toFocus","_elementFocusedBeforeDialogWasOpened","_state","[attr.role]","[@slideDialog]","(@slideDialog.start)","FocusTrapFactory","MatAnchor","focusMonitor","_haltDisabledEvents","MatButton","MatButtonModule","MatRippleModule","MatMiniFab","MatButtonToggleGroupBase","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_name","_updateSelectedButtonToggleFromValue","_updateButtonToggleNames","matchingButtonToggle","isDisabled","_MatButtonToggleGroupMixinBase","MatButtonToggleGroupMultiple","MatButtonToggle","toggleGroup","toggleGroupMultiple","_buttonToggleDispatcher","_isSingleSelector","buttonToggleGroup","buttonToggleGroupMultiple","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-disabled]","MatCardContent","MatCardTitle","MatCardSubtitle","MatCardActions","[class.mat-card-actions-align-end]","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","TransitionCheckState","Init","Checked","Unchecked","Indeterminate","MatCheckboxChange","MatCheckboxBase","indeterminateChange","_currentAnimationClass","_indeterminate","changed","_isRippleDisabled","disableRipple","newState","_getAnimationClassForCheckStateTransition","_currentCheckState","_removeFocusRipple","_onInteractionEvent","animSuffix","_MatCheckboxMixinBase","_emitSelectionChangeEvent","onSelectionChange","MatOptionSelectionChange","optionsArray","groups","groupCounter","[attr.aria-selected]","[class.mat-option-disabled]","MatOptgroup","MatOptionModule","MatPseudoCheckboxModule","exports","MAT_PLACEHOLDER_GLOBAL_OPTIONS","MatError","MatHint","nextUniqueId$2","[class.mat-right]","MatPlaceholder","MatPrefix","MatSuffix","_subscriptAnimationState","floatPlaceholder","_placeholderOptions","float","_hintLabel","_processHints","_floatPlaceholder","_validateControlChild","_control","_syncDescribedByIds","_hintChildren","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_errorChildren","_canPlaceholderFloat","_showAlwaysAnimate","_validatePlaceholders","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","_getDisplayedMessages","startHint","_hintLabelId","endHint","error","getMatFormFieldMissingControlError","[class.mat-input-invalid]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-invalid]","color","dividerColor","hideRequiredMarker","_connectionContainerRef","_suffixChildren","MatFormFieldModule","MatAutocompleteSelectedEvent","MatAutocomplete","showPanel","displayWith","optionSelected","_uniqueAutocompleteIdCounter","ActiveDescendantKeyManager","_getScrollTop","_setVisibility","_emitSelectEvent","_getClassList","mat-autocomplete-visible","mat-autocomplete-hidden","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_destroyPanel","closePanel","optionSelections","autocomplete","_outsideClickStream","_setTriggerValue","_resetActiveItem","activeOption","prevActiveItem_1","isArrowKey_1","_scrollToOption","_handleInput","openPanel","_manuallyFloatingPlaceholder","_resetPlaceholder","activeOptionIndex","labelCount","optionOffset","panelTop","newScrollTop","optionChanges","_positionStrategy","recalculateLastPosition","_setValueAndClose","toDisplay","inputValue","_clearPreviousSelectedOption","_attachOverlay","getMatAutocompleteMissingPanelError","_getHostWidth","updateSize","_getConnectedElement","aria-autocomplete","aria-multiline","[attr.aria-activedescendant]","DEFAULT_ROUND_BUTTON_COLOR","MatButtonCssMatStyler","MatRaisedButtonCssMatStyler","MatIconButtonCssMatStyler","MatFab","button","anchor","_MatButtonMixinBase","MatButtonBase","_isIconButton","_hasAttributeWithPrefix","unprefixedAttributeNames","__extends","d","__","constructor","extendStatics","class_1","class_2","_color","class_3","base","defaultTabIndex","class_4","parentDispatcher","sources","invalid","touched","showOnDirtyErrorStateMatcher","dirty","enforceStyleRecalculation","distanceToFurthestCorner","rect","distY","sqrt","distX","transformValue","webkitTransform","scrollStrategies","reposition","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","block","getMatIconNameNotFoundError","getMatIconNoHttpProviderError","parentRegistry","http","sanitizer","adapter","fromIso8601","parseInt","getMatInputUnsupportedTypeError","scrollThrottle","SCROLL_THROTTLE_MS","linearEase","currentTime","startValue","time","timeQuad","pow","timeCubed","startAngle","startPoint","polarToCartesian","pathRadius","arcSweep","endAngle","throwMatDuplicatedDrawerError","extendObject","sortOrder","reverse","setPrototypeOf","__proto__","p","AnimationCurves","STANDARD_CURVE","DECELERATION_CURVE","AnimationDurations","EXITING","_listeners","listener","registered","MAT_DATE_LOCALE","_localeChanges","clone","years","locale","second","DEFAULT_DATE_NAMES","range","String","short","narrow","useUtcForDisplay","setLocale","matDateLocale","NativeDateAdapter","getDay","SUPPORTS_INTL_API","dtf_1","Intl","DateTimeFormat","_stripDirectionalityCharacters","format","DEFAULT_MONTH_NAMES","dtf_3","weekday","dtf","year","_createDateWithOverflow","UTC","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","displayFormat","timeZone","months","newDate","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","iso8601String","ISO_8601_REGEX","test","setFullYear","n","slice","MAT_NATIVE_DATE_FORMATS","monthYearLabel","dateA11yLabel","day","monthYearA11yLabel","NativeDateModule","MAT_DATE_LOCALE_PROVIDER","MatNativeDateModule","events","_hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","add","inheritances","recognizer","recognizeWith","_setLineClass","count","_resetClasses","_setClass","MatLineModule","RippleState","HIDDEN","FADING_IN","RippleRef","fadeOutRipple","RippleRenderer","_ruler","_isMousedown","rippleConfig","rippleDisabled","_triggerEvents","onMousedown","bind","fadeInRipple","pageX","pageY","containerRect","scrollPosition","ripple","rippleRef","rippleEl","transitionDuration","RIPPLE_FADE_OUT_DURATION","FADING_OUT","runTimeoutOutsideZone","_activeRipples","_triggerElement","removeEventListener","addEventListener","onMouseup","VISIBLE","onMouseLeave","radius","speedFactor","_rippleRenderer","_globalOptions","setTriggerElement","baseSpeedFactor","[class.mat-ripple-unbounded]","ViewportRuler","VIEWPORT_RULER_PROVIDER","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","_labelId","_uniqueOptgroupIdCounter","_MatOptgroupMixinBase","[class.mat-optgroup-disabled]","_uniqueIdCounter"],"mappings":"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"}