{"version":3,"file":"button-toggle.es5.js","sources":["../../../src/lib/button-toggle/index.ts","../../../src/lib/button-toggle/button-toggle-module.ts","../../../src/lib/button-toggle/button-toggle.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {ToggleType,MatButtonToggleGroupBase,_MatButtonToggleGroupMixinBase,MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,MatButtonToggleChange,MatButtonToggleGroup,MatButtonToggleGroupMultiple,MatButtonToggle,MatButtonToggleModule} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle} from './button-toggle';\nimport {UNIQUE_SELECTION_DISPATCHER_PROVIDER, MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nexport class MatButtonToggleModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule, A11yModule],\n  exports: [\n    MatButtonToggleGroup,\n    MatButtonToggleGroupMultiple,\n    MatButtonToggle,\n    MatCommonModule,\n  ],\n  declarations: [MatButtonToggleGroup, MatButtonToggleGroupMultiple, MatButtonToggle],\n  providers: [UNIQUE_SELECTION_DISPATCHER_PROVIDER]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatButtonToggleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Renderer2,\n  EventEmitter,\n  Input,\n  OnInit,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  forwardRef,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/material/core';\nimport {CanDisable, mixinDisabled} from '@angular/material/core';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n/**\n * \\@docs-private\n */\nexport class MatButtonToggleGroupBase {}\nexport const /** @type {?} */ _MatButtonToggleGroupMixinBase = mixinDisabled(MatButtonToggleGroupBase);\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\nlet /** @type {?} */ _uniqueIdCounter = 0;\n/**\n * Change event object emitted by MatButtonToggle.\n */\nexport class MatButtonToggleChange {\n/**\n * The MatButtonToggle that emits the event.\n */\nsource: MatButtonToggle | null;\n/**\n * The value assigned to the MatButtonToggle.\n */\nvalue: any;\n}\n\nfunction MatButtonToggleChange_tsickle_Closure_declarations() {\n/**\n * The MatButtonToggle that emits the event.\n * @type {?}\n */\nMatButtonToggleChange.prototype.source;\n/**\n * The value assigned to the MatButtonToggle.\n * @type {?}\n */\nMatButtonToggleChange.prototype.value;\n}\n\n/**\n * Exclusive selection button toggle group that behaves like a radio-button group.\n */\nexport class MatButtonToggleGroup extends _MatButtonToggleGroupMixinBase\n    implements ControlValueAccessor, CanDisable {\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n */\nprivate _value: any = null;\n/**\n * The HTML name attribute applied to toggles in this group.\n */\nprivate _name: string = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * The currently selected button toggle, should match the value.\n */\nprivate _selected: MatButtonToggle | null = null;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n */\n_controlValueAccessorChangeFn: (value: any) => void = () => {};\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n */\nonTouched: () => any = () => {};\n/**\n * Child button toggle buttons.\n */\n_buttonToggles: QueryList<MatButtonToggle>;\n/**\n * `name` attribute for the underlying `input` element.\n * @return {?}\n */\nget name(): string {\n    return this._name;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset name(value: string) {\n    this._name = value;\n    this._updateButtonToggleNames();\n  }\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n/**\n * Value of the toggle group.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} newValue\n * @return {?}\n */\nset value(newValue: any) {\n    if (this._value != newValue) {\n      this._value = newValue;\n\n      this._updateSelectedButtonToggleFromValue();\n    }\n  }\n/**\n * Whether the toggle group is selected.\n * @return {?}\n */\nget selected() {\n    return this._selected;\n  }\n/**\n * @param {?} selected\n * @return {?}\n */\nset selected(selected: MatButtonToggle | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n\n    if (selected && !selected.checked) {\n      selected.checked = true;\n    }\n  }\n/**\n * Event emitted when the group's value changes.\n */\nchange: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n/**\n * @param {?} _changeDetector\n */\nconstructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n/**\n * @return {?}\n */\nprivate _updateButtonToggleNames(): void {\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach((toggle) => {\n        toggle.name = this._name;\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateSelectedButtonToggleFromValue(): void {\n    let /** @type {?} */ isAlreadySelected = this._selected != null && this._selected.value == this._value;\n\n    if (this._buttonToggles != null && !isAlreadySelected) {\n      let /** @type {?} */ matchingButtonToggle = this._buttonToggles.filter(\n          buttonToggle => buttonToggle.value == this._value)[0];\n\n      if (matchingButtonToggle) {\n        this.selected = matchingButtonToggle;\n      } else if (this.value == null) {\n        this.selected = null;\n        this._buttonToggles.forEach(buttonToggle => {\n          buttonToggle.checked = false;\n        });\n      }\n    }\n  }\n/**\n * Dispatch change event with current selection and group value.\n * @return {?}\n */\n_emitChangeEvent(): void {\n    let /** @type {?} */ event = new MatButtonToggleChange();\n    event.source = this._selected;\n    event.value = this._value;\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n/**\n * Sets the model value. Implemented as part of ControlValueAccessor.\n * @param {?} value Value to be set to the model.\n * @return {?}\n */\nwriteValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n/**\n * Registers a callback that will be triggered when the value has changed.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On change callback function.\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n/**\n * Registers a callback that will be triggered when the control has been touched.\n * Implemented as part of ControlValueAccessor.\n * @param {?} fn On touch callback function.\n * @return {?}\n */\nregisterOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n/**\n * Toggles the disabled state of the component. Implemented as part of ControlValueAccessor.\n * @param {?} isDisabled Whether the component should be disabled.\n * @return {?}\n */\nsetDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-button-toggle-group:not([multiple])',\n  providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n  inputs: ['disabled'],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical'\n  },\n  exportAs: 'matButtonToggleGroup',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_buttonToggles': [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), ] },],\n'name': [{ type: Input },],\n'vertical': [{ type: Input },],\n'value': [{ type: Input },],\n'selected': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MatButtonToggleGroup_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggleGroup.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggleGroup.ctorParameters;\n/** @type {?} */\nMatButtonToggleGroup.propDecorators;\n/**\n * The value for the button toggle group. Should match currently selected button toggle.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._value;\n/**\n * The HTML name attribute applied to toggles in this group.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._name;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._vertical;\n/**\n * The currently selected button toggle, should match the value.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._selected;\n/**\n * The method to be called in order to update ngModel.\n * Now `ngModel` binding is not supported in multiple selection mode.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._controlValueAccessorChangeFn;\n/**\n * onTouch function registered via registerOnTouch (ControlValueAccessor).\n * @type {?}\n */\nMatButtonToggleGroup.prototype.onTouched;\n/**\n * Child button toggle buttons.\n * @type {?}\n */\nMatButtonToggleGroup.prototype._buttonToggles;\n/**\n * Event emitted when the group's value changes.\n * @type {?}\n */\nMatButtonToggleGroup.prototype.change;\n/** @type {?} */\nMatButtonToggleGroup.prototype._changeDetector;\n}\n\n/**\n * Multiple selection button-toggle group. `ngModel` is not supported in this mode.\n */\nexport class MatButtonToggleGroupMultiple extends _MatButtonToggleGroupMixinBase\n    implements CanDisable {\n/**\n * Whether the button toggle group should be vertical.\n */\nprivate _vertical: boolean = false;\n/**\n * Whether the toggle group is vertical.\n * @return {?}\n */\nget vertical(): boolean {\n    return this._vertical;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'mat-button-toggle-group[multiple]',\n  exportAs: 'matButtonToggleGroup',\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-button-toggle-group',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    'role': 'group'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'vertical': [{ type: Input },],\n};\n}\n\nfunction MatButtonToggleGroupMultiple_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggleGroupMultiple.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggleGroupMultiple.ctorParameters;\n/** @type {?} */\nMatButtonToggleGroupMultiple.propDecorators;\n/**\n * Whether the button toggle group should be vertical.\n * @type {?}\n */\nMatButtonToggleGroupMultiple.prototype._vertical;\n}\n\n/**\n * Single button inside of a toggle group.\n */\nexport class MatButtonToggle implements OnInit, OnDestroy {\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n */\nariaLabel: string = '';\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n */\nariaLabelledby: string | null = null;\n/**\n * Whether or not this button toggle is checked.\n */\nprivate _checked: boolean = false;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n */\n_type: ToggleType;\n/**\n * Whether or not this button toggle is disabled.\n */\nprivate _disabled: boolean = false;\n/**\n * Value assigned to this button toggle.\n */\nprivate _value: any = null;\n/**\n * Whether or not the button toggle is a single selection.\n */\nprivate _isSingleSelector: boolean = false;\n/**\n * Unregister function for _buttonToggleDispatcher *\n */\nprivate _removeUniqueSelectionListener: () => void = () => {};\n\n   _inputElement: ElementRef;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n */\nbuttonToggleGroup: MatButtonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n */\nbuttonToggleGroupMultiple: MatButtonToggleGroupMultiple;\n/**\n * Unique ID for the underlying `input` element.\n * @return {?}\n */\nget inputId(): string {\n    return `${this.id}-input`;\n  }\n/**\n * The unique ID for this button toggle.\n */\nid: string;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n */\nname: string;\n/**\n * Whether the button is checked.\n * @return {?}\n */\nget checked(): boolean { return this._checked; }\n/**\n * @param {?} newCheckedState\n * @return {?}\n */\nset checked(newCheckedState: boolean) {\n    if (this._isSingleSelector && newCheckedState) {\n      // Notify all button toggles with the same name (in the same group) to un-check.\n      this._buttonToggleDispatcher.notify(this.id, this.name);\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._checked = newCheckedState;\n\n    if (newCheckedState && this._isSingleSelector && this.buttonToggleGroup.value != this.value) {\n      this.buttonToggleGroup.selected = this;\n    }\n  }\n/**\n * MatButtonToggleGroup reads this to assign its own value.\n * @return {?}\n */\nget value(): any {\n    return this._value;\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset value(value: any) {\n    if (this._value != value) {\n      if (this.buttonToggleGroup != null && this.checked) {\n        this.buttonToggleGroup.value = value;\n      }\n      this._value = value;\n    }\n  }\n/**\n * Whether the button is disabled.\n * @return {?}\n */\nget disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup != null && this.buttonToggleGroup.disabled) ||\n        (this.buttonToggleGroupMultiple != null && this.buttonToggleGroupMultiple.disabled);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nset disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n/**\n * Event emitted when the group value changes.\n */\nchange: EventEmitter<MatButtonToggleChange> = new EventEmitter<MatButtonToggleChange>();\n/**\n * @param {?} toggleGroup\n * @param {?} toggleGroupMultiple\n * @param {?} _changeDetectorRef\n * @param {?} _buttonToggleDispatcher\n * @param {?} _renderer\n * @param {?} _elementRef\n * @param {?} _focusMonitor\n */\nconstructor( toggleGroup: MatButtonToggleGroup,\n               toggleGroupMultiple: MatButtonToggleGroupMultiple,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _buttonToggleDispatcher: UniqueSelectionDispatcher,\nprivate _renderer: Renderer2,\nprivate _elementRef: ElementRef,\nprivate _focusMonitor: FocusMonitor) {\n\n    this.buttonToggleGroup = toggleGroup;\n    this.buttonToggleGroupMultiple = toggleGroupMultiple;\n\n    if (this.buttonToggleGroup) {\n      this._removeUniqueSelectionListener =\n        _buttonToggleDispatcher.listen((id: string, name: string) => {\n          if (id != this.id && name == this.name) {\n            this.checked = false;\n            this._changeDetectorRef.markForCheck();\n          }\n        });\n\n      this._type = 'radio';\n      this.name = this.buttonToggleGroup.name;\n      this._isSingleSelector = true;\n    } else {\n      // Even if there is no group at all, treat the button toggle as a checkbox so it can be\n      // toggled on or off.\n      this._type = 'checkbox';\n      this._isSingleSelector = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this.id == null) {\n      this.id = `mat-button-toggle-${_uniqueIdCounter++}`;\n    }\n\n    if (this.buttonToggleGroup && this._value == this.buttonToggleGroup.value) {\n      this._checked = true;\n    }\n    this._focusMonitor.monitor(this._elementRef.nativeElement, this._renderer, true);\n  }\n/**\n * Focuses the button.\n * @return {?}\n */\nfocus() {\n    this._inputElement.nativeElement.focus();\n  }\n/**\n * Toggle the state of the current button toggle.\n * @return {?}\n */\nprivate _toggle(): void {\n    this.checked = !this.checked;\n  }\n/**\n * Checks the button toggle due to an interaction with the underlying native input.\n * @param {?} event\n * @return {?}\n */\n_onInputChange(event: Event) {\n    event.stopPropagation();\n\n    if (this._isSingleSelector) {\n      // Propagate the change one-way via the group, which will in turn mark this\n      // button toggle as checked.\n      let /** @type {?} */ groupValueChanged = this.buttonToggleGroup.selected != this;\n      this.checked = true;\n      this.buttonToggleGroup.selected = this;\n      this.buttonToggleGroup.onTouched();\n      if (groupValueChanged) {\n        this.buttonToggleGroup._emitChangeEvent();\n      }\n    } else {\n      this._toggle();\n    }\n\n    // Emit a change event when the native input does.\n    this._emitChangeEvent();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\n_onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n/**\n * Dispatch change event with current value.\n * @return {?}\n */\nprivate _emitChangeEvent(): void {\n    let /** @type {?} */ event = new MatButtonToggleChange();\n    event.source = this;\n    event.value = this._value;\n    this.change.emit(event);\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    this._removeUniqueSelectionListener();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup && !buttonToggleGroupMultiple',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    'class': 'mat-button-toggle',\n    '[attr.id]': 'id',\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatButtonToggleGroup, decorators: [{ type: Optional }, ]},\n{type: MatButtonToggleGroupMultiple, decorators: [{ type: Optional }, ]},\n{type: ChangeDetectorRef, },\n{type: UniqueSelectionDispatcher, },\n{type: Renderer2, },\n{type: ElementRef, },\n{type: FocusMonitor, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'ariaLabelledby': [{ type: Input, args: ['aria-labelledby', ] },],\n'_inputElement': [{ type: ViewChild, args: ['input', ] },],\n'id': [{ type: Input },],\n'name': [{ type: Input },],\n'checked': [{ type: Input },],\n'value': [{ type: Input },],\n'disabled': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction MatButtonToggle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatButtonToggle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatButtonToggle.ctorParameters;\n/** @type {?} */\nMatButtonToggle.propDecorators;\n/**\n * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n * take precedence so this may be omitted.\n * @type {?}\n */\nMatButtonToggle.prototype.ariaLabel;\n/**\n * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n * @type {?}\n */\nMatButtonToggle.prototype.ariaLabelledby;\n/**\n * Whether or not this button toggle is checked.\n * @type {?}\n */\nMatButtonToggle.prototype._checked;\n/**\n * Type of the button toggle. Either 'radio' or 'checkbox'.\n * @type {?}\n */\nMatButtonToggle.prototype._type;\n/**\n * Whether or not this button toggle is disabled.\n * @type {?}\n */\nMatButtonToggle.prototype._disabled;\n/**\n * Value assigned to this button toggle.\n * @type {?}\n */\nMatButtonToggle.prototype._value;\n/**\n * Whether or not the button toggle is a single selection.\n * @type {?}\n */\nMatButtonToggle.prototype._isSingleSelector;\n/**\n * Unregister function for _buttonToggleDispatcher *\n * @type {?}\n */\nMatButtonToggle.prototype._removeUniqueSelectionListener;\n/** @type {?} */\nMatButtonToggle.prototype._inputElement;\n/**\n * The parent button toggle group (exclusive selection). Optional.\n * @type {?}\n */\nMatButtonToggle.prototype.buttonToggleGroup;\n/**\n * The parent button toggle group (multiple selection). Optional.\n * @type {?}\n */\nMatButtonToggle.prototype.buttonToggleGroupMultiple;\n/**\n * The unique ID for this button toggle.\n * @type {?}\n */\nMatButtonToggle.prototype.id;\n/**\n * HTML's 'name' attribute used to group radios for unique selection.\n * @type {?}\n */\nMatButtonToggle.prototype.name;\n/**\n * Event emitted when the group value changes.\n * @type {?}\n */\nMatButtonToggle.prototype.change;\n/** @type {?} */\nMatButtonToggle.prototype._changeDetectorRef;\n/** @type {?} */\nMatButtonToggle.prototype._buttonToggleDispatcher;\n/** @type {?} */\nMatButtonToggle.prototype._renderer;\n/** @type {?} */\nMatButtonToggle.prototype._elementRef;\n/** @type {?} */\nMatButtonToggle.prototype._focusMonitor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}