{"version":3,"file":"sort.es5.js","sources":["../../../src/lib/sort/index.ts","../../../src/lib/sort/sort-module.ts","../../../src/lib/sort/sort-header.ts","../../../src/lib/sort/sort-header-intl.ts","../../../src/lib/sort/sort.ts","../../../src/lib/sort/sort-errors.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatSortModule,SortDirection,MatSortHeader,MatSortHeaderIntl,MatSortable,Sort,MatSort} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\nexport class MatSortModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MatSortHeaderIntl]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSortModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSortModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSortModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  Optional,\n  ViewEncapsulation\n} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\nimport {CdkColumnDef} from '@angular/cdk/table';\nimport {Subscription} from 'rxjs/Subscription';\nimport {merge} from 'rxjs/observable/merge';\nimport {MatSort, MatSortable} from './sort';\nimport {MatSortHeaderIntl} from './sort-header-intl';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst /** @type {?} */ SORT_ANIMATION_TRANSITION =\n    AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n * \n * Must be provided with an id and contained within a parent MatSort directive.\n * \n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nexport class MatSortHeader implements MatSortable {\nprivate _rerenderSubscription: Subscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n */\nid: string;\n/**\n * Sets the position of the arrow that displays when sorted.\n */\narrowPosition: 'before' | 'after' = 'after';\n/**\n * Overrides the sort start value of the containing MatSort for this MatSortable.\n */\nstart: 'asc' | 'desc';\n/**\n * Overrides the disable clear value of the containing MatSort for this MatSortable.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * @return {?}\n */\nget _id() { return this.id; }\n/**\n * @param {?} v\n * @return {?}\n */\nset _id(v: string) { this.id = v; }\n/**\n * @param {?} _intl\n * @param {?} changeDetectorRef\n * @param {?} _sort\n * @param {?} _cdkColumnDef\n */\nconstructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\npublic _sort: MatSort,\npublic _cdkColumnDef: CdkColumnDef) {\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _intl.changes).subscribe(() => {\n      changeDetectorRef.markForCheck();\n    });\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.id && this._cdkColumnDef) {\n      this.id = this._cdkColumnDef.name;\n    }\n\n    this._sort.register(this);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n/**\n * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n * @return {?}\n */\n_isSorted() {\n    return this._sort.active == this.id && this._sort.direction;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_sort.sort(this)',\n    '[class.mat-sort-header-sorted]': '_isSorted()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('indicator', [\n      state('asc', style({transform: 'translateY(0px)'})),\n      // 10px is the height of the sort indicator, minus the width of the pointers\n      state('desc', style({transform: 'translateY(10px)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('leftPointer', [\n      state('asc', style({transform: 'rotate(-45deg)'})),\n      state('desc', style({transform: 'rotate(45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    trigger('rightPointer', [\n      state('asc', style({transform: 'rotate(45deg)'})),\n      state('desc', style({transform: 'rotate(-45deg)'})),\n      transition('asc <=> desc', animate(SORT_ANIMATION_TRANSITION))\n    ])\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatSortHeaderIntl, },\n{type: ChangeDetectorRef, },\n{type: MatSort, decorators: [{ type: Optional }, ]},\n{type: CdkColumnDef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input, args: ['mat-sort-header', ] },],\n'arrowPosition': [{ type: Input },],\n'start': [{ type: Input, args: ['start', ] },],\n'disableClear': [{ type: Input },],\n'_id': [{ type: Input, args: ['mat-sort-header', ] },],\n};\n}\n\nfunction MatSortHeader_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSortHeader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSortHeader.ctorParameters;\n/** @type {?} */\nMatSortHeader.propDecorators;\n/** @type {?} */\nMatSortHeader.prototype._rerenderSubscription;\n/**\n * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n * the column's name.\n * @type {?}\n */\nMatSortHeader.prototype.id;\n/**\n * Sets the position of the arrow that displays when sorted.\n * @type {?}\n */\nMatSortHeader.prototype.arrowPosition;\n/**\n * Overrides the sort start value of the containing MatSort for this MatSortable.\n * @type {?}\n */\nMatSortHeader.prototype.start;\n/** @type {?} */\nMatSortHeader.prototype._disableClear;\n/** @type {?} */\nMatSortHeader.prototype._intl;\n/** @type {?} */\nMatSortHeader.prototype._sort;\n/** @type {?} */\nMatSortHeader.prototype._cdkColumnDef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs/Subject';\nimport {SortDirection} from './sort-direction';\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nexport class MatSortHeaderIntl {\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n */\nchanges: Subject<void> = new Subject<void>();\n/**\n * ARIA label for the sorting button.\n */\nsortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n/**\n * A label to describe the current sort (visible only to screenreaders).\n */\nsortDescriptionLabel = (id: string, direction: SortDirection) => {\n    return `Sorted by ${id} ${direction == 'asc' ? 'ascending' : 'descending'}`;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatSortHeaderIntl_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSortHeaderIntl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSortHeaderIntl.ctorParameters;\n/**\n * Stream that emits whenever the labels here are changed. Use this to notify\n * components if the labels have changed after initialization.\n * @type {?}\n */\nMatSortHeaderIntl.prototype.changes;\n/**\n * ARIA label for the sorting button.\n * @type {?}\n */\nMatSortHeaderIntl.prototype.sortButtonLabel;\n/**\n * A label to describe the current sort (visible only to screenreaders).\n * @type {?}\n */\nMatSortHeaderIntl.prototype.sortDescriptionLabel;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EventEmitter, Input, Output} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SortDirection} from './sort-direction';\nimport {getSortDuplicateSortableIdError, getSortHeaderMissingIdError} from './sort-errors';\n\nexport interface MatSortable {\n  id: string;\n  start: 'asc' | 'desc';\n  disableClear: boolean;\n}\n\nexport interface Sort {\n  active: string;\n  direction: SortDirection;\n}\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nexport class MatSort {\n/**\n * Collection of all registered sortables that this directive manages.\n */\nsortables = new Map<string, MatSortable>();\n/**\n * The id of the most recently sorted MatSortable.\n */\nactive: string;\n/**\n * The direction to set when an MatSortable is initially sorted.\n * May be overriden by the MatSortable's sort start.\n */\nstart: 'asc' | 'desc' = 'asc';\n/**\n * The sort direction of the currently active MatSortable.\n */\ndirection: SortDirection = '';\n/**\n * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n * May be overriden by the MatSortable's disable clear input.\n * @return {?}\n */\nget disableClear() { return this._disableClear; }\n/**\n * @param {?} v\n * @return {?}\n */\nset disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\nprivate _disableClear: boolean;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n */\nreadonly sortChange = new EventEmitter<Sort>();\n/**\n * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n * collection of MatSortables.\n * @param {?} sortable\n * @return {?}\n */\nregister(sortable: MatSortable) {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n/**\n * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n * collection of contained MatSortables.\n * @param {?} sortable\n * @return {?}\n */\nderegister(sortable: MatSortable) {\n    this.sortables.delete(sortable.id);\n  }\n/**\n * Sets the active sort id and determines the new sort direction.\n * @param {?} sortable\n * @return {?}\n */\nsort(sortable: MatSortable) {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.next({active: this.active, direction: this.direction});\n  }\n/**\n * Returns the next sort direction of the active sortable, checking for potential overrides.\n * @param {?} sortable\n * @return {?}\n */\ngetNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[matSort]',\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['matSortActive', ] },],\n'start': [{ type: Input, args: ['matSortStart', ] },],\n'direction': [{ type: Input, args: ['matSortDirection', ] },],\n'disableClear': [{ type: Input, args: ['matSortDisableClear', ] },],\n'sortChange': [{ type: Output, args: ['matSortChange', ] },],\n};\n}\n\nfunction MatSort_tsickle_Closure_declarations() {\n/** @type {?} */\nMatSort.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatSort.ctorParameters;\n/** @type {?} */\nMatSort.propDecorators;\n/**\n * Collection of all registered sortables that this directive manages.\n * @type {?}\n */\nMatSort.prototype.sortables;\n/**\n * The id of the most recently sorted MatSortable.\n * @type {?}\n */\nMatSort.prototype.active;\n/**\n * The direction to set when an MatSortable is initially sorted.\n * May be overriden by the MatSortable's sort start.\n * @type {?}\n */\nMatSort.prototype.start;\n/**\n * The sort direction of the currently active MatSortable.\n * @type {?}\n */\nMatSort.prototype.direction;\n/** @type {?} */\nMatSort.prototype._disableClear;\n/**\n * Event emitted when the user changes either the active sort or sort direction.\n * @type {?}\n */\nMatSort.prototype.sortChange;\n}\n\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let /** @type {?} */ sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n"],"names":[],"mappings":"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"}