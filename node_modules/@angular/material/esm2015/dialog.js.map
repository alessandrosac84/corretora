{"version":3,"file":"dialog.js","sources":["../../../src/lib/dialog/index.ts","../../../src/lib/dialog/dialog-module.ts","../../../src/lib/dialog/dialog-content-directives.ts","../../../src/lib/dialog/dialog.ts","../../../src/lib/dialog/dialog-ref.ts","../../../src/lib/dialog/dialog-container.ts","../../../src/lib/dialog/dialog-config.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatDialogModule,MAT_DIALOG_DATA,MAT_DIALOG_SCROLL_STRATEGY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,MatDialog,throwMatDialogContentAlreadyAttachedError,MatDialogContainer,MatDialogClose,MatDialogTitle,MatDialogContent,MatDialogActions,DialogRole,DialogPosition,MatDialogConfig,MatDialogRef} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDialog, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n  MatDialogActions\n} from './dialog-content-directives';\nexport class MatDialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    A11yModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, Input, OnChanges, OnInit, Optional, SimpleChanges} from '@angular/core';\nimport {MatDialogRef} from './dialog-ref';\nimport {MatDialogContainer} from './dialog-container';\n/**\n * Counter used to generate unique IDs for dialog elements.\n */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nexport class MatDialogClose implements OnChanges {\n/**\n * Screenreader label for the button.\n */\nariaLabel: string = 'Close dialog';\n/**\n * Dialog close input.\n */\ndialogResult: any;\n\n   _matDialogClose: any;\n/**\n * @param {?} dialogRef\n */\nconstructor(public dialogRef: MatDialogRef<any>) { }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialogRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ariaLabel': [{ type: Input, args: ['aria-label', ] },],\n'dialogResult': [{ type: Input, args: ['mat-dialog-close', ] },],\n'_matDialogClose': [{ type: Input, args: ['matDialogClose', ] },],\n};\n}\n\nfunction MatDialogClose_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogClose.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogClose.ctorParameters;\n/** @type {?} */\nMatDialogClose.propDecorators;\n/**\n * Screenreader label for the button.\n * @type {?}\n */\nMatDialogClose.prototype.ariaLabel;\n/**\n * Dialog close input.\n * @type {?}\n */\nMatDialogClose.prototype.dialogResult;\n/** @type {?} */\nMatDialogClose.prototype._matDialogClose;\n/** @type {?} */\nMatDialogClose.prototype.dialogRef;\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nexport class MatDialogTitle implements OnInit {\n   id = `mat-dialog-title-${dialogElementUid++}`;\n/**\n * @param {?} _container\n */\nconstructor(\nprivate _container: MatDialogContainer) { }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (this._container && !this._container._ariaLabelledBy) {\n      Promise.resolve().then(() => this._container._ariaLabelledBy = this.id);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialogContainer, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction MatDialogTitle_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogTitle.ctorParameters;\n/** @type {?} */\nMatDialogTitle.propDecorators;\n/** @type {?} */\nMatDialogTitle.prototype.id;\n/** @type {?} */\nMatDialogTitle.prototype._container;\n}\n\n/**\n * Scrollable content container of a dialog.\n */\nexport class MatDialogContent { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogContent_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogContent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogContent.ctorParameters;\n}\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nexport class MatDialogActions { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatDialogActions_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogActions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogActions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {\n  BlockScrollStrategy,\n  Overlay,\n  OverlayRef,\n  OverlayConfig,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {startWith} from '@angular/cdk/rxjs';\nimport {Location} from '@angular/common';\nimport {\n  ComponentRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {extendObject} from '@angular/material/core';\nimport {Observable} from 'rxjs/Observable';\nimport {defer} from 'rxjs/observable/defer';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\nexport const /** @type {?} */ MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n/**\n * Injection token that determines the scroll handling while the dialog is open.\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => BlockScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n/**\n * \\@docs-private\n */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nexport class MatDialog {\nprivate _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\nprivate _afterAllClosedAtThisLevel = new Subject<void>();\nprivate _afterOpenAtThisLevel = new Subject<MatDialogRef<any>>();\nprivate _boundKeydown = this._handleKeydown.bind(this);\n/**\n * Keeps track of the currently-open dialogs.\n * @return {?}\n */\nget openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n/**\n * Stream that emits when a dialog has been opened.\n * @return {?}\n */\nget afterOpen(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpen : this._afterOpenAtThisLevel;\n  }\n/**\n * @return {?}\n */\nget _afterAllClosed() {\n    const /** @type {?} */ parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n */\nafterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      startWith.call(this._afterAllClosed, undefined));\n/**\n * @param {?} _overlay\n * @param {?} _injector\n * @param {?} location\n * @param {?} _scrollStrategy\n * @param {?} _parentDialog\n */\nconstructor(\nprivate _overlay: Overlay,\nprivate _injector: Injector,\n       location: Location,\nprivate _scrollStrategy,\nprivate _parentDialog: MatDialog) {\n\n    // Close all of the dialogs when the user goes forwards/backwards in history or when the\n    // location hash changes. Note that this usually doesn't include clicking on links (unless\n    // the user is using the `HashLocationStrategy`).\n    if (!_parentDialog && location) {\n      location.subscribe(() => this.closeAll());\n    }\n  }\n/**\n * Opens a modal dialog containing the given component.\n * @template T\n * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\n *     or a TemplateRef to instantiate as the dialog content.\n * @param {?=} config Extra configuration options.\n * @return {?} Reference to the newly-opened dialog.\n */\nopen<T>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig): MatDialogRef<T> {\n\n    const /** @type {?} */ inProgressDialog = this.openDialogs.find(dialog => dialog._isAnimating());\n\n    // If there's a dialog that is in the process of being opened, return it instead.\n    if (inProgressDialog) {\n      return inProgressDialog;\n    }\n\n    config = _applyConfigDefaults(config);\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const /** @type {?} */ overlayRef = this._createOverlay(config);\n    const /** @type {?} */ dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const /** @type {?} */ dialogRef =\n        this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n\n    if (!this.openDialogs.length) {\n      document.addEventListener('keydown', this._boundKeydown);\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpen.next(dialogRef);\n\n    return dialogRef;\n  }\n/**\n * Closes all of the currently-open dialogs.\n * @return {?}\n */\ncloseAll(): void {\n    let /** @type {?} */ i = this.openDialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      this.openDialogs[i].close();\n    }\n  }\n/**\n * Finds an open dialog by its id.\n * @param {?} id ID to use when looking up the dialog.\n * @return {?}\n */\ngetDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n/**\n * Creates the overlay into which the dialog will be loaded.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the OverlayRef for the created overlay.\n */\nprivate _createOverlay(config: MatDialogConfig): OverlayRef {\n    const /** @type {?} */ overlayState = this._getOverlayState(config);\n    return this._overlay.create(overlayState);\n  }\n/**\n * Creates an overlay state from a dialog config.\n * @param {?} dialogConfig The dialog configuration.\n * @return {?} The overlay configuration.\n */\nprivate _getOverlayState(dialogConfig: MatDialogConfig): OverlayConfig {\n    const /** @type {?} */ state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n/**\n * Attaches an MatDialogContainer to a dialog's already-created overlay.\n * @param {?} overlay Reference to the dialog's underlying overlay.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to a ComponentRef for the attached container.\n */\nprivate _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    let /** @type {?} */ containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef);\n    let /** @type {?} */ containerRef: ComponentRef<MatDialogContainer> = overlay.attach(containerPortal);\n    containerRef.instance._config = config;\n\n    return containerRef.instance;\n  }\n/**\n * Attaches the user-provided component to the already-created MatDialogContainer.\n * @template T\n * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\n *     or a TemplateRef to instantiate as the content.\n * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\n * @param {?} overlayRef Reference to the overlay in which the dialog resides.\n * @param {?} config The dialog configuration.\n * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\n */\nprivate _attachDialogContent<T>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const /** @type {?} */ dialogRef = new MatDialogRef<T>(overlayRef, dialogContainer, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, /** @type {?} */(( null)), /** @type {?} */((\n          <any>{ $implicit: config.data, dialogRef }))));\n    } else {\n      const /** @type {?} */ injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const /** @type {?} */ contentRef = dialogContainer.attachComponentPortal(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n/**\n * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n * of a dialog to close itself and, optionally, to return a value.\n * @template T\n * @param {?} config Config object that is used to construct the dialog.\n * @param {?} dialogRef Reference to the dialog.\n * @param {?} dialogContainer\n * @return {?} The custom injector that can be used inside the dialog.\n */\nprivate _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const /** @type {?} */ injectionTokens = new WeakMap();\n\n    injectionTokens.set(MatDialogRef, dialogRef);\n    injectionTokens.set(MatDialogContainer, dialogContainer);\n    injectionTokens.set(MAT_DIALOG_DATA, config.data);\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n/**\n * Removes a dialog from the array of open dialogs.\n * @param {?} dialogRef Dialog to be removed.\n * @return {?}\n */\nprivate _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const /** @type {?} */ index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // no open dialogs are left, call next on afterAllClosed Subject\n      if (!this.openDialogs.length) {\n        this._afterAllClosed.next();\n        document.removeEventListener('keydown', this._boundKeydown);\n      }\n    }\n  }\n/**\n * Handles global key presses while there are open dialogs. Closes the\n * top dialog when the user presses escape.\n * @param {?} event\n * @return {?}\n */\nprivate _handleKeydown(event: KeyboardEvent): void {\n    const /** @type {?} */ topDialog = this.openDialogs[this.openDialogs.length - 1];\n    const /** @type {?} */ canClose = topDialog ? !topDialog.disableClose : false;\n\n    if (event.keyCode === ESCAPE && canClose) {\n      topDialog.close();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Overlay, },\n{type: Injector, },\n{type: Location, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY, ] }, ]},\n{type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction MatDialog_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialog.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialog.ctorParameters;\n/** @type {?} */\nMatDialog.prototype._openDialogsAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._afterAllClosedAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._afterOpenAtThisLevel;\n/** @type {?} */\nMatDialog.prototype._boundKeydown;\n/**\n * Stream that emits when all open dialog have finished closing.\n * Will emit on subscribe if there are no open dialogs to begin with.\n * @type {?}\n */\nMatDialog.prototype.afterAllClosed;\n/** @type {?} */\nMatDialog.prototype._overlay;\n/** @type {?} */\nMatDialog.prototype._injector;\n/** @type {?} */\nMatDialog.prototype._scrollStrategy;\n/** @type {?} */\nMatDialog.prototype._parentDialog;\n}\n\n/**\n * Applies default options to the dialog config.\n * @param {?=} config Config to be modified.\n * @return {?} The new configuration object.\n */\nfunction _applyConfigDefaults(config?: MatDialogConfig): MatDialogConfig {\n  return extendObject(new MatDialogConfig(), config);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {OverlayRef, GlobalPositionStrategy} from '@angular/cdk/overlay';\nimport {filter, first, RxChain} from '@angular/cdk/rxjs';\nimport {DialogPosition} from './dialog-config';\nimport {Observable} from 'rxjs/Observable';\nimport {Subject} from 'rxjs/Subject';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet /** @type {?} */ uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T> {\n/**\n * The instance of component opened into the dialog.\n */\ncomponentInstance: T;\n/**\n * Whether the user is allowed to close the dialog.\n */\ndisableClose = this._containerInstance._config.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n */\nprivate _afterOpen = new Subject<void>();\n/**\n * Subject for notifying the user that the dialog has finished closing.\n */\nprivate _afterClosed = new Subject<any>();\n/**\n * Subject for notifying the user that the dialog has started closing.\n */\nprivate _beforeClose = new Subject<any>();\n/**\n * Result to be passed to afterClosed.\n */\nprivate _result: any;\n/**\n * @param {?} _overlayRef\n * @param {?} _containerInstance\n * @param {?=} id\n */\nconstructor(\nprivate _overlayRef: OverlayRef,\nprivate _containerInstance: MatDialogContainer,\npublic readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Emit when opening animation completes\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'enter')\n      .call(first)\n      .subscribe(() => {\n        this._afterOpen.next();\n        this._afterOpen.complete();\n      });\n\n    // Dispose overlay when closing animation is complete\n    RxChain.from(_containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'done' && event.toState === 'exit')\n      .call(first)\n      .subscribe(() => {\n        this._overlayRef.dispose();\n        this._afterClosed.next(this._result);\n        this._afterClosed.complete();\n        this.componentInstance = null!;\n      });\n  }\n/**\n * Close the dialog.\n * @param {?=} dialogResult Optional result to return to the dialog opener.\n * @return {?}\n */\nclose(dialogResult?: any): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    RxChain.from(this._containerInstance._animationStateChanged)\n      .call(filter, event => event.phaseName === 'start')\n      .call(first)\n      .subscribe(() => {\n        this._beforeClose.next(dialogResult);\n        this._beforeClose.complete();\n        this._overlayRef.detachBackdrop();\n      });\n\n    this._containerInstance._startExitAnimation();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished opening.\n * @return {?}\n */\nafterOpen(): Observable<void> {\n    return this._afterOpen.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog is finished closing.\n * @return {?}\n */\nafterClosed(): Observable<any> {\n    return this._afterClosed.asObservable();\n  }\n/**\n * Gets an observable that is notified when the dialog has started closing.\n * @return {?}\n */\nbeforeClose(): Observable<any> {\n    return this._beforeClose.asObservable();\n  }\n/**\n * Gets an observable that emits when the overlay's backdrop has been clicked.\n * @return {?}\n */\nbackdropClick(): Observable<void> {\n    return this._overlayRef.backdropClick();\n  }\n/**\n * Updates the dialog's position.\n * @param {?=} position New dialog position.\n * @return {?}\n */\nupdatePosition(position?: DialogPosition): this {\n    let /** @type {?} */ strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n/**\n * Updates the dialog's width and height.\n * @param {?=} width New width of the dialog.\n * @param {?=} height New height of the dialog.\n * @return {?}\n */\nupdateSize(width = 'auto', height = 'auto'): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n/**\n * Returns whether the dialog is animating.\n * @return {?}\n */\n_isAnimating(): boolean {\n    return this._containerInstance._isAnimating;\n  }\n/**\n * Fetches the position strategy object from the overlay ref.\n * @return {?}\n */\nprivate _getPositionStrategy(): GlobalPositionStrategy {\n    return /** @type {?} */(( this._overlayRef.getState().positionStrategy as GlobalPositionStrategy));\n  }\n}\n\nfunction MatDialogRef_tsickle_Closure_declarations() {\n/**\n * The instance of component opened into the dialog.\n * @type {?}\n */\nMatDialogRef.prototype.componentInstance;\n/**\n * Whether the user is allowed to close the dialog.\n * @type {?}\n */\nMatDialogRef.prototype.disableClose;\n/**\n * Subject for notifying the user that the dialog has finished opening.\n * @type {?}\n */\nMatDialogRef.prototype._afterOpen;\n/**\n * Subject for notifying the user that the dialog has finished closing.\n * @type {?}\n */\nMatDialogRef.prototype._afterClosed;\n/**\n * Subject for notifying the user that the dialog has started closing.\n * @type {?}\n */\nMatDialogRef.prototype._beforeClose;\n/**\n * Result to be passed to afterClosed.\n * @type {?}\n */\nMatDialogRef.prototype._result;\n/** @type {?} */\nMatDialogRef.prototype._overlayRef;\n/** @type {?} */\nMatDialogRef.prototype._containerInstance;\n/** @type {?} */\nMatDialogRef.prototype.id;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {animate, AnimationEvent, state, style, transition, trigger} from '@angular/animations';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {\n  BasePortalHost,\n  ComponentPortal,\n  PortalHostDirective,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalHost without an origin.\n * \\@docs-private\n * @return {?}\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * \\@docs-private\n */\nexport class MatDialogContainer extends BasePortalHost {\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n */\n_portalHost: PortalHostDirective;\n/**\n * The class that traps and manages focus within the dialog.\n */\nprivate _focusTrap: FocusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n */\nprivate _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n/**\n * The dialog configuration.\n */\n_config: MatDialogConfig;\n/**\n * State of the dialog animation.\n */\n_state: 'void' | 'enter' | 'exit' = 'enter';\n/**\n * Emits when an animation state changes.\n */\n_animationStateChanged = new EventEmitter<AnimationEvent>();\n/**\n * ID of the element that should be considered as the dialog's label.\n */\n_ariaLabelledBy: string | null = null;\n/**\n * Whether the container is currently mid-animation.\n */\n_isAnimating = false;\n/**\n * @param {?} _elementRef\n * @param {?} _focusTrapFactory\n * @param {?} _changeDetectorRef\n * @param {?} _document\n */\nconstructor(\nprivate _elementRef: ElementRef,\nprivate _focusTrapFactory: FocusTrapFactory,\nprivate _changeDetectorRef: ChangeDetectorRef,\nprivate _document: any) {\n\n    super();\n  }\n/**\n * Attach a ComponentPortal as content to this dialog container.\n * @template T\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalHost.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachComponentPortal(portal);\n  }\n/**\n * Attach a TemplatePortal as content to this dialog container.\n * @template C\n * @param {?} portal Portal to be attached as the dialog content.\n * @return {?}\n */\nattachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalHost.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalHost.attachTemplatePortal(portal);\n  }\n/**\n * Moves the focus inside the focus trap.\n * @return {?}\n */\nprivate _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If we didn't find any focusable elements inside the dialog, focus the\n      // container so the user can't tab into other elements behind it.\n      if (!hasMovedFocus) {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n/**\n * Restores focus to the element that was focused before the dialog opened.\n * @return {?}\n */\nprivate _restoreFocus() {\n    const /** @type {?} */ toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n/**\n * Saves a reference to the element that was focused before the dialog was opened.\n * @return {?}\n */\nprivate _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = /** @type {?} */(( this._document.activeElement as HTMLElement));\n    }\n  }\n/**\n * Callback, invoked whenever an animation on the host completes.\n * @param {?} event\n * @return {?}\n */\n_onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n    this._isAnimating = false;\n  }\n/**\n * Callback, invoked when an animation on the host starts.\n * @param {?} event\n * @return {?}\n */\n_onAnimationStart(event: AnimationEvent) {\n    this._isAnimating = true;\n    this._animationStateChanged.emit(event);\n  }\n/**\n * Starts the dialog exit animation.\n * @return {?}\n */\n_startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    trigger('slideDialog', [\n      // Note: The `enter` animation doesn't transition to something like `translate3d(0, 0, 0)\n      // scale(1)`, because for some reason specifying the transform explicitly, causes IE both\n      // to blur the dialog content and decimate the animation performance. Leaving it as `none`\n      // solves both issues.\n      state('enter', style({ transform: 'none', opacity: 1 })),\n      state('void', style({ transform: 'translate3d(0, 25%, 0) scale(0.9)', opacity: 0 })),\n      state('exit', style({ transform: 'translate3d(0, 25%, 0)', opacity: 0 })),\n      transition('* => *', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),\n    ])\n  ],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    '[attr.role]': '_config?.role',\n    '[attr.aria-labelledby]': '_ariaLabelledBy',\n    '[attr.aria-describedby]': '_config?.ariaDescribedBy || null',\n    '[@slideDialog]': '_state',\n    '(@slideDialog.start)': '_onAnimationStart($event)',\n    '(@slideDialog.done)': '_onAnimationDone($event)',\n  },\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: FocusTrapFactory, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_portalHost': [{ type: ViewChild, args: [PortalHostDirective, ] },],\n};\n}\n\nfunction MatDialogContainer_tsickle_Closure_declarations() {\n/** @type {?} */\nMatDialogContainer.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatDialogContainer.ctorParameters;\n/** @type {?} */\nMatDialogContainer.propDecorators;\n/**\n * The portal host inside of this container into which the dialog content will be loaded.\n * @type {?}\n */\nMatDialogContainer.prototype._portalHost;\n/**\n * The class that traps and manages focus within the dialog.\n * @type {?}\n */\nMatDialogContainer.prototype._focusTrap;\n/**\n * Element that was focused before the dialog was opened. Save this to restore upon close.\n * @type {?}\n */\nMatDialogContainer.prototype._elementFocusedBeforeDialogWasOpened;\n/**\n * The dialog configuration.\n * @type {?}\n */\nMatDialogContainer.prototype._config;\n/**\n * State of the dialog animation.\n * @type {?}\n */\nMatDialogContainer.prototype._state;\n/**\n * Emits when an animation state changes.\n * @type {?}\n */\nMatDialogContainer.prototype._animationStateChanged;\n/**\n * ID of the element that should be considered as the dialog's label.\n * @type {?}\n */\nMatDialogContainer.prototype._ariaLabelledBy;\n/**\n * Whether the container is currently mid-animation.\n * @type {?}\n */\nMatDialogContainer.prototype._isAnimating;\n/** @type {?} */\nMatDialogContainer.prototype._elementRef;\n/** @type {?} */\nMatDialogContainer.prototype._focusTrapFactory;\n/** @type {?} */\nMatDialogContainer.prototype._changeDetectorRef;\n/** @type {?} */\nMatDialogContainer.prototype._document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  top?: string;\n  bottom?: string;\n  left?: string;\n  right?: string;\n}\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n */\nviewContainerRef?: ViewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n */\nid?: string;\n/**\n * The ARIA role of the dialog element.\n */\nrole?: DialogRole = 'dialog';\n/**\n * Custom class for the overlay pane.\n */\npanelClass?: string | string[] = '';\n/**\n * Whether the dialog has a backdrop.\n */\nhasBackdrop?: boolean = true;\n/**\n * Custom class for the backdrop,\n */\nbackdropClass?: string = '';\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n */\ndisableClose?: boolean = false;\n/**\n * Width of the dialog.\n */\nwidth?: string = '';\n/**\n * Height of the dialog.\n */\nheight?: string = '';\n/**\n * Position overrides.\n */\nposition?: DialogPosition;\n/**\n * Data being injected into the child component.\n */\ndata?: any = null;\n/**\n * Layout direction for the dialog's content.\n */\ndirection?: Direction = 'ltr';\n/**\n * ID of the element that describes the dialog.\n */\nariaDescribedBy?: string | null = null;\n\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n\nfunction MatDialogConfig_tsickle_Closure_declarations() {\n/**\n * Where the attached component should live in Angular's *logical* component tree.\n * This affects what is available for injection and the change detection order for the\n * component instantiated inside of the dialog. This does not affect where the dialog\n * content will be rendered.\n * @type {?}\n */\nMatDialogConfig.prototype.viewContainerRef;\n/**\n * ID for the dialog. If omitted, a unique one will be generated.\n * @type {?}\n */\nMatDialogConfig.prototype.id;\n/**\n * The ARIA role of the dialog element.\n * @type {?}\n */\nMatDialogConfig.prototype.role;\n/**\n * Custom class for the overlay pane.\n * @type {?}\n */\nMatDialogConfig.prototype.panelClass;\n/**\n * Whether the dialog has a backdrop.\n * @type {?}\n */\nMatDialogConfig.prototype.hasBackdrop;\n/**\n * Custom class for the backdrop,\n * @type {?}\n */\nMatDialogConfig.prototype.backdropClass;\n/**\n * Whether the user can use escape or clicking outside to close a modal.\n * @type {?}\n */\nMatDialogConfig.prototype.disableClose;\n/**\n * Width of the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.width;\n/**\n * Height of the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.height;\n/**\n * Position overrides.\n * @type {?}\n */\nMatDialogConfig.prototype.position;\n/**\n * Data being injected into the child component.\n * @type {?}\n */\nMatDialogConfig.prototype.data;\n/**\n * Layout direction for the dialog's content.\n * @type {?}\n */\nMatDialogConfig.prototype.direction;\n/**\n * ID of the element that describes the dialog.\n * @type {?}\n */\nMatDialogConfig.prototype.ariaDescribedBy;\n}\n\n"],"names":["state"],"mappings":"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"}