{"version":3,"file":"icon.js","sources":["../../../src/lib/icon/index.ts","../../../src/lib/icon/icon-module.ts","../../../src/lib/icon/icon.ts","../../../src/lib/icon/icon-registry.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {MatIconModule,MatIconBase,_MatIconMixinBase,MatIcon,getMatIconNameNotFoundError,getMatIconNoHttpProviderError,getMatIconFailedToSanitizeError,MatIconRegistry,ICON_REGISTRY_PROVIDER_FACTORY,ICON_REGISTRY_PROVIDER} from './public_api';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\nimport {ICON_REGISTRY_PROVIDER} from './icon-registry';\nexport class MatIconModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n  providers: [ICON_REGISTRY_PROVIDER],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MatIconModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {first} from '@angular/cdk/rxjs';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, mixinColor} from '@angular/material/core';\nimport {MatIconRegistry} from './icon-registry';\n/**\n * \\@docs-private\n */\nexport class MatIconBase {\n/**\n * @param {?} _renderer\n * @param {?} _elementRef\n */\nconstructor(public _renderer: Renderer2,\npublic _elementRef: ElementRef) {}\n}\n\nfunction MatIconBase_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconBase.prototype._renderer;\n/** @type {?} */\nMatIconBase.prototype._elementRef;\n}\n\nexport const /** @type {?} */ _MatIconMixinBase = mixinColor(MatIconBase);\n/**\n * Component to display an icon. It can be used in the following ways:\n * \n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     <mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>\n * \n * - Use a font ligature as an icon by putting the ligature text in the content of the <mat-icon>\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     <mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>\n * \n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     <mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>\n */\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, CanColor {\n/**\n * Name of the icon in the SVG icon set.\n */\nsvgIcon: string;\n/**\n * Font set that the icon is a part of.\n */\nfontSet: string;\n/**\n * Name of an icon within a font set.\n */\nfontIcon: string;\nprivate _previousFontSetClass: string;\nprivate _previousFontIconClass: string;\n/**\n * @param {?} renderer\n * @param {?} elementRef\n * @param {?} _iconRegistry\n * @param {?} ariaHidden\n */\nconstructor(\n      renderer: Renderer2,\n      elementRef: ElementRef,\nprivate _iconRegistry: MatIconRegistry,\n       ariaHidden: string) {\n    super(renderer, elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      renderer.setAttribute(elementRef.nativeElement, 'aria-hidden', 'true');\n    }\n  }\n/**\n * Splits an svgIcon binding value into its icon set and icon name components.\n * Returns a 2-element array of [(icon set), (icon name)].\n * The separator for the two fields is ':'. If there is no separator, an empty\n * string is returned for the icon set and the entire value is returned for\n * the icon name. If the argument is falsy, returns an array of two empty strings.\n * Throws an error if the name contains two or more ':' separators.\n * Examples:\n *   'social:cake' -> ['social', 'cake']\n *   'penguin' -> ['', 'penguin']\n *   null -> ['', '']\n *   'a:b:c' -> (throws Error)\n * @param {?} iconName\n * @return {?}\n */\nprivate _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const /** @type {?} */ parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return /** @type {?} */(( <[string, string]>parts));\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        first.call(this._iconRegistry.getNamedSvgIcon(iconName, namespace)).subscribe(\n            svg => this._setSvgElement(svg),\n            (err: Error) => console.log(`Error retrieving icon: ${err.message}`));\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n/**\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n    this._renderer.appendChild(this._elementRef.nativeElement, svg);\n  }\n/**\n * @return {?}\n */\nprivate _clearSvgElement() {\n    const /** @type {?} */ layoutElement = this._elementRef.nativeElement;\n    const /** @type {?} */ childCount = layoutElement.childNodes.length;\n\n    // Remove existing child nodes and add the new SVG element. Note that we can't\n    // use innerHTML, because IE will throw if the element has a data binding.\n    for (let /** @type {?} */ i = 0; i < childCount; i++) {\n      this._renderer.removeChild(layoutElement, layoutElement.childNodes[i]);\n    }\n  }\n/**\n * @return {?}\n */\nprivate _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const /** @type {?} */ elem = this._elementRef.nativeElement;\n    const /** @type {?} */ fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        this._renderer.removeClass(elem, this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        this._renderer.addClass(elem, fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        this._renderer.removeClass(elem, this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        this._renderer.addClass(elem, this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n  },\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: MatIconRegistry, },\n{type: undefined, decorators: [{ type: Attribute, args: ['aria-hidden', ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'svgIcon': [{ type: Input },],\n'fontSet': [{ type: Input },],\n'fontIcon': [{ type: Input },],\n};\n}\n\nfunction MatIcon_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIcon.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIcon.ctorParameters;\n/** @type {?} */\nMatIcon.propDecorators;\n/**\n * Name of the icon in the SVG icon set.\n * @type {?}\n */\nMatIcon.prototype.svgIcon;\n/**\n * Font set that the icon is a part of.\n * @type {?}\n */\nMatIcon.prototype.fontSet;\n/**\n * Name of an icon within a font set.\n * @type {?}\n */\nMatIcon.prototype.fontIcon;\n/** @type {?} */\nMatIcon.prototype._previousFontSetClass;\n/** @type {?} */\nMatIcon.prototype._previousFontIconClass;\n/** @type {?} */\nMatIcon.prototype._iconRegistry;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {catchOperator, doOperator, finallyOperator, map, RxChain, share} from '@angular/cdk/rxjs';\nimport {Injectable, Optional, SecurityContext, SkipSelf} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {DomSanitizer, SafeResourceUrl} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {of as observableOf} from 'rxjs/observable/of';\nimport {_throw as observableThrow} from 'rxjs/observable/throw';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * \\@docs-private\n * @param {?} iconName\n * @return {?}\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including \\@angular/http.\n * \\@docs-private\n * @return {?}\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find Http provider for use with Angular Material icons. ' +\n               'Please include the HttpModule from @angular/http in your app imports.');\n}\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * \\@docs-private\n * @param {?} url URL that was attempted to be sanitized.\n * @return {?}\n */\nexport function getMatIconFailedToSanitizeError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * \\@docs-private\n */\nclass SvgIconConfig {\n  svgElement: SVGElement | null = null;\n/**\n * @param {?} url\n */\nconstructor(public url: SafeResourceUrl) { }\n}\n\nfunction SvgIconConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSvgIconConfig.prototype.svgElement;\n/** @type {?} */\nSvgIconConfig.prototype.url;\n}\n\n/**\n * Service to register and display icons used by the <mat-icon> component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport class MatIconRegistry {\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n */\nprivate _svgIconConfigs = new Map<string, SvgIconConfig>();\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n */\nprivate _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n/**\n * Cache for icons loaded by direct URLs.\n */\nprivate _cachedIconsByUrl = new Map<string, SVGElement>();\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n */\nprivate _inProgressUrlFetches = new Map<string, Observable<string>>();\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n */\nprivate _fontCssClassesByAlias = new Map<string, string>();\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n */\nprivate _defaultFontSetClass = 'material-icons';\n/**\n * @param {?} _http\n * @param {?} _sanitizer\n */\nconstructor(\nprivate _http: Http,\nprivate _sanitizer: DomSanitizer) {}\n/**\n * Registers an icon by URL in the default namespace.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n/**\n * Registers an icon by URL in the specified namespace.\n * @param {?} namespace Namespace in which the icon should be registered.\n * @param {?} iconName Name under which the icon should be registered.\n * @param {?} url\n * @return {?}\n */\naddSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ key = iconKey(namespace, iconName);\n    this._svgIconConfigs.set(key, new SvgIconConfig(url));\n    return this;\n  }\n/**\n * Registers an icon set by URL in the default namespace.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n/**\n * Registers an icon set by URL in the specified namespace.\n * @param {?} namespace Namespace in which to register the icon set.\n * @param {?} url\n * @return {?}\n */\naddSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    const /** @type {?} */ config = new SvgIconConfig(url);\n    const /** @type {?} */ configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n    return this;\n  }\n/**\n * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n * component with the alias as the fontSet input will cause the class name to be applied\n * to the <mat-icon> element.\n * \n * @param {?} alias Alias for the font.\n * @param {?=} className Class name override to be used instead of the alias.\n * @return {?}\n */\nregisterFontClassAlias(alias: string, className = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n/**\n * Returns the CSS class name associated with the alias by a previous call to\n * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n * @param {?} alias\n * @return {?}\n */\nclassNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n/**\n * Sets the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * \n * @param {?} className\n * @return {?}\n */\nsetDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n/**\n * Returns the CSS class name to be used for icon fonts when an <mat-icon> component does not\n * have a fontSet input value, and is not loading an icon by name or URL.\n * @return {?}\n */\ngetDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) from the given URL.\n * The response from the URL may be cached so this will not always cause an HTTP request, but\n * the produced element will always be a new copy of the originally fetched icon. (That is,\n * it will not contain any modifications made to elements previously returned).\n * \n * @param {?} safeUrl URL from which to fetch the SVG icon.\n * @return {?}\n */\ngetSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    let /** @type {?} */ cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return RxChain.from(this._loadSvgIconFromConfig(new SvgIconConfig(url)))\n      .call(doOperator, svg => this._cachedIconsByUrl.set( /** @type {?} */((url)), svg))\n      .call(map, svg => cloneSvg(svg))\n      .result();\n  }\n/**\n * Returns an Observable that produces the icon (as an <svg> DOM element) with the given name\n * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n * if not, the Observable will throw an error.\n * \n * @param {?} name Name of the icon to be retrieved.\n * @param {?=} namespace Namespace in which to look for the icon.\n * @return {?}\n */\ngetNamedSvgIcon(name: string, namespace = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const /** @type {?} */ key = iconKey(namespace, name);\n    const /** @type {?} */ config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const /** @type {?} */ iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n/**\n * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n * @param {?} config\n * @return {?}\n */\nprivate _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return RxChain.from(this._loadSvgIconFromConfig(config))\n          .call(doOperator, svg => config.svgElement = svg)\n          .call(map, svg => cloneSvg(svg))\n          .result();\n    }\n  }\n/**\n * Attempts to find an icon with the specified name in any of the SVG icon sets.\n * First searches the available cached icons for a nested element with a matching name, and\n * if found copies the element to a new <svg> element. If not found, fetches all icon sets\n * that have not been cached, and searches again after all fetches are completed.\n * The returned Observable produces the SVG element if possible, and throws\n * an error if no icon with the specified name can be found.\n * @param {?} name\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const /** @type {?} */ namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const /** @type {?} */ iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return RxChain.from(this._loadSvgIconSetFromConfig(iconSetConfig))\n          .call(catchOperator, (err: any): Observable<SVGElement | null> => {\n            let /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the combined Observable won't\n            // necessarily fail.\n            console.log(`Loading icon set URL: ${url} failed: ${err}`);\n            return observableOf(null);\n          })\n          .call(doOperator, svg => {\n            // Cache the SVG element.\n            if (svg) {\n              iconSetConfig.svgElement = svg;\n            }\n          })\n          .result();\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return map.call(forkJoin.call(Observable, iconSetFetchRequests), () => {\n      const /** @type {?} */ foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    });\n  }\n/**\n * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconName\n * @param {?} iconSetConfigs\n * @return {?}\n */\nprivate _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let /** @type {?} */ i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const /** @type {?} */ config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const /** @type {?} */ foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n/**\n * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._createSvgElementForSingleIcon(svgText));\n  }\n/**\n * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n * from it.\n * @param {?} config\n * @return {?}\n */\nprivate _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n      // TODO: Document that icons should only be loaded from trusted sources.\n    return map.call(this._fetchUrl(config.url),\n        svgText => this._svgElementFromString(svgText));\n  }\n/**\n * Creates a DOM element from the given SVG string, and adds default attributes.\n * @param {?} responseText\n * @return {?}\n */\nprivate _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const /** @type {?} */ svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n/**\n * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n * tag matches the specified name. If found, copies the nested element to a new SVG element and\n * returns it. Returns null if no matching element is found.\n * @param {?} iconSet\n * @param {?} iconName\n * @return {?}\n */\nprivate _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const /** @type {?} */ iconNode = iconSet.querySelector('#' + iconName);\n\n    if (!iconNode) {\n      return null;\n    }\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconNode.tagName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes( /** @type {?} */((iconNode.cloneNode(true) as SVGElement)));\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconNode.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconNode));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconNode.cloneNode(true));\n\n    return this._setSvgAttributes(svg);\n  }\n/**\n * Creates a DOM element from the given SVG string.\n * @param {?} str\n * @return {?}\n */\nprivate _svgElementFromString(str: string): SVGElement {\n    // TODO: Is there a better way than innerHTML? Renderer doesn't appear to have a method for\n    // creating an element from an HTML string.\n    const /** @type {?} */ div = document.createElement('DIV');\n    div.innerHTML = str;\n    const /** @type {?} */ svg = /** @type {?} */(( div.querySelector('svg') as SVGElement));\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n    return svg;\n  }\n/**\n * Converts an element into an SVG node by cloning all of its children.\n * @param {?} element\n * @return {?}\n */\nprivate _toSvgElement(element: Element): SVGElement {\n    let /** @type {?} */ svg = this._svgElementFromString('<svg></svg>');\n\n    for (let /** @type {?} */ i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === Node.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n/**\n * Sets the default attributes for an SVG element to be used as an icon.\n * @param {?} svg\n * @return {?}\n */\nprivate _setSvgAttributes(svg: SVGElement): SVGElement {\n    if (!svg.getAttribute('xmlns')) {\n      svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    }\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n/**\n * Returns an Observable which produces the string contents of the given URL. Results may be\n * cached, so future calls with the same URL may not cause another HTTP request.\n * @param {?} safeUrl\n * @return {?}\n */\nprivate _fetchUrl(safeUrl: SafeResourceUrl): Observable<string> {\n    if (!this._http) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    const /** @type {?} */ url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const /** @type {?} */ inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finally` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const /** @type {?} */ req = RxChain.from(this._http.get(url))\n      .call(map, response => response.text())\n      .call(finallyOperator, () => this._inProgressUrlFetches.delete(url))\n      .call(share)\n      .result();\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, decorators: [{ type: Optional }, ]},\n{type: DomSanitizer, },\n];\n}\n\nfunction MatIconRegistry_tsickle_Closure_declarations() {\n/** @type {?} */\nMatIconRegistry.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMatIconRegistry.ctorParameters;\n/**\n * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n * @type {?}\n */\nMatIconRegistry.prototype._svgIconConfigs;\n/**\n * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n * Multiple icon sets can be registered under the same namespace.\n * @type {?}\n */\nMatIconRegistry.prototype._iconSetConfigs;\n/**\n * Cache for icons loaded by direct URLs.\n * @type {?}\n */\nMatIconRegistry.prototype._cachedIconsByUrl;\n/**\n * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\n * @type {?}\n */\nMatIconRegistry.prototype._inProgressUrlFetches;\n/**\n * Map from font identifiers to their CSS class names. Used for icon fonts.\n * @type {?}\n */\nMatIconRegistry.prototype._fontCssClassesByAlias;\n/**\n * The CSS class to apply when an <mat-icon> component has no icon name, url, or font specified.\n * The default 'material-icons' value assumes that the material icon font has been loaded as\n * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n * @type {?}\n */\nMatIconRegistry.prototype._defaultFontSetClass;\n/** @type {?} */\nMatIconRegistry.prototype._http;\n/** @type {?} */\nMatIconRegistry.prototype._sanitizer;\n}\n\n/**\n * \\@docs-private\n * @param {?} parentRegistry\n * @param {?} http\n * @param {?} sanitizer\n * @return {?}\n */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n    parentRegistry: MatIconRegistry, http: Http, sanitizer: DomSanitizer) {\n  return parentRegistry || new MatIconRegistry(http, sanitizer);\n}\n/**\n * \\@docs-private\n */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [[new Optional(), new SkipSelf(), MatIconRegistry], [new Optional(), Http], DomSanitizer],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY\n};\n/**\n * Clones an SVGElement while preserving type information.\n * @param {?} svg\n * @return {?}\n */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return /** @type {?} */(( svg.cloneNode(true) as SVGElement));\n}\n/**\n * Returns the cache key to use for an icon namespace and name.\n * @param {?} namespace\n * @param {?} name\n * @return {?}\n */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["observableOf","observableThrow"],"mappings":";;;;;;;;;;;;;;;;;AGiBA;;;;;;;AAOA,AAAA,SAAA,2BAAA,CADC,QAAA,EACD;IACE,OADO,KAAA,CAAM,CACf,mCAAA,EADgB,QAAsC,CACtD,CAAA,CAD8D,CAAG,CAAC;CAEjE;;;;;;;AAOD,AAAA,SAAA,6BAAA,GAAA;IACE,OAAO,KAAA,CAAM,oEAAC;QACD,uEAAuE,CAAC,CAAC;CACvF;;;;;;;AAOD,AAAA,SAAA,+BAAA,CACC,GAAA,EADD;IACE,OACO,KAAA,CAAM,CADf,sEAAA,CACgB;QAAD,CAAf,+CAAA,EAAgB,GACkD,CADlE,EAAA,CACqE,CAAI,CAAC;CAAzE;;;;;AAKD,MAAA,aAAA,CAAA;;;;IAKA,WAAA,CADqB,GAAK,EAC1B;QADqB,IAArB,CAAA,GAAqB,GAAA,GAAA,CAAK;QAHxB,IAAF,CAAA,UAAY,GAEsB,IAAA,CAAK;KACG;CAEzC;AAED,AAOA;;;;;;;AAOA,AAAA,MAAA,eAAA,CAAA;;;;;IAgCA,WAAA,CAXuB,KAAO,EAAc,UAAY,EAWxD;QAXuB,IAAvB,CAAA,KAAuB,GAAA,KAAA,CAAO;QAAc,IAA5C,CAAA,UAA4C,GAAA,UAAA,CAAY;;;;QAxBrD,IAAH,CAAA,eAAG,GAAA,IAAA,GAAA,EAAA,CAAA;;;;;QAMA,IAAH,CAAA,eAAG,GAAA,IAAA,GAAA,EAAA,CAAA;;;;QAGA,IAAH,CAAA,iBAAG,GAAA,IAAA,GAAA,EAAA,CAAA;;;;QAGA,IAAH,CAAA,qBAAG,GAAA,IAAA,GAAA,EAAA,CAAA;;;;QAGA,IAAH,CAAA,sBAAG,GAAA,IAAA,GAAA,EAAA,CAAA;;;;;;QAOA,IAAH,CAAA,oBAAG,GAAA,gBAAA,CAAA;KAEkE;;;;;;;IAoBrE,UAbG,CAAA,QAAA,EAAA,GAAA,EAaH;QACI,OAbO,IAAA,CAAK,qBAAC,CAAqB,EAAC,EAAG,QAAA,EAAU,GAAA,CAAI,CAAC;KActD;;;;;;;;IAQH,qBAbG,CAAA,SAAA,EAAA,QAAA,EAAA,GAAA,EAaH;QACI,uBAbM,GAAA,GAAM,OAAA,CAAQ,SAAC,EAAU,QAAA,CAAS,CAAC;QAczC,IAAI,CAbC,eAAC,CAAe,GAAC,CAAG,GAAC,EAAI,IAAI,aAAA,CAAc,GAAC,CAAG,CAAC,CAAC;QActD,OAbO,IAAA,CAAK;KAcb;;;;;;IAMH,aAbG,CAAA,GAAA,EAaH;QACI,OAbO,IAAA,CAAK,wBAAC,CAAwB,EAAC,EAAG,GAAA,CAAI,CAAC;KAc/C;;;;;;;IAOH,wBAbG,CAAA,SAAA,EAAA,GAAA,EAaH;QACI,uBAbM,MAAA,GAAS,IAAI,aAAA,CAAc,GAAC,CAAG,CAAC;QActC,uBAbM,eAAA,GAAkB,IAAA,CAAK,eAAC,CAAe,GAAC,CAAG,SAAC,CAAS,CAAC;QAe5D,IAAI,eAbC,EAAgB;YAcnB,eAAe,CAbC,IAAC,CAAI,MAAC,CAAM,CAAC;SAc9B;aAbM;YAcL,IAAI,CAbC,eAAC,CAAe,GAAC,CAAG,SAAC,EAAU,CAAA,MAAE,CAAM,CAAC,CAAC;SAc/C;QACD,OAbO,IAAA,CAAK;KAcb;;;;;;;;;;IAUH,sBAbG,CAAA,KAAA,EAAA,SAAA,GAAA,KAAA,EAaH;QACI,IAAI,CAbC,sBAAC,CAAsB,GAAC,CAAG,KAAC,EAAM,SAAA,CAAU,CAAC;QAclD,OAbO,IAAA,CAAK;KAcb;;;;;;;IAOH,qBAdG,CAAA,KAAA,EAcH;QACI,OAdO,IAAA,CAAK,sBAAC,CAAsB,GAAC,CAAG,KAAC,CAAK,IAAI,KAAA,CAAM;KAexD;;;;;;;;IAQH,sBAdG,CAAA,SAAA,EAcH;QACI,IAAI,CAdC,oBAAC,GAAsB,SAAA,CAAU;QAetC,OAdO,IAAA,CAAK;KAeb;;;;;;IAMH,sBAdG,GAcH;QACI,OAdO,IAAA,CAAK,oBAAC,CAAoB;KAelC;;;;;;;;;;IAUH,iBAdG,CAAA,OAAA,EAcH;QACI,qBAdI,GAAA,GAAM,IAAA,CAAK,UAAC,CAAU,QAAC,CAAQ,eAAC,CAAe,YAAC,EAAa,OAAA,CAAQ,CAAC;QAgB1E,IAAI,CAdC,GAAC,EAAI;YAeR,MAdM,+BAAA,CAAgC,OAAC,CAAO,CAAC;SAehD;QAED,qBAdI,UAAA,GAAa,IAAA,CAAK,iBAAC,CAAiB,GAAC,CAAG,GAAC,CAAG,CAAC;QAgBjD,IAAI,UAdC,EAAW;YAed,OAdOA,EAAA,CAAa,QAAC,CAAQ,UAAC,CAAU,CAAC,CAAC;SAe3C;QAED,OAdO,OAAA,CAAQ,IAAC,CAAI,IAAC,CAAI,sBAAC,CAAsB,IAAI,aAAA,CAAc,GAAC,CAAG,CAAC,CAAC;aAerE,IAdC,CAAI,UAAC,EAAW,GAAA,IAAO,IAAA,CAAK,iBAAC,CAAiB,GAAC,oBAAG,GAAC,IAAK,GAAA,CAAI,CAAC;aAe9D,IAdC,CAAI,GAAC,EAAI,GAAA,IAAO,QAAA,CAAS,GAAC,CAAG,CAAC;aAe/B,MAdC,EAAM,CAAE;KAeb;;;;;;;;;;IAUH,eAdG,CAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAcH;;QAEI,uBAdM,GAAA,GAAM,OAAA,CAAQ,SAAC,EAAU,IAAA,CAAK,CAAC;QAerC,uBAdM,MAAA,GAAS,IAAA,CAAK,eAAC,CAAe,GAAC,CAAG,GAAC,CAAG,CAAC;QAgB7C,IAAI,MAdC,EAAO;YAeV,OAdO,IAAA,CAAK,iBAAC,CAAiB,MAAC,CAAM,CAAC;SAevC;;QAGD,uBAdM,cAAA,GAAiB,IAAA,CAAK,eAAC,CAAe,GAAC,CAAG,SAAC,CAAS,CAAC;QAgB3D,IAAI,cAdC,EAAe;YAelB,OAdO,IAAA,CAAK,yBAAC,CAAyB,IAAC,EAAK,cAAA,CAAe,CAAC;SAe7D;QAED,OAdOC,MAAA,CAAgB,2BAAC,CAA2B,GAAC,CAAG,CAAC,CAAC;KAe1D;;;;;;IATA,iBAAA,CAAA,MAAA,EAAH;QAgBI,IAAI,MAfC,CAAM,UAAC,EAAW;;YAiBrB,OAfOD,EAAA,CAAa,QAAC,CAAQ,MAAC,CAAM,UAAC,CAAU,CAAC,CAAC;SAgBlD;aAfM;;YAiBL,OAfO,OAAA,CAAQ,IAAC,CAAI,IAAC,CAAI,sBAAC,CAAsB,MAAC,CAAM,CAAC;iBAgBnD,IAfC,CAAI,UAAC,EAAW,GAAA,IAAO,MAAA,CAAO,UAAC,GAAY,GAAA,CAAI;iBAgBhD,IAfC,CAAI,GAAC,EAAI,GAAA,IAAO,QAAA,CAAS,GAAC,CAAG,CAAC;iBAgB/B,MAfC,EAAM,CAAE;SAgBf;KACF;;;;;;;;;;;;IALA,yBAAA,CAAA,IAAA,EAAA,cAAA,EAAH;;;QAqBI,uBAjBM,SAAA,GAAY,IAAA,CAAK,8BAAC,CAA8B,IAAC,EAAK,cAAA,CAAe,CAAC;QAmB5E,IAAI,SAjBC,EAAU;;;;YAqBb,OAjBOA,EAAA,CAAa,SAAC,CAAS,CAAC;SAkBhC;;;QAID,uBAjBM,oBAAA,GAAwD,cAAA;aAkB3D,MAjBC,CAAM,aAAC,IAAgB,CAAA,aAAE,CAAa,UAAC,CAAU;aAkBlD,GAjBC,CAAG,aAAC,IAiBZ;YACQ,OAjBO,OAAA,CAAQ,IAAC,CAAI,IAAC,CAAI,yBAAC,CAAyB,aAAC,CAAa,CAAC;iBAkB/D,IAjBC,CAAI,aAAC,EAAc,CAAA,GAAM,KAiBrC;gBACY,qBAjBI,GAAA,GAAM,IAAA,CAAK,UAAC,CAAU,QAAC,CAAQ,eAAC,CAAe,YAAC,EAAa,aAAA,CAAc,GAAC,CAAG,CAAC;;;gBAqBpF,OAAO,CAjBC,GAAC,CAAG,CAiBxB,sBAAA,EAjByB,GAAyB,CAiBlD,SAAA,EAjBqD,GAAY,CAiBjE,CAjBoE,CAAE,CAAC;gBAkB3D,OAjBOA,EAAA,CAAa,IAAC,CAAI,CAAC;aAkB3B,CAjBC;iBAkBD,IAjBC,CAAI,UAAC,EAAW,GAAA,IAiB5B;;gBAEY,IAAI,GAjBC,EAAI;oBAkBP,aAAa,CAjBC,UAAC,GAAY,GAAA,CAAI;iBAkBhC;aACF,CAjBC;iBAkBD,MAjBC,EAAM,CAAE;SAkBb,CAjBC,CAAC;;;QAqBL,OAjBO,GAAA,CAAI,IAAC,CAAI,QAAC,CAAQ,IAAC,CAAI,UAAC,EAAW,oBAAA,CAAqB,EAAE,MAiBrE;YACM,uBAjBM,SAAA,GAAY,IAAA,CAAK,8BAAC,CAA8B,IAAC,EAAK,cAAA,CAAe,CAAC;YAmB5E,IAAI,CAjBC,SAAC,EAAU;gBAkBd,MAjBM,2BAAA,CAA4B,IAAC,CAAI,CAAC;aAkBzC;YAED,OAjBO,SAAA,CAAU;SAkBlB,CAjBC,CAAC;KAkBJ;;;;;;;;;IAVA,8BAAA,CAAA,QAAA,EAAA,cAAA,EAAH;;QAsBI,KAAK,qBAnBI,CAAA,GAAI,cAAA,CAAe,MAAC,GAAQ,CAAA,EAAG,CAAA,IAAK,CAAA,EAAG,CAAA,EAAE,EAAG;YAoBnD,uBAnBM,MAAA,GAAS,cAAA,CAAe,CAAC,CAAC,CAAC;YAoBjC,IAAI,MAnBC,CAAM,UAAC,EAAW;gBAoBrB,uBAnBM,SAAA,GAAY,IAAA,CAAK,sBAAC,CAAsB,MAAC,CAAM,UAAC,EAAW,QAAA,CAAS,CAAC;gBAoB3E,IAAI,SAnBC,EAAU;oBAoBb,OAnBO,SAAA,CAAU;iBAoBlB;aACF;SACF;QACD,OAnBO,IAAA,CAAK;KAoBb;;;;;;;IAbA,sBAAA,CAAA,MAAA,EAAH;QAqBI,OApBO,GAAA,CAAI,IAAC,CAAI,IAAC,CAAI,SAAC,CAAS,MAAC,CAAM,GAAC,CAAG,EAqBtC,OAAO,IApBI,IAAA,CAAK,8BAAC,CAA8B,OAAC,CAAO,CAAC,CAAC;KAqB9D;;;;;;;IAdA,yBAAA,CAAA,MAAA,EAAH;;QAuBI,OArBO,GAAA,CAAI,IAAC,CAAI,IAAC,CAAI,SAAC,CAAS,MAAC,CAAM,GAAC,CAAG,EAsBtC,OAAO,IArBI,IAAA,CAAK,qBAAC,CAAqB,OAAC,CAAO,CAAC,CAAC;KAsBrD;;;;;;IAhBA,8BAAA,CAAA,YAAA,EAAH;QAuBI,uBAtBM,GAAA,GAAM,IAAA,CAAK,qBAAC,CAAqB,YAAC,CAAY,CAAC;QAuBrD,IAAI,CAtBC,iBAAC,CAAiB,GAAC,CAAG,CAAC;QAuB5B,OAtBO,GAAA,CAAI;KAuBZ;;;;;;;;;IAfA,sBAAA,CAAA,OAAA,EAAA,QAAA,EAAH;QAyBI,uBAxBM,QAAA,GAAW,OAAA,CAAQ,aAAC,CAAa,GAAC,GAAK,QAAA,CAAS,CAAC;QA0BvD,IAAI,CAxBC,QAAC,EAAS;YAyBb,OAxBO,IAAA,CAAK;SAyBb;;;QAID,IAAI,QAxBC,CAAQ,OAAC,CAAO,WAAC,EAAW,KAAM,KAAA,EAAO;YAyB5C,OAxBO,IAAA,CAAK,iBAAC,mBAAiB,QAAC,CAAQ,SAAC,CAAS,IAAC,CAAQ,EAAW,CAAC;SAyBvE;;;;QAKD,IAAI,QAxBC,CAAQ,QAAC,CAAQ,WAAC,EAAW,KAAM,QAAA,EAAU;YAyBhD,OAxBO,IAAA,CAAK,iBAAC,CAAiB,IAAC,CAAI,aAAC,CAAa,QAAC,CAAQ,CAAC,CAAC;SAyB7D;;;;;;QAOD,uBAxBM,GAAA,GAAM,IAAA,CAAK,qBAAC,CAAqB,aAAC,CAAa,CAAC;;QA0BtD,GAAG,CAxBC,WAAC,CAAW,QAAC,CAAQ,SAAC,CAAS,IAAC,CAAI,CAAC,CAAC;QA0B1C,OAxBO,IAAA,CAAK,iBAAC,CAAiB,GAAC,CAAG,CAAC;KAyBpC;;;;;;IAnBA,qBAAA,CAAA,GAAA,EAAH;;;QA4BI,uBAzBM,GAAA,GAAM,QAAA,CAAS,aAAC,CAAa,KAAC,CAAK,CAAC;QA0B1C,GAAG,CAzBC,SAAC,GAAW,GAAA,CAAI;QA0BpB,uBAzBM,GAAA,IAAM,GAAA,CAAI,aAAC,CAAa,KAAC,CAAS,CAAA,CAAW;QA0BnD,IAAI,CAzBC,GAAC,EAAI;YA0BR,MAzBM,KAAA,CAAM,qBAAC,CAAqB,CAAC;SA0BpC;QACD,OAzBO,GAAA,CAAI;KA0BZ;;;;;;IApBA,aAAA,CAAA,OAAA,EAAH;QA2BI,qBA1BI,GAAA,GAAM,IAAA,CAAK,qBAAC,CAAqB,aAAC,CAAa,CAAC;QA4BpD,KAAK,qBA1BI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,OAAA,CAAQ,UAAC,CAAU,MAAC,EAAO,CAAA,EAAE,EAAG;YA2BlD,IAAI,OA1BC,CAAO,UAAC,CAAU,CAAC,CAAC,CAAC,QAAC,KAAY,IAAA,CAAK,YAAC,EAAa;gBA2BxD,GAAG,CA1BC,WAAC,CAAW,OAAC,CAAO,UAAC,CAAU,CAAC,CAAC,CAAC,SAAC,CAAS,IAAC,CAAI,CAAC,CAAC;aA2BxD;SACF;QAED,OA1BO,GAAA,CAAI;KA2BZ;;;;;;IArBA,iBAAA,CAAA,GAAA,EAAH;QA4BI,IAAI,CA3BC,GAAC,CAAG,YAAC,CAAY,OAAC,CAAO,EAAE;YA4B9B,GAAG,CA3BC,YAAC,CAAY,OAAC,EAAQ,4BAAA,CAA6B,CAAC;SA4BzD;QACD,GAAG,CA3BC,YAAC,CAAY,KAAC,EAAM,EAAA,CAAG,CAAC;QA4B5B,GAAG,CA3BC,YAAC,CAAY,QAAC,EAAS,MAAA,CAAO,CAAC;QA4BnC,GAAG,CA3BC,YAAC,CAAY,OAAC,EAAQ,MAAA,CAAO,CAAC;QA4BlC,GAAG,CA3BC,YAAC,CAAY,qBAAC,EAAsB,eAAA,CAAgB,CAAC;QA4BzD,GAAG,CA3BC,YAAC,CAAY,WAAC,EAAY,OAAA,CAAQ,CAAC;QA4BvC,OA3BO,GAAA,CAAI;KA4BZ;;;;;;;IArBA,SAAA,CAAA,OAAA,EAAH;QA6BI,IAAI,CA5BC,IAAC,CAAI,KAAC,EAAM;YA6Bf,MA5BM,6BAAA,EAA8B,CAAE;SA6BvC;QAED,uBA5BM,GAAA,GAAM,IAAA,CAAK,UAAC,CAAU,QAAC,CAAQ,eAAC,CAAe,YAAC,EAAa,OAAA,CAAQ,CAAC;QA8B5E,IAAI,CA5BC,GAAC,EAAI;YA6BR,MA5BM,+BAAA,CAAgC,OAAC,CAAO,CAAC;SA6BhD;;;;QAKD,uBA5BM,eAAA,GAAkB,IAAA,CAAK,qBAAC,CAAqB,GAAC,CAAG,GAAC,CAAG,CAAC;QA8B5D,IAAI,eA5BC,EAAgB;YAqBvB,OApBW,eAAA,CAAgB;SA6BxB;;;QAID,uBA5BM,GAAA,GAAM,OAAA,CAAQ,IAAC,CAAI,IAAC,CAAI,KAAC,CAAK,GAAC,CAAG,GAAC,CAAG,CAAC;aAqB1C,IApBC,CAAI,GAAC,EAAI,QAAA,IAAY,QAAA,CAAS,IAAC,EAAI,CAAE;aA6BtC,IA5BC,CAAI,eAAC,EAAgB,MAAM,IAAA,CAAK,qBAAC,CAAqB,MAAC,CAAM,GAAC,CAAG,CAAC;aAqBvE,IApBK,CAAI,KAAC,CAAK;aA6BX,MA5BC,EAAM,CAAE;QA8BZ,IAAI,CA5BC,qBAAC,CAAqB,GAAC,CAAG,GAAC,EAAI,GAAA,CAAI,CAAC;QA6BzC,OA5BO,GAAA,CAAI;KAqBb;;AAnBK,eAAP,CAAA,UAAO,GAAoC;IA6B3C,EA5BE,IAAA,EAAM,UAAA,EAAW;CA6BlB,CA5BC;;;;AAED,eAAD,CAAA,cAAC,GAAA,MAAA;IA+BD,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAG,EAAC;IAChD,EAAC,IAAI,EAAE,YAAY,GAAG;CACrB,CAAC;AAGF,AA+CA;;;;;;;AAOA,AAAA,SAAA,8BAAA,CACI,cAA+B,EAAE,IAAU,EAAE,SAAuB,EADxE;IAEE,OA3FO,cAAA,IAAkB,IAAI,eAAA,CAAgB,IAAC,EAAK,SAAA,CAAU,CAAC;CA4F/D;;;;AAID,AApFC,MAAA,sBAAA,GAAA;;IAsFC,OAAO,EAAE,eAAe;IACxB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,eAAe,CAAC,EAAE,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,CAAC,EAAE,YAAY,CAAC;IAC/F,UAAU,EAAE,8BAA8B;CAC3C,CAAC;;;;;;AAMF,SAAA,QAAA,CAvFC,GAAA,EAuFD;IACE,QA/FO,GAAA,CAAI,SAAC,CAAS,IAAC,CAAQ,EAAW;CAgG1C;;;;;;;AAOD,SAAA,OAAA,CA3FC,SAAA,EAAA,IAAA,EA2FD;IACE,OAnGO,SAAA,GAAY,GAAA,GAAM,IAAA,CAAK;CAoG/B;;AD7jBD;;;AAGA,AAAA,MAAA,WAAA,CAAA;;;;;IAKA,WAAA,CAJqB,SAAW,EAAkB,WAAa,EAI/D;QAJqB,IAArB,CAAA,SAAqB,GAAA,SAAA,CAAW;QAAkB,IAAlD,CAAA,WAAkD,GAAA,WAAA,CAAa;KAAW;CAMzE;AAED,AAOA,AAbO,MAAM,iBAAA,GAAoB,UAAA,CAAW,WAAC,CAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCzD,AAAA,MAAA,OAVC,SAAA,iBAAA,CAUD;;;;;;;IAqBA,WAAA,CACM,QAjBU,EAkBV,UAjBY,EACJ,aAAe,EAkBtB,UAjBY,EAanB;QAKI,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAnBlB,IAAd,CAAA,aAAc,GAAA,aAAA,CAAe;;;QAuBzB,IAAI,CAAC,UAAU,EAAE;YACf,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,aAAa,EAAE,aAAa,EAAE,MAAM,CAAC,CAAC;SACxE;KACF;;;;;;;;;;;;;;;;IAFA,cAAA,CAAA,QAAA,EAAH;QAmBI,IAAI,CAlBC,QAAC,EAAS;YAmBb,OAlBO,CAAA,EAAE,EAAG,EAAA,CAAG,CAAC;SAmBjB;QACD,uBAlBM,KAAA,GAAQ,QAAA,CAAS,KAAC,CAAK,GAAC,CAAG,CAAC;QAmBlC,QAAQ,KAlBC,CAAK,MAAC;YAmBb,KAlBK,CAAA,EAAG,OAAO,CAAA,EAAE,EAAG,KAAA,CAAM,CAAC,CAAC,CAAC,CAAC;YAmB9B,KAlBK,CAAA,EAAG,QAAyB,KAAC,EAAK;YAmBvC,SAlBS,MAAM,KAAA,CAAM,CAkB3B,oBAAA,EAlB4B,QAAuB,CAkBnD,CAAA,CAlB2D,CAAG,CAAC;SAmB1D;KACF;;;;;IAKH,WArBG,CAAA,OAAA,EAqBH;;QAEI,IAAI,OArBC,CAAO,OAAC,EAAQ;YAsBnB,IAAI,IArBC,CAAI,OAAC,EAAQ;gBAsBhB,MArBM,CAAA,SAAE,EAAU,QAAA,CAAS,GAAG,IAAA,CAAK,cAAC,CAAc,IAAC,CAAI,OAAC,CAAO,CAAC;gBAuBhE,KAAK,CArBC,IAAC,CAAI,IAAC,CAAI,aAAC,CAAa,eAAC,CAAe,QAAC,EAAS,SAAA,CAAU,CAAC,CAAC,SAAC,CAsBjE,GAAG,IArBI,IAAA,CAAK,cAAC,CAAc,GAAC,CAAG,EAsB/B,CAAC,GArBK,KAAU,OAAA,CAAQ,GAAC,CAAG,CAmBxC,uBAAA,EAnByC,GAA0B,CAAG,OAAC,CAmBvE,CAnB8E,CAAE,CAAC,CAAC;aAsB3E;iBArBM;gBAsBL,IAAI,CArBC,gBAAC,EAAgB,CAAE;aAsBzB;SACF;QAED,IAAI,IArBC,CAAI,cAAC,EAAc,EAAG;YAsBzB,IAAI,CArBC,sBAAC,EAAsB,CAAE;SAsB/B;KACF;;;;IAIH,QAvBG,GAuBH;;;QAGI,IAAI,IAvBC,CAAI,cAAC,EAAc,EAAG;YAwBzB,IAAI,CAvBC,sBAAC,EAAsB,CAAE;SAwB/B;KACF;;;;IArBA,cAAA,GAAH;QA0BI,OAzBO,CAAA,IAAE,CAAI,OAAC,CAAO;KA0BtB;;;;;IAvBA,cAAA,CAAA,GAAA,EAAH;QA6BI,IAAI,CA5BC,gBAAC,EAAgB,CAAE;QA6BxB,IAAI,CA5BC,SAAC,CAAS,WAAC,CAAW,IAAC,CAAI,WAAC,CAAW,aAAC,EAAc,GAAA,CAAI,CAAC;KA6BjE;;;;IA1BA,gBAAA,GAAH;QA+BI,uBA9BM,aAAA,GAAgB,IAAA,CAAK,WAAC,CAAW,aAAC,CAAa;QA+BrD,uBA9BM,UAAA,GAAa,aAAA,CAAc,UAAC,CAAU,MAAC,CAAM;;;QAkCnD,KAAK,qBA9BI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,UAAA,EAAY,CAAA,EAAE,EAAG;YA+BnC,IAAI,CA9BC,SAAC,CAAS,WAAC,CAAW,aAAC,EAAc,aAAA,CAAc,UAAC,CAAU,CAAC,CAAC,CAAC,CAAC;SA+BxE;KACF;;;;IA5BA,sBAAA,GAAH;QAiCI,IAAI,CAhCC,IAAC,CAAI,cAAC,EAAc,EAAG;YAiC1B,OAAO;SACR;QAED,uBAhCM,IAAA,GAAO,IAAA,CAAK,WAAC,CAAW,aAAC,CAAa;QAiC5C,uBAhCM,YAAA,GAAe,IAAA,CAAK,OAAC;YAiCvB,IAAI,CAhCC,aAAC,CAAa,qBAAC,CAAqB,IAAC,CAAI,OAAC,CAAO;YAiCtD,IAAI,CAhCC,aAAC,CAAa,sBAAC,EAAsB,CAAE;QAkChD,IAAI,YAhCC,IAAe,IAAA,CAAK,qBAAC,EAAsB;YAiC9C,IAAI,IAhCC,CAAI,qBAAC,EAAsB;gBAiC9B,IAAI,CAhCC,SAAC,CAAS,WAAC,CAAW,IAAC,EAAK,IAAA,CAAK,qBAAC,CAAqB,CAAC;aAiC9D;YACD,IAAI,YAhCC,EAAa;gBAiChB,IAAI,CAhCC,SAAC,CAAS,QAAC,CAAQ,IAAC,EAAK,YAAA,CAAa,CAAC;aAiC7C;YACD,IAAI,CAhCC,qBAAC,GAAuB,YAAA,CAAa;SAiC3C;QAED,IAAI,IAhCC,CAAI,QAAC,IAAW,IAAA,CAAK,sBAAC,EAAuB;YAiChD,IAAI,IAhCC,CAAI,sBAAC,EAAuB;gBAiC/B,IAAI,CAhCC,SAAC,CAAS,WAAC,CAAW,IAAC,EAAK,IAAA,CAAK,sBAAC,CAAsB,CAAC;aAiC/D;YACD,IAAI,IAhCC,CAAI,QAAC,EAAS;gBAiCjB,IAAI,CAhCC,SAAC,CAAS,QAAC,CAAQ,IAAC,EAAK,IAAA,CAAK,QAAC,CAAQ,CAAC;aAkBnD;YAgBI,IAAI,CAhCC,sBAAC,GAAwB,IAAA,CAAK,QAAC,CAAQ;SAiC7C;KACF;;AA/BI,OAAP,CAAA,UAAO,GAAoC;IAiC3C,EAhCE,IAAA,EAAM,SAAA,EAAW,IAAA,EAAM,CAAA,CAgCzB,QAAA,EAAA,2BAAA;gBACE,QAAQ,EAhCE,UAgCZ;gBACE,MAAF,EAAU,CAAV,sGAAA,CAAA;gBACE,MAAF,EAAU,CAAV,OAAA,CAAA;gBACE,IAAF,EAAA;oBACA,MAAA,EAAA,KAhCmB;oBAiCb,OAAN,EAAA,UAAA;iBACA;gBACA,aAhCa,EAgCb,iBAAA,CAAA,IAAA;gBACA,mBAAA,EAAA,KAAA;gBACE,eAhCe,EAgCjB,uBAAA,CAAA,MAAA;aACA,EAAA,EAAA;CACA,CAAA;;;;;IAKA,EAAA,IAAA,EAAA,SAAA,GAAA;IAjCA,EAAA,IAAA,EAAA,UAAC,GAAA;IAmCD,EAAC,IAAI,EAAE,eAAP,GAAA;IACA,EAAC,IAAI,EAAE,SAAP,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,aAAA,EAAA,EAAA,EAAA,EAAA;CACA,CAAA;AACA,OAAA,CAAA,cAAA,GAAA;IACA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;IAjCA,SAAA,EAAA,CAAA,EAAA,IAAO,EAAP,KAAA,EAAA,EAAA;IAmCA,UAAA,EAlCW,CAkCX,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA;CACA,CAAA,AACA,AAiCA,AACA;;ADhRA,MAAA,aAAA,CAAA;;AAEmC,aAAnC,CAAA,UAAmC,GAAoC;IADvE,EAEE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBADtB,OAAO,EAEE,CAAA,eAAE,CAAe;gBAD1B,OAAO,EAEE,CAAA,OAAE,EAAQ,eAAA,CAAgB;gBADnC,YAAY,EAEE,CAAA,OAAE,CAAO;gBADvB,SAAS,EAEE,CAAA,sBAAE,CAAsB;aADpC,EAEC,EAAG;CADJ,CAEC;;;;AAED,aAAD,CAAA,cAAC,GAAA,MAAA,EACA,CAAC,AAGF,AAQC;;ADpCD;;GAEG,AAEH,AAAiP;;"}